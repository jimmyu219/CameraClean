// mysystem_mm_interconnect_0.v

// This file was auto-generated from altera_merlin_interconnect_wrapper_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 13.1 162 at 2015.04.27.13:45:28

`timescale 1 ps / 1 ps
module mysystem_mm_interconnect_0 (
		input  wire [11:0] hps_0_h2f_lw_axi_master_awid,                                        //                                       hps_0_h2f_lw_axi_master.awid
		input  wire [20:0] hps_0_h2f_lw_axi_master_awaddr,                                      //                                                              .awaddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awlen,                                       //                                                              .awlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awsize,                                      //                                                              .awsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awburst,                                     //                                                              .awburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awlock,                                      //                                                              .awlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awcache,                                     //                                                              .awcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awprot,                                      //                                                              .awprot
		input  wire        hps_0_h2f_lw_axi_master_awvalid,                                     //                                                              .awvalid
		output wire        hps_0_h2f_lw_axi_master_awready,                                     //                                                              .awready
		input  wire [11:0] hps_0_h2f_lw_axi_master_wid,                                         //                                                              .wid
		input  wire [31:0] hps_0_h2f_lw_axi_master_wdata,                                       //                                                              .wdata
		input  wire [3:0]  hps_0_h2f_lw_axi_master_wstrb,                                       //                                                              .wstrb
		input  wire        hps_0_h2f_lw_axi_master_wlast,                                       //                                                              .wlast
		input  wire        hps_0_h2f_lw_axi_master_wvalid,                                      //                                                              .wvalid
		output wire        hps_0_h2f_lw_axi_master_wready,                                      //                                                              .wready
		output wire [11:0] hps_0_h2f_lw_axi_master_bid,                                         //                                                              .bid
		output wire [1:0]  hps_0_h2f_lw_axi_master_bresp,                                       //                                                              .bresp
		output wire        hps_0_h2f_lw_axi_master_bvalid,                                      //                                                              .bvalid
		input  wire        hps_0_h2f_lw_axi_master_bready,                                      //                                                              .bready
		input  wire [11:0] hps_0_h2f_lw_axi_master_arid,                                        //                                                              .arid
		input  wire [20:0] hps_0_h2f_lw_axi_master_araddr,                                      //                                                              .araddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arlen,                                       //                                                              .arlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arsize,                                      //                                                              .arsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arburst,                                     //                                                              .arburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arlock,                                      //                                                              .arlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arcache,                                     //                                                              .arcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arprot,                                      //                                                              .arprot
		input  wire        hps_0_h2f_lw_axi_master_arvalid,                                     //                                                              .arvalid
		output wire        hps_0_h2f_lw_axi_master_arready,                                     //                                                              .arready
		output wire [11:0] hps_0_h2f_lw_axi_master_rid,                                         //                                                              .rid
		output wire [31:0] hps_0_h2f_lw_axi_master_rdata,                                       //                                                              .rdata
		output wire [1:0]  hps_0_h2f_lw_axi_master_rresp,                                       //                                                              .rresp
		output wire        hps_0_h2f_lw_axi_master_rlast,                                       //                                                              .rlast
		output wire        hps_0_h2f_lw_axi_master_rvalid,                                      //                                                              .rvalid
		input  wire        hps_0_h2f_lw_axi_master_rready,                                      //                                                              .rready
		input  wire        sys_sdram_pll_0_sys_clk_clk,                                         //                                       sys_sdram_pll_0_sys_clk.clk
		input  wire        hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        HPS_toMem_reset_reset_bridge_in_reset_reset,                         //                         HPS_toMem_reset_reset_bridge_in_reset.reset
		input  wire        start_reset_reset_bridge_in_reset_reset,                             //                             start_reset_reset_bridge_in_reset.reset
		output wire [1:0]  Col_Read_s1_address,                                                 //                                                   Col_Read_s1.address
		output wire        Col_Read_s1_write,                                                   //                                                              .write
		input  wire [31:0] Col_Read_s1_readdata,                                                //                                                              .readdata
		output wire [31:0] Col_Read_s1_writedata,                                               //                                                              .writedata
		output wire        Col_Read_s1_chipselect,                                              //                                                              .chipselect
		output wire [1:0]  ColAddr_s1_address,                                                  //                                                    ColAddr_s1.address
		output wire        ColAddr_s1_write,                                                    //                                                              .write
		input  wire [31:0] ColAddr_s1_readdata,                                                 //                                                              .readdata
		output wire [31:0] ColAddr_s1_writedata,                                                //                                                              .writedata
		output wire        ColAddr_s1_chipselect,                                               //                                                              .chipselect
		output wire [1:0]  ColData_s1_address,                                                  //                                                    ColData_s1.address
		output wire        ColData_s1_write,                                                    //                                                              .write
		input  wire [31:0] ColData_s1_readdata,                                                 //                                                              .readdata
		output wire [31:0] ColData_s1_writedata,                                                //                                                              .writedata
		output wire        ColData_s1_chipselect,                                               //                                                              .chipselect
		output wire [1:0]  HPS_CLK_s1_address,                                                  //                                                    HPS_CLK_s1.address
		output wire        HPS_CLK_s1_write,                                                    //                                                              .write
		input  wire [31:0] HPS_CLK_s1_readdata,                                                 //                                                              .readdata
		output wire [31:0] HPS_CLK_s1_writedata,                                                //                                                              .writedata
		output wire        HPS_CLK_s1_chipselect,                                               //                                                              .chipselect
		output wire [1:0]  HPS_Digits_s1_address,                                               //                                                 HPS_Digits_s1.address
		output wire        HPS_Digits_s1_write,                                                 //                                                              .write
		input  wire [31:0] HPS_Digits_s1_readdata,                                              //                                                              .readdata
		output wire [31:0] HPS_Digits_s1_writedata,                                             //                                                              .writedata
		output wire        HPS_Digits_s1_chipselect,                                            //                                                              .chipselect
		output wire [1:0]  HPS_fromMem_s1_address,                                              //                                                HPS_fromMem_s1.address
		output wire        HPS_fromMem_s1_write,                                                //                                                              .write
		input  wire [31:0] HPS_fromMem_s1_readdata,                                             //                                                              .readdata
		output wire [31:0] HPS_fromMem_s1_writedata,                                            //                                                              .writedata
		output wire        HPS_fromMem_s1_chipselect,                                           //                                                              .chipselect
		output wire [1:0]  HPS_State_s1_address,                                                //                                                  HPS_State_s1.address
		output wire        HPS_State_s1_write,                                                  //                                                              .write
		input  wire [31:0] HPS_State_s1_readdata,                                               //                                                              .readdata
		output wire [31:0] HPS_State_s1_writedata,                                              //                                                              .writedata
		output wire        HPS_State_s1_chipselect,                                             //                                                              .chipselect
		output wire [1:0]  HPS_toMem_s1_address,                                                //                                                  HPS_toMem_s1.address
		output wire        HPS_toMem_s1_write,                                                  //                                                              .write
		input  wire [31:0] HPS_toMem_s1_readdata,                                               //                                                              .readdata
		output wire [31:0] HPS_toMem_s1_writedata,                                              //                                                              .writedata
		output wire        HPS_toMem_s1_chipselect,                                             //                                                              .chipselect
		output wire [1:0]  ImageData_s1_address,                                                //                                                  ImageData_s1.address
		output wire        ImageData_s1_write,                                                  //                                                              .write
		input  wire [31:0] ImageData_s1_readdata,                                               //                                                              .readdata
		output wire [31:0] ImageData_s1_writedata,                                              //                                                              .writedata
		output wire        ImageData_s1_chipselect,                                             //                                                              .chipselect
		output wire [0:0]  jtag_uart_0_avalon_jtag_slave_address,                               //                                 jtag_uart_0_avalon_jtag_slave.address
		output wire        jtag_uart_0_avalon_jtag_slave_write,                                 //                                                              .write
		output wire        jtag_uart_0_avalon_jtag_slave_read,                                  //                                                              .read
		input  wire [31:0] jtag_uart_0_avalon_jtag_slave_readdata,                              //                                                              .readdata
		output wire [31:0] jtag_uart_0_avalon_jtag_slave_writedata,                             //                                                              .writedata
		input  wire        jtag_uart_0_avalon_jtag_slave_waitrequest,                           //                                                              .waitrequest
		output wire        jtag_uart_0_avalon_jtag_slave_chipselect,                            //                                                              .chipselect
		output wire [1:0]  ReadWrite_s1_address,                                                //                                                  ReadWrite_s1.address
		output wire        ReadWrite_s1_write,                                                  //                                                              .write
		input  wire [31:0] ReadWrite_s1_readdata,                                               //                                                              .readdata
		output wire [31:0] ReadWrite_s1_writedata,                                              //                                                              .writedata
		output wire        ReadWrite_s1_chipselect,                                             //                                                              .chipselect
		output wire [1:0]  Row_Read_s1_address,                                                 //                                                   Row_Read_s1.address
		output wire        Row_Read_s1_write,                                                   //                                                              .write
		input  wire [31:0] Row_Read_s1_readdata,                                                //                                                              .readdata
		output wire [31:0] Row_Read_s1_writedata,                                               //                                                              .writedata
		output wire        Row_Read_s1_chipselect,                                              //                                                              .chipselect
		output wire [1:0]  RowAddr_s1_address,                                                  //                                                    RowAddr_s1.address
		output wire        RowAddr_s1_write,                                                    //                                                              .write
		input  wire [31:0] RowAddr_s1_readdata,                                                 //                                                              .readdata
		output wire [31:0] RowAddr_s1_writedata,                                                //                                                              .writedata
		output wire        RowAddr_s1_chipselect,                                               //                                                              .chipselect
		output wire [1:0]  RowData_s1_address,                                                  //                                                    RowData_s1.address
		output wire        RowData_s1_write,                                                    //                                                              .write
		input  wire [31:0] RowData_s1_readdata,                                                 //                                                              .readdata
		output wire [31:0] RowData_s1_writedata,                                                //                                                              .writedata
		output wire        RowData_s1_chipselect,                                               //                                                              .chipselect
		output wire [1:0]  start_s1_address,                                                    //                                                      start_s1.address
		output wire        start_s1_write,                                                      //                                                              .write
		input  wire [31:0] start_s1_readdata,                                                   //                                                              .readdata
		output wire [31:0] start_s1_writedata,                                                  //                                                              .writedata
		output wire        start_s1_chipselect,                                                 //                                                              .chipselect
		output wire [1:0]  Verilog_ACK_s1_address,                                              //                                                Verilog_ACK_s1.address
		output wire        Verilog_ACK_s1_write,                                                //                                                              .write
		input  wire [31:0] Verilog_ACK_s1_readdata,                                             //                                                              .readdata
		output wire [31:0] Verilog_ACK_s1_writedata,                                            //                                                              .writedata
		output wire        Verilog_ACK_s1_chipselect                                            //                                                              .chipselect
	);

	wire          start_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                  // start_s1_translator:uav_waitrequest -> start_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] start_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                   // start_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> start_s1_translator:uav_burstcount
	wire   [31:0] start_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                    // start_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> start_s1_translator:uav_writedata
	wire   [20:0] start_s1_translator_avalon_universal_slave_0_agent_m0_address;                                      // start_s1_translator_avalon_universal_slave_0_agent:m0_address -> start_s1_translator:uav_address
	wire          start_s1_translator_avalon_universal_slave_0_agent_m0_write;                                        // start_s1_translator_avalon_universal_slave_0_agent:m0_write -> start_s1_translator:uav_write
	wire          start_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                         // start_s1_translator_avalon_universal_slave_0_agent:m0_lock -> start_s1_translator:uav_lock
	wire          start_s1_translator_avalon_universal_slave_0_agent_m0_read;                                         // start_s1_translator_avalon_universal_slave_0_agent:m0_read -> start_s1_translator:uav_read
	wire   [31:0] start_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                     // start_s1_translator:uav_readdata -> start_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          start_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                                // start_s1_translator:uav_readdatavalid -> start_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          start_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                  // start_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> start_s1_translator:uav_debugaccess
	wire    [3:0] start_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                   // start_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> start_s1_translator:uav_byteenable
	wire          start_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                           // start_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          start_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                                 // start_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          start_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                         // start_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] start_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                  // start_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          start_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                                 // start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> start_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                        // start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> start_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                              // start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> start_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                      // start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> start_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                               // start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> start_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                              // start_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                            // start_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                             // start_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                            // start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> start_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                            // start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> start_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                             // start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> start_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                            // start_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest;             // jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_burstcount;              // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_writedata;               // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	wire   [20:0] jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_address;                 // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	wire          jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_write;                   // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	wire          jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_lock;                    // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	wire          jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_read;                    // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_readdata;                // jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid;           // jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess;             // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	wire    [3:0] jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_byteenable;              // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;      // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_valid;            // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;    // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_data;             // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_ready;            // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;   // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;         // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket; // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;          // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;         // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;       // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;        // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;       // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;       // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;        // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;       // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          rowdata_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                // RowData_s1_translator:uav_waitrequest -> RowData_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] rowdata_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                 // RowData_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> RowData_s1_translator:uav_burstcount
	wire   [31:0] rowdata_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                  // RowData_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> RowData_s1_translator:uav_writedata
	wire   [20:0] rowdata_s1_translator_avalon_universal_slave_0_agent_m0_address;                                    // RowData_s1_translator_avalon_universal_slave_0_agent:m0_address -> RowData_s1_translator:uav_address
	wire          rowdata_s1_translator_avalon_universal_slave_0_agent_m0_write;                                      // RowData_s1_translator_avalon_universal_slave_0_agent:m0_write -> RowData_s1_translator:uav_write
	wire          rowdata_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                       // RowData_s1_translator_avalon_universal_slave_0_agent:m0_lock -> RowData_s1_translator:uav_lock
	wire          rowdata_s1_translator_avalon_universal_slave_0_agent_m0_read;                                       // RowData_s1_translator_avalon_universal_slave_0_agent:m0_read -> RowData_s1_translator:uav_read
	wire   [31:0] rowdata_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                   // RowData_s1_translator:uav_readdata -> RowData_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          rowdata_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                              // RowData_s1_translator:uav_readdatavalid -> RowData_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          rowdata_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                // RowData_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> RowData_s1_translator:uav_debugaccess
	wire    [3:0] rowdata_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                 // RowData_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> RowData_s1_translator:uav_byteenable
	wire          rowdata_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                         // RowData_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> RowData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          rowdata_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                               // RowData_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> RowData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          rowdata_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                       // RowData_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> RowData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] rowdata_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                // RowData_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> RowData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          rowdata_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                               // RowData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> RowData_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          rowdata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                      // RowData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> RowData_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          rowdata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                            // RowData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> RowData_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          rowdata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                    // RowData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> RowData_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] rowdata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                             // RowData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> RowData_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          rowdata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                            // RowData_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> RowData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          rowdata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                          // RowData_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> RowData_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] rowdata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                           // RowData_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> RowData_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          rowdata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                          // RowData_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> RowData_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          rowdata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                          // RowData_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> RowData_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] rowdata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                           // RowData_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> RowData_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          rowdata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                          // RowData_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> RowData_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                            // Verilog_ACK_s1_translator:uav_waitrequest -> Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                             // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> Verilog_ACK_s1_translator:uav_burstcount
	wire   [31:0] verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                              // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> Verilog_ACK_s1_translator:uav_writedata
	wire   [20:0] verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_address;                                // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:m0_address -> Verilog_ACK_s1_translator:uav_address
	wire          verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_write;                                  // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:m0_write -> Verilog_ACK_s1_translator:uav_write
	wire          verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                   // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:m0_lock -> Verilog_ACK_s1_translator:uav_lock
	wire          verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_read;                                   // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:m0_read -> Verilog_ACK_s1_translator:uav_read
	wire   [31:0] verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                               // Verilog_ACK_s1_translator:uav_readdata -> Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                          // Verilog_ACK_s1_translator:uav_readdatavalid -> Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                            // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> Verilog_ACK_s1_translator:uav_debugaccess
	wire    [3:0] verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                             // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> Verilog_ACK_s1_translator:uav_byteenable
	wire          verilog_ack_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                     // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> Verilog_ACK_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          verilog_ack_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                           // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> Verilog_ACK_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          verilog_ack_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                   // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> Verilog_ACK_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] verilog_ack_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                            // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> Verilog_ACK_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          verilog_ack_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                           // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          verilog_ack_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                  // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          verilog_ack_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                        // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          verilog_ack_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] verilog_ack_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                         // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          verilog_ack_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                        // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> Verilog_ACK_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          verilog_ack_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                      // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> Verilog_ACK_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] verilog_ack_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                       // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> Verilog_ACK_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          verilog_ack_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                      // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          verilog_ack_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                      // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] verilog_ack_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                       // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          verilog_ack_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                      // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> Verilog_ACK_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          imagedata_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                              // ImageData_s1_translator:uav_waitrequest -> ImageData_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] imagedata_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                               // ImageData_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> ImageData_s1_translator:uav_burstcount
	wire   [31:0] imagedata_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                // ImageData_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> ImageData_s1_translator:uav_writedata
	wire   [20:0] imagedata_s1_translator_avalon_universal_slave_0_agent_m0_address;                                  // ImageData_s1_translator_avalon_universal_slave_0_agent:m0_address -> ImageData_s1_translator:uav_address
	wire          imagedata_s1_translator_avalon_universal_slave_0_agent_m0_write;                                    // ImageData_s1_translator_avalon_universal_slave_0_agent:m0_write -> ImageData_s1_translator:uav_write
	wire          imagedata_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                     // ImageData_s1_translator_avalon_universal_slave_0_agent:m0_lock -> ImageData_s1_translator:uav_lock
	wire          imagedata_s1_translator_avalon_universal_slave_0_agent_m0_read;                                     // ImageData_s1_translator_avalon_universal_slave_0_agent:m0_read -> ImageData_s1_translator:uav_read
	wire   [31:0] imagedata_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                 // ImageData_s1_translator:uav_readdata -> ImageData_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          imagedata_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                            // ImageData_s1_translator:uav_readdatavalid -> ImageData_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          imagedata_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                              // ImageData_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> ImageData_s1_translator:uav_debugaccess
	wire    [3:0] imagedata_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                               // ImageData_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> ImageData_s1_translator:uav_byteenable
	wire          imagedata_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                       // ImageData_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> ImageData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          imagedata_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                             // ImageData_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> ImageData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          imagedata_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                     // ImageData_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> ImageData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] imagedata_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                              // ImageData_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> ImageData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          imagedata_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                             // ImageData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> ImageData_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          imagedata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                    // ImageData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> ImageData_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          imagedata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                          // ImageData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> ImageData_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          imagedata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                  // ImageData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> ImageData_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] imagedata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                           // ImageData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> ImageData_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          imagedata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                          // ImageData_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> ImageData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          imagedata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                        // ImageData_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> ImageData_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] imagedata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                         // ImageData_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> ImageData_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          imagedata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                        // ImageData_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> ImageData_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          imagedata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                        // ImageData_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> ImageData_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] imagedata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                         // ImageData_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> ImageData_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          imagedata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                        // ImageData_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> ImageData_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                              // HPS_toMem_s1_translator:uav_waitrequest -> HPS_toMem_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                               // HPS_toMem_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> HPS_toMem_s1_translator:uav_burstcount
	wire   [31:0] hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                // HPS_toMem_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> HPS_toMem_s1_translator:uav_writedata
	wire   [20:0] hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_address;                                  // HPS_toMem_s1_translator_avalon_universal_slave_0_agent:m0_address -> HPS_toMem_s1_translator:uav_address
	wire          hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_write;                                    // HPS_toMem_s1_translator_avalon_universal_slave_0_agent:m0_write -> HPS_toMem_s1_translator:uav_write
	wire          hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                     // HPS_toMem_s1_translator_avalon_universal_slave_0_agent:m0_lock -> HPS_toMem_s1_translator:uav_lock
	wire          hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_read;                                     // HPS_toMem_s1_translator_avalon_universal_slave_0_agent:m0_read -> HPS_toMem_s1_translator:uav_read
	wire   [31:0] hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                 // HPS_toMem_s1_translator:uav_readdata -> HPS_toMem_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                            // HPS_toMem_s1_translator:uav_readdatavalid -> HPS_toMem_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                              // HPS_toMem_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> HPS_toMem_s1_translator:uav_debugaccess
	wire    [3:0] hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                               // HPS_toMem_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> HPS_toMem_s1_translator:uav_byteenable
	wire          hps_tomem_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                       // HPS_toMem_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> HPS_toMem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          hps_tomem_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                             // HPS_toMem_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> HPS_toMem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          hps_tomem_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                     // HPS_toMem_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> HPS_toMem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] hps_tomem_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                              // HPS_toMem_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> HPS_toMem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          hps_tomem_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                             // HPS_toMem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> HPS_toMem_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          hps_tomem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                    // HPS_toMem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> HPS_toMem_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          hps_tomem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                          // HPS_toMem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> HPS_toMem_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          hps_tomem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                  // HPS_toMem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> HPS_toMem_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] hps_tomem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                           // HPS_toMem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> HPS_toMem_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          hps_tomem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                          // HPS_toMem_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> HPS_toMem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          hps_tomem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                        // HPS_toMem_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> HPS_toMem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] hps_tomem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                         // HPS_toMem_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> HPS_toMem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          hps_tomem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                        // HPS_toMem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> HPS_toMem_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          hps_tomem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                        // HPS_toMem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> HPS_toMem_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] hps_tomem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                         // HPS_toMem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> HPS_toMem_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          hps_tomem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                        // HPS_toMem_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> HPS_toMem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                             // HPS_Digits_s1_translator:uav_waitrequest -> HPS_Digits_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                              // HPS_Digits_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> HPS_Digits_s1_translator:uav_burstcount
	wire   [31:0] hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                               // HPS_Digits_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> HPS_Digits_s1_translator:uav_writedata
	wire   [20:0] hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_address;                                 // HPS_Digits_s1_translator_avalon_universal_slave_0_agent:m0_address -> HPS_Digits_s1_translator:uav_address
	wire          hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_write;                                   // HPS_Digits_s1_translator_avalon_universal_slave_0_agent:m0_write -> HPS_Digits_s1_translator:uav_write
	wire          hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                    // HPS_Digits_s1_translator_avalon_universal_slave_0_agent:m0_lock -> HPS_Digits_s1_translator:uav_lock
	wire          hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_read;                                    // HPS_Digits_s1_translator_avalon_universal_slave_0_agent:m0_read -> HPS_Digits_s1_translator:uav_read
	wire   [31:0] hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                // HPS_Digits_s1_translator:uav_readdata -> HPS_Digits_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                           // HPS_Digits_s1_translator:uav_readdatavalid -> HPS_Digits_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                             // HPS_Digits_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> HPS_Digits_s1_translator:uav_debugaccess
	wire    [3:0] hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                              // HPS_Digits_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> HPS_Digits_s1_translator:uav_byteenable
	wire          hps_digits_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                      // HPS_Digits_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> HPS_Digits_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          hps_digits_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                            // HPS_Digits_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> HPS_Digits_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          hps_digits_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                    // HPS_Digits_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> HPS_Digits_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] hps_digits_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                             // HPS_Digits_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> HPS_Digits_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          hps_digits_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                            // HPS_Digits_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> HPS_Digits_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          hps_digits_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                   // HPS_Digits_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> HPS_Digits_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          hps_digits_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                         // HPS_Digits_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> HPS_Digits_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          hps_digits_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                 // HPS_Digits_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> HPS_Digits_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] hps_digits_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                          // HPS_Digits_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> HPS_Digits_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          hps_digits_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                         // HPS_Digits_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> HPS_Digits_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          hps_digits_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                       // HPS_Digits_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> HPS_Digits_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] hps_digits_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                        // HPS_Digits_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> HPS_Digits_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          hps_digits_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                       // HPS_Digits_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> HPS_Digits_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          hps_digits_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                       // HPS_Digits_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> HPS_Digits_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] hps_digits_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                        // HPS_Digits_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> HPS_Digits_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          hps_digits_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                       // HPS_Digits_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> HPS_Digits_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          hps_state_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                              // HPS_State_s1_translator:uav_waitrequest -> HPS_State_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] hps_state_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                               // HPS_State_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> HPS_State_s1_translator:uav_burstcount
	wire   [31:0] hps_state_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                // HPS_State_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> HPS_State_s1_translator:uav_writedata
	wire   [20:0] hps_state_s1_translator_avalon_universal_slave_0_agent_m0_address;                                  // HPS_State_s1_translator_avalon_universal_slave_0_agent:m0_address -> HPS_State_s1_translator:uav_address
	wire          hps_state_s1_translator_avalon_universal_slave_0_agent_m0_write;                                    // HPS_State_s1_translator_avalon_universal_slave_0_agent:m0_write -> HPS_State_s1_translator:uav_write
	wire          hps_state_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                     // HPS_State_s1_translator_avalon_universal_slave_0_agent:m0_lock -> HPS_State_s1_translator:uav_lock
	wire          hps_state_s1_translator_avalon_universal_slave_0_agent_m0_read;                                     // HPS_State_s1_translator_avalon_universal_slave_0_agent:m0_read -> HPS_State_s1_translator:uav_read
	wire   [31:0] hps_state_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                 // HPS_State_s1_translator:uav_readdata -> HPS_State_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          hps_state_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                            // HPS_State_s1_translator:uav_readdatavalid -> HPS_State_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          hps_state_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                              // HPS_State_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> HPS_State_s1_translator:uav_debugaccess
	wire    [3:0] hps_state_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                               // HPS_State_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> HPS_State_s1_translator:uav_byteenable
	wire          hps_state_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                       // HPS_State_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> HPS_State_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          hps_state_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                             // HPS_State_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> HPS_State_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          hps_state_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                     // HPS_State_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> HPS_State_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] hps_state_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                              // HPS_State_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> HPS_State_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          hps_state_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                             // HPS_State_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> HPS_State_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          hps_state_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                    // HPS_State_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> HPS_State_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          hps_state_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                          // HPS_State_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> HPS_State_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          hps_state_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                  // HPS_State_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> HPS_State_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] hps_state_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                           // HPS_State_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> HPS_State_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          hps_state_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                          // HPS_State_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> HPS_State_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          hps_state_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                        // HPS_State_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> HPS_State_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] hps_state_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                         // HPS_State_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> HPS_State_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          hps_state_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                        // HPS_State_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> HPS_State_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          hps_state_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                        // HPS_State_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> HPS_State_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] hps_state_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                         // HPS_State_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> HPS_State_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          hps_state_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                        // HPS_State_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> HPS_State_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                            // HPS_fromMem_s1_translator:uav_waitrequest -> HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                             // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> HPS_fromMem_s1_translator:uav_burstcount
	wire   [31:0] hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                              // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> HPS_fromMem_s1_translator:uav_writedata
	wire   [20:0] hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_address;                                // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:m0_address -> HPS_fromMem_s1_translator:uav_address
	wire          hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_write;                                  // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:m0_write -> HPS_fromMem_s1_translator:uav_write
	wire          hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                   // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:m0_lock -> HPS_fromMem_s1_translator:uav_lock
	wire          hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_read;                                   // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:m0_read -> HPS_fromMem_s1_translator:uav_read
	wire   [31:0] hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                               // HPS_fromMem_s1_translator:uav_readdata -> HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                          // HPS_fromMem_s1_translator:uav_readdatavalid -> HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                            // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> HPS_fromMem_s1_translator:uav_debugaccess
	wire    [3:0] hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                             // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> HPS_fromMem_s1_translator:uav_byteenable
	wire          hps_frommem_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                     // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> HPS_fromMem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          hps_frommem_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                           // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> HPS_fromMem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          hps_frommem_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                   // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> HPS_fromMem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] hps_frommem_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                            // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> HPS_fromMem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          hps_frommem_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                           // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          hps_frommem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                  // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          hps_frommem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                        // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          hps_frommem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] hps_frommem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                         // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          hps_frommem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                        // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> HPS_fromMem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          hps_frommem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                      // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> HPS_fromMem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] hps_frommem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                       // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> HPS_fromMem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          hps_frommem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                      // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          hps_frommem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                      // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] hps_frommem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                       // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          hps_frommem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                      // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> HPS_fromMem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                // HPS_CLK_s1_translator:uav_waitrequest -> HPS_CLK_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                 // HPS_CLK_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> HPS_CLK_s1_translator:uav_burstcount
	wire   [31:0] hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                  // HPS_CLK_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> HPS_CLK_s1_translator:uav_writedata
	wire   [20:0] hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_address;                                    // HPS_CLK_s1_translator_avalon_universal_slave_0_agent:m0_address -> HPS_CLK_s1_translator:uav_address
	wire          hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_write;                                      // HPS_CLK_s1_translator_avalon_universal_slave_0_agent:m0_write -> HPS_CLK_s1_translator:uav_write
	wire          hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                       // HPS_CLK_s1_translator_avalon_universal_slave_0_agent:m0_lock -> HPS_CLK_s1_translator:uav_lock
	wire          hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_read;                                       // HPS_CLK_s1_translator_avalon_universal_slave_0_agent:m0_read -> HPS_CLK_s1_translator:uav_read
	wire   [31:0] hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                   // HPS_CLK_s1_translator:uav_readdata -> HPS_CLK_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                              // HPS_CLK_s1_translator:uav_readdatavalid -> HPS_CLK_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                // HPS_CLK_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> HPS_CLK_s1_translator:uav_debugaccess
	wire    [3:0] hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                 // HPS_CLK_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> HPS_CLK_s1_translator:uav_byteenable
	wire          hps_clk_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                         // HPS_CLK_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> HPS_CLK_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          hps_clk_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                               // HPS_CLK_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> HPS_CLK_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          hps_clk_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                       // HPS_CLK_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> HPS_CLK_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] hps_clk_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                // HPS_CLK_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> HPS_CLK_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          hps_clk_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                               // HPS_CLK_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> HPS_CLK_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          hps_clk_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                      // HPS_CLK_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> HPS_CLK_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          hps_clk_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                            // HPS_CLK_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> HPS_CLK_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          hps_clk_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                    // HPS_CLK_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> HPS_CLK_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] hps_clk_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                             // HPS_CLK_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> HPS_CLK_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          hps_clk_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                            // HPS_CLK_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> HPS_CLK_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          hps_clk_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                          // HPS_CLK_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> HPS_CLK_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] hps_clk_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                           // HPS_CLK_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> HPS_CLK_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          hps_clk_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                          // HPS_CLK_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> HPS_CLK_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          hps_clk_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                          // HPS_CLK_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> HPS_CLK_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] hps_clk_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                           // HPS_CLK_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> HPS_CLK_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          hps_clk_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                          // HPS_CLK_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> HPS_CLK_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          coldata_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                // ColData_s1_translator:uav_waitrequest -> ColData_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] coldata_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                 // ColData_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> ColData_s1_translator:uav_burstcount
	wire   [31:0] coldata_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                  // ColData_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> ColData_s1_translator:uav_writedata
	wire   [20:0] coldata_s1_translator_avalon_universal_slave_0_agent_m0_address;                                    // ColData_s1_translator_avalon_universal_slave_0_agent:m0_address -> ColData_s1_translator:uav_address
	wire          coldata_s1_translator_avalon_universal_slave_0_agent_m0_write;                                      // ColData_s1_translator_avalon_universal_slave_0_agent:m0_write -> ColData_s1_translator:uav_write
	wire          coldata_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                       // ColData_s1_translator_avalon_universal_slave_0_agent:m0_lock -> ColData_s1_translator:uav_lock
	wire          coldata_s1_translator_avalon_universal_slave_0_agent_m0_read;                                       // ColData_s1_translator_avalon_universal_slave_0_agent:m0_read -> ColData_s1_translator:uav_read
	wire   [31:0] coldata_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                   // ColData_s1_translator:uav_readdata -> ColData_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          coldata_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                              // ColData_s1_translator:uav_readdatavalid -> ColData_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          coldata_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                // ColData_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> ColData_s1_translator:uav_debugaccess
	wire    [3:0] coldata_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                 // ColData_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> ColData_s1_translator:uav_byteenable
	wire          coldata_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                         // ColData_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> ColData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          coldata_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                               // ColData_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> ColData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          coldata_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                       // ColData_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> ColData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] coldata_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                // ColData_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> ColData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          coldata_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                               // ColData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> ColData_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          coldata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                      // ColData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> ColData_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          coldata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                            // ColData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> ColData_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          coldata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                    // ColData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> ColData_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] coldata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                             // ColData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> ColData_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          coldata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                            // ColData_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> ColData_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          coldata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                          // ColData_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> ColData_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] coldata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                           // ColData_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> ColData_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          coldata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                          // ColData_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> ColData_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          coldata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                          // ColData_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> ColData_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] coldata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                           // ColData_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> ColData_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          coldata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                          // ColData_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> ColData_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          readwrite_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                              // ReadWrite_s1_translator:uav_waitrequest -> ReadWrite_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] readwrite_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                               // ReadWrite_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> ReadWrite_s1_translator:uav_burstcount
	wire   [31:0] readwrite_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                // ReadWrite_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> ReadWrite_s1_translator:uav_writedata
	wire   [20:0] readwrite_s1_translator_avalon_universal_slave_0_agent_m0_address;                                  // ReadWrite_s1_translator_avalon_universal_slave_0_agent:m0_address -> ReadWrite_s1_translator:uav_address
	wire          readwrite_s1_translator_avalon_universal_slave_0_agent_m0_write;                                    // ReadWrite_s1_translator_avalon_universal_slave_0_agent:m0_write -> ReadWrite_s1_translator:uav_write
	wire          readwrite_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                     // ReadWrite_s1_translator_avalon_universal_slave_0_agent:m0_lock -> ReadWrite_s1_translator:uav_lock
	wire          readwrite_s1_translator_avalon_universal_slave_0_agent_m0_read;                                     // ReadWrite_s1_translator_avalon_universal_slave_0_agent:m0_read -> ReadWrite_s1_translator:uav_read
	wire   [31:0] readwrite_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                 // ReadWrite_s1_translator:uav_readdata -> ReadWrite_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          readwrite_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                            // ReadWrite_s1_translator:uav_readdatavalid -> ReadWrite_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          readwrite_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                              // ReadWrite_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> ReadWrite_s1_translator:uav_debugaccess
	wire    [3:0] readwrite_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                               // ReadWrite_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> ReadWrite_s1_translator:uav_byteenable
	wire          readwrite_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                       // ReadWrite_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> ReadWrite_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          readwrite_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                             // ReadWrite_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> ReadWrite_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          readwrite_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                     // ReadWrite_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> ReadWrite_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] readwrite_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                              // ReadWrite_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> ReadWrite_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          readwrite_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                             // ReadWrite_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> ReadWrite_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          readwrite_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                    // ReadWrite_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> ReadWrite_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          readwrite_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                          // ReadWrite_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> ReadWrite_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          readwrite_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                  // ReadWrite_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> ReadWrite_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] readwrite_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                           // ReadWrite_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> ReadWrite_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          readwrite_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                          // ReadWrite_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> ReadWrite_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          readwrite_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                        // ReadWrite_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> ReadWrite_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] readwrite_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                         // ReadWrite_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> ReadWrite_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          readwrite_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                        // ReadWrite_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> ReadWrite_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          readwrite_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                        // ReadWrite_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> ReadWrite_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] readwrite_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                         // ReadWrite_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> ReadWrite_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          readwrite_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                        // ReadWrite_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> ReadWrite_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                // RowAddr_s1_translator:uav_waitrequest -> RowAddr_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                 // RowAddr_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> RowAddr_s1_translator:uav_burstcount
	wire   [31:0] rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                  // RowAddr_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> RowAddr_s1_translator:uav_writedata
	wire   [20:0] rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_address;                                    // RowAddr_s1_translator_avalon_universal_slave_0_agent:m0_address -> RowAddr_s1_translator:uav_address
	wire          rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_write;                                      // RowAddr_s1_translator_avalon_universal_slave_0_agent:m0_write -> RowAddr_s1_translator:uav_write
	wire          rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                       // RowAddr_s1_translator_avalon_universal_slave_0_agent:m0_lock -> RowAddr_s1_translator:uav_lock
	wire          rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_read;                                       // RowAddr_s1_translator_avalon_universal_slave_0_agent:m0_read -> RowAddr_s1_translator:uav_read
	wire   [31:0] rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                   // RowAddr_s1_translator:uav_readdata -> RowAddr_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                              // RowAddr_s1_translator:uav_readdatavalid -> RowAddr_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                // RowAddr_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> RowAddr_s1_translator:uav_debugaccess
	wire    [3:0] rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                 // RowAddr_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> RowAddr_s1_translator:uav_byteenable
	wire          rowaddr_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                         // RowAddr_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> RowAddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          rowaddr_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                               // RowAddr_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> RowAddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          rowaddr_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                       // RowAddr_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> RowAddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] rowaddr_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                // RowAddr_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> RowAddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          rowaddr_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                               // RowAddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> RowAddr_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          rowaddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                      // RowAddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> RowAddr_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          rowaddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                            // RowAddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> RowAddr_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          rowaddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                    // RowAddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> RowAddr_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] rowaddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                             // RowAddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> RowAddr_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          rowaddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                            // RowAddr_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> RowAddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          rowaddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                          // RowAddr_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> RowAddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] rowaddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                           // RowAddr_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> RowAddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          rowaddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                          // RowAddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> RowAddr_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          rowaddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                          // RowAddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> RowAddr_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] rowaddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                           // RowAddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> RowAddr_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          rowaddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                          // RowAddr_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> RowAddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          coladdr_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                // ColAddr_s1_translator:uav_waitrequest -> ColAddr_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] coladdr_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                 // ColAddr_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> ColAddr_s1_translator:uav_burstcount
	wire   [31:0] coladdr_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                  // ColAddr_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> ColAddr_s1_translator:uav_writedata
	wire   [20:0] coladdr_s1_translator_avalon_universal_slave_0_agent_m0_address;                                    // ColAddr_s1_translator_avalon_universal_slave_0_agent:m0_address -> ColAddr_s1_translator:uav_address
	wire          coladdr_s1_translator_avalon_universal_slave_0_agent_m0_write;                                      // ColAddr_s1_translator_avalon_universal_slave_0_agent:m0_write -> ColAddr_s1_translator:uav_write
	wire          coladdr_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                       // ColAddr_s1_translator_avalon_universal_slave_0_agent:m0_lock -> ColAddr_s1_translator:uav_lock
	wire          coladdr_s1_translator_avalon_universal_slave_0_agent_m0_read;                                       // ColAddr_s1_translator_avalon_universal_slave_0_agent:m0_read -> ColAddr_s1_translator:uav_read
	wire   [31:0] coladdr_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                   // ColAddr_s1_translator:uav_readdata -> ColAddr_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          coladdr_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                              // ColAddr_s1_translator:uav_readdatavalid -> ColAddr_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          coladdr_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                // ColAddr_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> ColAddr_s1_translator:uav_debugaccess
	wire    [3:0] coladdr_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                 // ColAddr_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> ColAddr_s1_translator:uav_byteenable
	wire          coladdr_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                         // ColAddr_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> ColAddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          coladdr_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                               // ColAddr_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> ColAddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          coladdr_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                       // ColAddr_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> ColAddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] coladdr_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                                // ColAddr_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> ColAddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          coladdr_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                               // ColAddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> ColAddr_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          coladdr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                      // ColAddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> ColAddr_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          coladdr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                            // ColAddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> ColAddr_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          coladdr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                    // ColAddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> ColAddr_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] coladdr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                             // ColAddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> ColAddr_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          coladdr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                            // ColAddr_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> ColAddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          coladdr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                          // ColAddr_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> ColAddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] coladdr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                           // ColAddr_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> ColAddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          coladdr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                          // ColAddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> ColAddr_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          coladdr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                          // ColAddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> ColAddr_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] coladdr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                           // ColAddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> ColAddr_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          coladdr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                          // ColAddr_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> ColAddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          row_read_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                               // Row_Read_s1_translator:uav_waitrequest -> Row_Read_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] row_read_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                // Row_Read_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> Row_Read_s1_translator:uav_burstcount
	wire   [31:0] row_read_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                 // Row_Read_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> Row_Read_s1_translator:uav_writedata
	wire   [20:0] row_read_s1_translator_avalon_universal_slave_0_agent_m0_address;                                   // Row_Read_s1_translator_avalon_universal_slave_0_agent:m0_address -> Row_Read_s1_translator:uav_address
	wire          row_read_s1_translator_avalon_universal_slave_0_agent_m0_write;                                     // Row_Read_s1_translator_avalon_universal_slave_0_agent:m0_write -> Row_Read_s1_translator:uav_write
	wire          row_read_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                      // Row_Read_s1_translator_avalon_universal_slave_0_agent:m0_lock -> Row_Read_s1_translator:uav_lock
	wire          row_read_s1_translator_avalon_universal_slave_0_agent_m0_read;                                      // Row_Read_s1_translator_avalon_universal_slave_0_agent:m0_read -> Row_Read_s1_translator:uav_read
	wire   [31:0] row_read_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                  // Row_Read_s1_translator:uav_readdata -> Row_Read_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          row_read_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                             // Row_Read_s1_translator:uav_readdatavalid -> Row_Read_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          row_read_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                               // Row_Read_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> Row_Read_s1_translator:uav_debugaccess
	wire    [3:0] row_read_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                // Row_Read_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> Row_Read_s1_translator:uav_byteenable
	wire          row_read_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                        // Row_Read_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> Row_Read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          row_read_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                              // Row_Read_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> Row_Read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          row_read_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                      // Row_Read_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> Row_Read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] row_read_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                               // Row_Read_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> Row_Read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          row_read_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                              // Row_Read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> Row_Read_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          row_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                     // Row_Read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> Row_Read_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          row_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                           // Row_Read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> Row_Read_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          row_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                   // Row_Read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> Row_Read_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] row_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                            // Row_Read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> Row_Read_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          row_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                           // Row_Read_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> Row_Read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          row_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                         // Row_Read_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> Row_Read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] row_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                          // Row_Read_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> Row_Read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          row_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                         // Row_Read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> Row_Read_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          row_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                         // Row_Read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> Row_Read_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] row_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                          // Row_Read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> Row_Read_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          row_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                         // Row_Read_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> Row_Read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          col_read_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                               // Col_Read_s1_translator:uav_waitrequest -> Col_Read_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] col_read_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                                // Col_Read_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> Col_Read_s1_translator:uav_burstcount
	wire   [31:0] col_read_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                                 // Col_Read_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> Col_Read_s1_translator:uav_writedata
	wire   [20:0] col_read_s1_translator_avalon_universal_slave_0_agent_m0_address;                                   // Col_Read_s1_translator_avalon_universal_slave_0_agent:m0_address -> Col_Read_s1_translator:uav_address
	wire          col_read_s1_translator_avalon_universal_slave_0_agent_m0_write;                                     // Col_Read_s1_translator_avalon_universal_slave_0_agent:m0_write -> Col_Read_s1_translator:uav_write
	wire          col_read_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                      // Col_Read_s1_translator_avalon_universal_slave_0_agent:m0_lock -> Col_Read_s1_translator:uav_lock
	wire          col_read_s1_translator_avalon_universal_slave_0_agent_m0_read;                                      // Col_Read_s1_translator_avalon_universal_slave_0_agent:m0_read -> Col_Read_s1_translator:uav_read
	wire   [31:0] col_read_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                  // Col_Read_s1_translator:uav_readdata -> Col_Read_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          col_read_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                             // Col_Read_s1_translator:uav_readdatavalid -> Col_Read_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          col_read_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                               // Col_Read_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> Col_Read_s1_translator:uav_debugaccess
	wire    [3:0] col_read_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                                // Col_Read_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> Col_Read_s1_translator:uav_byteenable
	wire          col_read_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                        // Col_Read_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> Col_Read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          col_read_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                              // Col_Read_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> Col_Read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          col_read_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                      // Col_Read_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> Col_Read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [118:0] col_read_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                               // Col_Read_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> Col_Read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          col_read_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                              // Col_Read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> Col_Read_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          col_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                     // Col_Read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> Col_Read_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          col_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                           // Col_Read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> Col_Read_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          col_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                   // Col_Read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> Col_Read_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [118:0] col_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                            // Col_Read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> Col_Read_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          col_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                           // Col_Read_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> Col_Read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          col_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                         // Col_Read_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> Col_Read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] col_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                          // Col_Read_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> Col_Read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          col_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                         // Col_Read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> Col_Read_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          col_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                         // Col_Read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> Col_Read_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] col_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                          // Col_Read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> Col_Read_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          col_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                         // Col_Read_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> Col_Read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket;                                                 // hps_0_h2f_lw_axi_master_agent:write_cp_endofpacket -> addr_router:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_valid;                                                       // hps_0_h2f_lw_axi_master_agent:write_cp_valid -> addr_router:sink_valid
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket;                                               // hps_0_h2f_lw_axi_master_agent:write_cp_startofpacket -> addr_router:sink_startofpacket
	wire  [117:0] hps_0_h2f_lw_axi_master_agent_write_cp_data;                                                        // hps_0_h2f_lw_axi_master_agent:write_cp_data -> addr_router:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_ready;                                                       // addr_router:sink_ready -> hps_0_h2f_lw_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket;                                                  // hps_0_h2f_lw_axi_master_agent:read_cp_endofpacket -> addr_router_001:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_valid;                                                        // hps_0_h2f_lw_axi_master_agent:read_cp_valid -> addr_router_001:sink_valid
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket;                                                // hps_0_h2f_lw_axi_master_agent:read_cp_startofpacket -> addr_router_001:sink_startofpacket
	wire  [117:0] hps_0_h2f_lw_axi_master_agent_read_cp_data;                                                         // hps_0_h2f_lw_axi_master_agent:read_cp_data -> addr_router_001:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_ready;                                                        // addr_router_001:sink_ready -> hps_0_h2f_lw_axi_master_agent:read_cp_ready
	wire          start_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                  // start_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router:sink_endofpacket
	wire          start_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                        // start_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router:sink_valid
	wire          start_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                                // start_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router:sink_startofpacket
	wire  [117:0] start_s1_translator_avalon_universal_slave_0_agent_rp_data;                                         // start_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router:sink_data
	wire          start_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                        // id_router:sink_ready -> start_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_src_endofpacket;                                                                          // id_router:src_endofpacket -> rsp_xbar_demux:sink_endofpacket
	wire          id_router_src_valid;                                                                                // id_router:src_valid -> rsp_xbar_demux:sink_valid
	wire          id_router_src_startofpacket;                                                                        // id_router:src_startofpacket -> rsp_xbar_demux:sink_startofpacket
	wire  [117:0] id_router_src_data;                                                                                 // id_router:src_data -> rsp_xbar_demux:sink_data
	wire   [15:0] id_router_src_channel;                                                                              // id_router:src_channel -> rsp_xbar_demux:sink_channel
	wire          id_router_src_ready;                                                                                // rsp_xbar_demux:sink_ready -> id_router:src_ready
	wire          jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket;             // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_001:sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_valid;                   // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_001:sink_valid
	wire          jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket;           // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_001:sink_startofpacket
	wire  [117:0] jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_data;                    // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rp_data -> id_router_001:sink_data
	wire          jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_ready;                   // id_router_001:sink_ready -> jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_001_src_endofpacket;                                                                      // id_router_001:src_endofpacket -> rsp_xbar_demux_001:sink_endofpacket
	wire          id_router_001_src_valid;                                                                            // id_router_001:src_valid -> rsp_xbar_demux_001:sink_valid
	wire          id_router_001_src_startofpacket;                                                                    // id_router_001:src_startofpacket -> rsp_xbar_demux_001:sink_startofpacket
	wire  [117:0] id_router_001_src_data;                                                                             // id_router_001:src_data -> rsp_xbar_demux_001:sink_data
	wire   [15:0] id_router_001_src_channel;                                                                          // id_router_001:src_channel -> rsp_xbar_demux_001:sink_channel
	wire          id_router_001_src_ready;                                                                            // rsp_xbar_demux_001:sink_ready -> id_router_001:src_ready
	wire          rowdata_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                // RowData_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_002:sink_endofpacket
	wire          rowdata_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                      // RowData_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_002:sink_valid
	wire          rowdata_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                              // RowData_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_002:sink_startofpacket
	wire  [117:0] rowdata_s1_translator_avalon_universal_slave_0_agent_rp_data;                                       // RowData_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_002:sink_data
	wire          rowdata_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                      // id_router_002:sink_ready -> RowData_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_002_src_endofpacket;                                                                      // id_router_002:src_endofpacket -> rsp_xbar_demux_002:sink_endofpacket
	wire          id_router_002_src_valid;                                                                            // id_router_002:src_valid -> rsp_xbar_demux_002:sink_valid
	wire          id_router_002_src_startofpacket;                                                                    // id_router_002:src_startofpacket -> rsp_xbar_demux_002:sink_startofpacket
	wire  [117:0] id_router_002_src_data;                                                                             // id_router_002:src_data -> rsp_xbar_demux_002:sink_data
	wire   [15:0] id_router_002_src_channel;                                                                          // id_router_002:src_channel -> rsp_xbar_demux_002:sink_channel
	wire          id_router_002_src_ready;                                                                            // rsp_xbar_demux_002:sink_ready -> id_router_002:src_ready
	wire          verilog_ack_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                            // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_003:sink_endofpacket
	wire          verilog_ack_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                  // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_003:sink_valid
	wire          verilog_ack_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                          // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_003:sink_startofpacket
	wire  [117:0] verilog_ack_s1_translator_avalon_universal_slave_0_agent_rp_data;                                   // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_003:sink_data
	wire          verilog_ack_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                  // id_router_003:sink_ready -> Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_003_src_endofpacket;                                                                      // id_router_003:src_endofpacket -> rsp_xbar_demux_003:sink_endofpacket
	wire          id_router_003_src_valid;                                                                            // id_router_003:src_valid -> rsp_xbar_demux_003:sink_valid
	wire          id_router_003_src_startofpacket;                                                                    // id_router_003:src_startofpacket -> rsp_xbar_demux_003:sink_startofpacket
	wire  [117:0] id_router_003_src_data;                                                                             // id_router_003:src_data -> rsp_xbar_demux_003:sink_data
	wire   [15:0] id_router_003_src_channel;                                                                          // id_router_003:src_channel -> rsp_xbar_demux_003:sink_channel
	wire          id_router_003_src_ready;                                                                            // rsp_xbar_demux_003:sink_ready -> id_router_003:src_ready
	wire          imagedata_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                              // ImageData_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_004:sink_endofpacket
	wire          imagedata_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                    // ImageData_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_004:sink_valid
	wire          imagedata_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                            // ImageData_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_004:sink_startofpacket
	wire  [117:0] imagedata_s1_translator_avalon_universal_slave_0_agent_rp_data;                                     // ImageData_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_004:sink_data
	wire          imagedata_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                    // id_router_004:sink_ready -> ImageData_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_004_src_endofpacket;                                                                      // id_router_004:src_endofpacket -> rsp_xbar_demux_004:sink_endofpacket
	wire          id_router_004_src_valid;                                                                            // id_router_004:src_valid -> rsp_xbar_demux_004:sink_valid
	wire          id_router_004_src_startofpacket;                                                                    // id_router_004:src_startofpacket -> rsp_xbar_demux_004:sink_startofpacket
	wire  [117:0] id_router_004_src_data;                                                                             // id_router_004:src_data -> rsp_xbar_demux_004:sink_data
	wire   [15:0] id_router_004_src_channel;                                                                          // id_router_004:src_channel -> rsp_xbar_demux_004:sink_channel
	wire          id_router_004_src_ready;                                                                            // rsp_xbar_demux_004:sink_ready -> id_router_004:src_ready
	wire          hps_tomem_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                              // HPS_toMem_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_005:sink_endofpacket
	wire          hps_tomem_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                    // HPS_toMem_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_005:sink_valid
	wire          hps_tomem_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                            // HPS_toMem_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_005:sink_startofpacket
	wire  [117:0] hps_tomem_s1_translator_avalon_universal_slave_0_agent_rp_data;                                     // HPS_toMem_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_005:sink_data
	wire          hps_tomem_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                    // id_router_005:sink_ready -> HPS_toMem_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_005_src_endofpacket;                                                                      // id_router_005:src_endofpacket -> rsp_xbar_demux_005:sink_endofpacket
	wire          id_router_005_src_valid;                                                                            // id_router_005:src_valid -> rsp_xbar_demux_005:sink_valid
	wire          id_router_005_src_startofpacket;                                                                    // id_router_005:src_startofpacket -> rsp_xbar_demux_005:sink_startofpacket
	wire  [117:0] id_router_005_src_data;                                                                             // id_router_005:src_data -> rsp_xbar_demux_005:sink_data
	wire   [15:0] id_router_005_src_channel;                                                                          // id_router_005:src_channel -> rsp_xbar_demux_005:sink_channel
	wire          id_router_005_src_ready;                                                                            // rsp_xbar_demux_005:sink_ready -> id_router_005:src_ready
	wire          hps_digits_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                             // HPS_Digits_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_006:sink_endofpacket
	wire          hps_digits_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                   // HPS_Digits_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_006:sink_valid
	wire          hps_digits_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                           // HPS_Digits_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_006:sink_startofpacket
	wire  [117:0] hps_digits_s1_translator_avalon_universal_slave_0_agent_rp_data;                                    // HPS_Digits_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_006:sink_data
	wire          hps_digits_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                   // id_router_006:sink_ready -> HPS_Digits_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_006_src_endofpacket;                                                                      // id_router_006:src_endofpacket -> rsp_xbar_demux_006:sink_endofpacket
	wire          id_router_006_src_valid;                                                                            // id_router_006:src_valid -> rsp_xbar_demux_006:sink_valid
	wire          id_router_006_src_startofpacket;                                                                    // id_router_006:src_startofpacket -> rsp_xbar_demux_006:sink_startofpacket
	wire  [117:0] id_router_006_src_data;                                                                             // id_router_006:src_data -> rsp_xbar_demux_006:sink_data
	wire   [15:0] id_router_006_src_channel;                                                                          // id_router_006:src_channel -> rsp_xbar_demux_006:sink_channel
	wire          id_router_006_src_ready;                                                                            // rsp_xbar_demux_006:sink_ready -> id_router_006:src_ready
	wire          hps_state_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                              // HPS_State_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_007:sink_endofpacket
	wire          hps_state_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                    // HPS_State_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_007:sink_valid
	wire          hps_state_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                            // HPS_State_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_007:sink_startofpacket
	wire  [117:0] hps_state_s1_translator_avalon_universal_slave_0_agent_rp_data;                                     // HPS_State_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_007:sink_data
	wire          hps_state_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                    // id_router_007:sink_ready -> HPS_State_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_007_src_endofpacket;                                                                      // id_router_007:src_endofpacket -> rsp_xbar_demux_007:sink_endofpacket
	wire          id_router_007_src_valid;                                                                            // id_router_007:src_valid -> rsp_xbar_demux_007:sink_valid
	wire          id_router_007_src_startofpacket;                                                                    // id_router_007:src_startofpacket -> rsp_xbar_demux_007:sink_startofpacket
	wire  [117:0] id_router_007_src_data;                                                                             // id_router_007:src_data -> rsp_xbar_demux_007:sink_data
	wire   [15:0] id_router_007_src_channel;                                                                          // id_router_007:src_channel -> rsp_xbar_demux_007:sink_channel
	wire          id_router_007_src_ready;                                                                            // rsp_xbar_demux_007:sink_ready -> id_router_007:src_ready
	wire          hps_frommem_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                            // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_008:sink_endofpacket
	wire          hps_frommem_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                  // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_008:sink_valid
	wire          hps_frommem_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                          // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_008:sink_startofpacket
	wire  [117:0] hps_frommem_s1_translator_avalon_universal_slave_0_agent_rp_data;                                   // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_008:sink_data
	wire          hps_frommem_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                  // id_router_008:sink_ready -> HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_008_src_endofpacket;                                                                      // id_router_008:src_endofpacket -> rsp_xbar_demux_008:sink_endofpacket
	wire          id_router_008_src_valid;                                                                            // id_router_008:src_valid -> rsp_xbar_demux_008:sink_valid
	wire          id_router_008_src_startofpacket;                                                                    // id_router_008:src_startofpacket -> rsp_xbar_demux_008:sink_startofpacket
	wire  [117:0] id_router_008_src_data;                                                                             // id_router_008:src_data -> rsp_xbar_demux_008:sink_data
	wire   [15:0] id_router_008_src_channel;                                                                          // id_router_008:src_channel -> rsp_xbar_demux_008:sink_channel
	wire          id_router_008_src_ready;                                                                            // rsp_xbar_demux_008:sink_ready -> id_router_008:src_ready
	wire          hps_clk_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                // HPS_CLK_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_009:sink_endofpacket
	wire          hps_clk_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                      // HPS_CLK_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_009:sink_valid
	wire          hps_clk_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                              // HPS_CLK_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_009:sink_startofpacket
	wire  [117:0] hps_clk_s1_translator_avalon_universal_slave_0_agent_rp_data;                                       // HPS_CLK_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_009:sink_data
	wire          hps_clk_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                      // id_router_009:sink_ready -> HPS_CLK_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_009_src_endofpacket;                                                                      // id_router_009:src_endofpacket -> rsp_xbar_demux_009:sink_endofpacket
	wire          id_router_009_src_valid;                                                                            // id_router_009:src_valid -> rsp_xbar_demux_009:sink_valid
	wire          id_router_009_src_startofpacket;                                                                    // id_router_009:src_startofpacket -> rsp_xbar_demux_009:sink_startofpacket
	wire  [117:0] id_router_009_src_data;                                                                             // id_router_009:src_data -> rsp_xbar_demux_009:sink_data
	wire   [15:0] id_router_009_src_channel;                                                                          // id_router_009:src_channel -> rsp_xbar_demux_009:sink_channel
	wire          id_router_009_src_ready;                                                                            // rsp_xbar_demux_009:sink_ready -> id_router_009:src_ready
	wire          coldata_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                // ColData_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_010:sink_endofpacket
	wire          coldata_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                      // ColData_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_010:sink_valid
	wire          coldata_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                              // ColData_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_010:sink_startofpacket
	wire  [117:0] coldata_s1_translator_avalon_universal_slave_0_agent_rp_data;                                       // ColData_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_010:sink_data
	wire          coldata_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                      // id_router_010:sink_ready -> ColData_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_010_src_endofpacket;                                                                      // id_router_010:src_endofpacket -> rsp_xbar_demux_010:sink_endofpacket
	wire          id_router_010_src_valid;                                                                            // id_router_010:src_valid -> rsp_xbar_demux_010:sink_valid
	wire          id_router_010_src_startofpacket;                                                                    // id_router_010:src_startofpacket -> rsp_xbar_demux_010:sink_startofpacket
	wire  [117:0] id_router_010_src_data;                                                                             // id_router_010:src_data -> rsp_xbar_demux_010:sink_data
	wire   [15:0] id_router_010_src_channel;                                                                          // id_router_010:src_channel -> rsp_xbar_demux_010:sink_channel
	wire          id_router_010_src_ready;                                                                            // rsp_xbar_demux_010:sink_ready -> id_router_010:src_ready
	wire          readwrite_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                              // ReadWrite_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_011:sink_endofpacket
	wire          readwrite_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                    // ReadWrite_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_011:sink_valid
	wire          readwrite_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                            // ReadWrite_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_011:sink_startofpacket
	wire  [117:0] readwrite_s1_translator_avalon_universal_slave_0_agent_rp_data;                                     // ReadWrite_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_011:sink_data
	wire          readwrite_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                    // id_router_011:sink_ready -> ReadWrite_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_011_src_endofpacket;                                                                      // id_router_011:src_endofpacket -> rsp_xbar_demux_011:sink_endofpacket
	wire          id_router_011_src_valid;                                                                            // id_router_011:src_valid -> rsp_xbar_demux_011:sink_valid
	wire          id_router_011_src_startofpacket;                                                                    // id_router_011:src_startofpacket -> rsp_xbar_demux_011:sink_startofpacket
	wire  [117:0] id_router_011_src_data;                                                                             // id_router_011:src_data -> rsp_xbar_demux_011:sink_data
	wire   [15:0] id_router_011_src_channel;                                                                          // id_router_011:src_channel -> rsp_xbar_demux_011:sink_channel
	wire          id_router_011_src_ready;                                                                            // rsp_xbar_demux_011:sink_ready -> id_router_011:src_ready
	wire          rowaddr_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                // RowAddr_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_012:sink_endofpacket
	wire          rowaddr_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                      // RowAddr_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_012:sink_valid
	wire          rowaddr_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                              // RowAddr_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_012:sink_startofpacket
	wire  [117:0] rowaddr_s1_translator_avalon_universal_slave_0_agent_rp_data;                                       // RowAddr_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_012:sink_data
	wire          rowaddr_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                      // id_router_012:sink_ready -> RowAddr_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_012_src_endofpacket;                                                                      // id_router_012:src_endofpacket -> rsp_xbar_demux_012:sink_endofpacket
	wire          id_router_012_src_valid;                                                                            // id_router_012:src_valid -> rsp_xbar_demux_012:sink_valid
	wire          id_router_012_src_startofpacket;                                                                    // id_router_012:src_startofpacket -> rsp_xbar_demux_012:sink_startofpacket
	wire  [117:0] id_router_012_src_data;                                                                             // id_router_012:src_data -> rsp_xbar_demux_012:sink_data
	wire   [15:0] id_router_012_src_channel;                                                                          // id_router_012:src_channel -> rsp_xbar_demux_012:sink_channel
	wire          id_router_012_src_ready;                                                                            // rsp_xbar_demux_012:sink_ready -> id_router_012:src_ready
	wire          coladdr_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                // ColAddr_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_013:sink_endofpacket
	wire          coladdr_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                      // ColAddr_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_013:sink_valid
	wire          coladdr_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                              // ColAddr_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_013:sink_startofpacket
	wire  [117:0] coladdr_s1_translator_avalon_universal_slave_0_agent_rp_data;                                       // ColAddr_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_013:sink_data
	wire          coladdr_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                      // id_router_013:sink_ready -> ColAddr_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_013_src_endofpacket;                                                                      // id_router_013:src_endofpacket -> rsp_xbar_demux_013:sink_endofpacket
	wire          id_router_013_src_valid;                                                                            // id_router_013:src_valid -> rsp_xbar_demux_013:sink_valid
	wire          id_router_013_src_startofpacket;                                                                    // id_router_013:src_startofpacket -> rsp_xbar_demux_013:sink_startofpacket
	wire  [117:0] id_router_013_src_data;                                                                             // id_router_013:src_data -> rsp_xbar_demux_013:sink_data
	wire   [15:0] id_router_013_src_channel;                                                                          // id_router_013:src_channel -> rsp_xbar_demux_013:sink_channel
	wire          id_router_013_src_ready;                                                                            // rsp_xbar_demux_013:sink_ready -> id_router_013:src_ready
	wire          row_read_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                               // Row_Read_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_014:sink_endofpacket
	wire          row_read_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                     // Row_Read_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_014:sink_valid
	wire          row_read_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                             // Row_Read_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_014:sink_startofpacket
	wire  [117:0] row_read_s1_translator_avalon_universal_slave_0_agent_rp_data;                                      // Row_Read_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_014:sink_data
	wire          row_read_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                     // id_router_014:sink_ready -> Row_Read_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_014_src_endofpacket;                                                                      // id_router_014:src_endofpacket -> rsp_xbar_demux_014:sink_endofpacket
	wire          id_router_014_src_valid;                                                                            // id_router_014:src_valid -> rsp_xbar_demux_014:sink_valid
	wire          id_router_014_src_startofpacket;                                                                    // id_router_014:src_startofpacket -> rsp_xbar_demux_014:sink_startofpacket
	wire  [117:0] id_router_014_src_data;                                                                             // id_router_014:src_data -> rsp_xbar_demux_014:sink_data
	wire   [15:0] id_router_014_src_channel;                                                                          // id_router_014:src_channel -> rsp_xbar_demux_014:sink_channel
	wire          id_router_014_src_ready;                                                                            // rsp_xbar_demux_014:sink_ready -> id_router_014:src_ready
	wire          col_read_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                               // Col_Read_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_015:sink_endofpacket
	wire          col_read_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                     // Col_Read_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_015:sink_valid
	wire          col_read_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                             // Col_Read_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_015:sink_startofpacket
	wire  [117:0] col_read_s1_translator_avalon_universal_slave_0_agent_rp_data;                                      // Col_Read_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_015:sink_data
	wire          col_read_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                     // id_router_015:sink_ready -> Col_Read_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_015_src_endofpacket;                                                                      // id_router_015:src_endofpacket -> rsp_xbar_demux_015:sink_endofpacket
	wire          id_router_015_src_valid;                                                                            // id_router_015:src_valid -> rsp_xbar_demux_015:sink_valid
	wire          id_router_015_src_startofpacket;                                                                    // id_router_015:src_startofpacket -> rsp_xbar_demux_015:sink_startofpacket
	wire  [117:0] id_router_015_src_data;                                                                             // id_router_015:src_data -> rsp_xbar_demux_015:sink_data
	wire   [15:0] id_router_015_src_channel;                                                                          // id_router_015:src_channel -> rsp_xbar_demux_015:sink_channel
	wire          id_router_015_src_ready;                                                                            // rsp_xbar_demux_015:sink_ready -> id_router_015:src_ready
	wire          addr_router_src_endofpacket;                                                                        // addr_router:src_endofpacket -> limiter:cmd_sink_endofpacket
	wire          addr_router_src_valid;                                                                              // addr_router:src_valid -> limiter:cmd_sink_valid
	wire          addr_router_src_startofpacket;                                                                      // addr_router:src_startofpacket -> limiter:cmd_sink_startofpacket
	wire  [117:0] addr_router_src_data;                                                                               // addr_router:src_data -> limiter:cmd_sink_data
	wire   [15:0] addr_router_src_channel;                                                                            // addr_router:src_channel -> limiter:cmd_sink_channel
	wire          addr_router_src_ready;                                                                              // limiter:cmd_sink_ready -> addr_router:src_ready
	wire          limiter_cmd_src_endofpacket;                                                                        // limiter:cmd_src_endofpacket -> cmd_xbar_demux:sink_endofpacket
	wire          limiter_cmd_src_startofpacket;                                                                      // limiter:cmd_src_startofpacket -> cmd_xbar_demux:sink_startofpacket
	wire  [117:0] limiter_cmd_src_data;                                                                               // limiter:cmd_src_data -> cmd_xbar_demux:sink_data
	wire   [15:0] limiter_cmd_src_channel;                                                                            // limiter:cmd_src_channel -> cmd_xbar_demux:sink_channel
	wire          limiter_cmd_src_ready;                                                                              // cmd_xbar_demux:sink_ready -> limiter:cmd_src_ready
	wire          rsp_xbar_mux_src_endofpacket;                                                                       // rsp_xbar_mux:src_endofpacket -> limiter:rsp_sink_endofpacket
	wire          rsp_xbar_mux_src_valid;                                                                             // rsp_xbar_mux:src_valid -> limiter:rsp_sink_valid
	wire          rsp_xbar_mux_src_startofpacket;                                                                     // rsp_xbar_mux:src_startofpacket -> limiter:rsp_sink_startofpacket
	wire  [117:0] rsp_xbar_mux_src_data;                                                                              // rsp_xbar_mux:src_data -> limiter:rsp_sink_data
	wire   [15:0] rsp_xbar_mux_src_channel;                                                                           // rsp_xbar_mux:src_channel -> limiter:rsp_sink_channel
	wire          rsp_xbar_mux_src_ready;                                                                             // limiter:rsp_sink_ready -> rsp_xbar_mux:src_ready
	wire          limiter_rsp_src_endofpacket;                                                                        // limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          limiter_rsp_src_valid;                                                                              // limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:write_rp_valid
	wire          limiter_rsp_src_startofpacket;                                                                      // limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire  [117:0] limiter_rsp_src_data;                                                                               // limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:write_rp_data
	wire   [15:0] limiter_rsp_src_channel;                                                                            // limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:write_rp_channel
	wire          limiter_rsp_src_ready;                                                                              // hps_0_h2f_lw_axi_master_agent:write_rp_ready -> limiter:rsp_src_ready
	wire          addr_router_001_src_endofpacket;                                                                    // addr_router_001:src_endofpacket -> limiter_001:cmd_sink_endofpacket
	wire          addr_router_001_src_valid;                                                                          // addr_router_001:src_valid -> limiter_001:cmd_sink_valid
	wire          addr_router_001_src_startofpacket;                                                                  // addr_router_001:src_startofpacket -> limiter_001:cmd_sink_startofpacket
	wire  [117:0] addr_router_001_src_data;                                                                           // addr_router_001:src_data -> limiter_001:cmd_sink_data
	wire   [15:0] addr_router_001_src_channel;                                                                        // addr_router_001:src_channel -> limiter_001:cmd_sink_channel
	wire          addr_router_001_src_ready;                                                                          // limiter_001:cmd_sink_ready -> addr_router_001:src_ready
	wire          limiter_001_cmd_src_endofpacket;                                                                    // limiter_001:cmd_src_endofpacket -> cmd_xbar_demux_001:sink_endofpacket
	wire          limiter_001_cmd_src_startofpacket;                                                                  // limiter_001:cmd_src_startofpacket -> cmd_xbar_demux_001:sink_startofpacket
	wire  [117:0] limiter_001_cmd_src_data;                                                                           // limiter_001:cmd_src_data -> cmd_xbar_demux_001:sink_data
	wire   [15:0] limiter_001_cmd_src_channel;                                                                        // limiter_001:cmd_src_channel -> cmd_xbar_demux_001:sink_channel
	wire          limiter_001_cmd_src_ready;                                                                          // cmd_xbar_demux_001:sink_ready -> limiter_001:cmd_src_ready
	wire          rsp_xbar_mux_001_src_endofpacket;                                                                   // rsp_xbar_mux_001:src_endofpacket -> limiter_001:rsp_sink_endofpacket
	wire          rsp_xbar_mux_001_src_valid;                                                                         // rsp_xbar_mux_001:src_valid -> limiter_001:rsp_sink_valid
	wire          rsp_xbar_mux_001_src_startofpacket;                                                                 // rsp_xbar_mux_001:src_startofpacket -> limiter_001:rsp_sink_startofpacket
	wire  [117:0] rsp_xbar_mux_001_src_data;                                                                          // rsp_xbar_mux_001:src_data -> limiter_001:rsp_sink_data
	wire   [15:0] rsp_xbar_mux_001_src_channel;                                                                       // rsp_xbar_mux_001:src_channel -> limiter_001:rsp_sink_channel
	wire          rsp_xbar_mux_001_src_ready;                                                                         // limiter_001:rsp_sink_ready -> rsp_xbar_mux_001:src_ready
	wire          limiter_001_rsp_src_endofpacket;                                                                    // limiter_001:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          limiter_001_rsp_src_valid;                                                                          // limiter_001:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:read_rp_valid
	wire          limiter_001_rsp_src_startofpacket;                                                                  // limiter_001:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire  [117:0] limiter_001_rsp_src_data;                                                                           // limiter_001:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:read_rp_data
	wire   [15:0] limiter_001_rsp_src_channel;                                                                        // limiter_001:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:read_rp_channel
	wire          limiter_001_rsp_src_ready;                                                                          // hps_0_h2f_lw_axi_master_agent:read_rp_ready -> limiter_001:rsp_src_ready
	wire          cmd_xbar_mux_src_endofpacket;                                                                       // cmd_xbar_mux:src_endofpacket -> burst_adapter:sink0_endofpacket
	wire          cmd_xbar_mux_src_valid;                                                                             // cmd_xbar_mux:src_valid -> burst_adapter:sink0_valid
	wire          cmd_xbar_mux_src_startofpacket;                                                                     // cmd_xbar_mux:src_startofpacket -> burst_adapter:sink0_startofpacket
	wire  [117:0] cmd_xbar_mux_src_data;                                                                              // cmd_xbar_mux:src_data -> burst_adapter:sink0_data
	wire   [15:0] cmd_xbar_mux_src_channel;                                                                           // cmd_xbar_mux:src_channel -> burst_adapter:sink0_channel
	wire          cmd_xbar_mux_src_ready;                                                                             // burst_adapter:sink0_ready -> cmd_xbar_mux:src_ready
	wire          burst_adapter_source0_endofpacket;                                                                  // burst_adapter:source0_endofpacket -> start_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_source0_valid;                                                                        // burst_adapter:source0_valid -> start_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_source0_startofpacket;                                                                // burst_adapter:source0_startofpacket -> start_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] burst_adapter_source0_data;                                                                         // burst_adapter:source0_data -> start_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_source0_ready;                                                                        // start_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter:source0_ready
	wire   [15:0] burst_adapter_source0_channel;                                                                      // burst_adapter:source0_channel -> start_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_001_src_endofpacket;                                                                   // cmd_xbar_mux_001:src_endofpacket -> burst_adapter_001:sink0_endofpacket
	wire          cmd_xbar_mux_001_src_valid;                                                                         // cmd_xbar_mux_001:src_valid -> burst_adapter_001:sink0_valid
	wire          cmd_xbar_mux_001_src_startofpacket;                                                                 // cmd_xbar_mux_001:src_startofpacket -> burst_adapter_001:sink0_startofpacket
	wire  [117:0] cmd_xbar_mux_001_src_data;                                                                          // cmd_xbar_mux_001:src_data -> burst_adapter_001:sink0_data
	wire   [15:0] cmd_xbar_mux_001_src_channel;                                                                       // cmd_xbar_mux_001:src_channel -> burst_adapter_001:sink0_channel
	wire          cmd_xbar_mux_001_src_ready;                                                                         // burst_adapter_001:sink0_ready -> cmd_xbar_mux_001:src_ready
	wire          burst_adapter_001_source0_endofpacket;                                                              // burst_adapter_001:source0_endofpacket -> jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_001_source0_valid;                                                                    // burst_adapter_001:source0_valid -> jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_001_source0_startofpacket;                                                            // burst_adapter_001:source0_startofpacket -> jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] burst_adapter_001_source0_data;                                                                     // burst_adapter_001:source0_data -> jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_001_source0_ready;                                                                    // jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_001:source0_ready
	wire   [15:0] burst_adapter_001_source0_channel;                                                                  // burst_adapter_001:source0_channel -> jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_002_src_endofpacket;                                                                   // cmd_xbar_mux_002:src_endofpacket -> burst_adapter_002:sink0_endofpacket
	wire          cmd_xbar_mux_002_src_valid;                                                                         // cmd_xbar_mux_002:src_valid -> burst_adapter_002:sink0_valid
	wire          cmd_xbar_mux_002_src_startofpacket;                                                                 // cmd_xbar_mux_002:src_startofpacket -> burst_adapter_002:sink0_startofpacket
	wire  [117:0] cmd_xbar_mux_002_src_data;                                                                          // cmd_xbar_mux_002:src_data -> burst_adapter_002:sink0_data
	wire   [15:0] cmd_xbar_mux_002_src_channel;                                                                       // cmd_xbar_mux_002:src_channel -> burst_adapter_002:sink0_channel
	wire          cmd_xbar_mux_002_src_ready;                                                                         // burst_adapter_002:sink0_ready -> cmd_xbar_mux_002:src_ready
	wire          burst_adapter_002_source0_endofpacket;                                                              // burst_adapter_002:source0_endofpacket -> RowData_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_002_source0_valid;                                                                    // burst_adapter_002:source0_valid -> RowData_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_002_source0_startofpacket;                                                            // burst_adapter_002:source0_startofpacket -> RowData_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] burst_adapter_002_source0_data;                                                                     // burst_adapter_002:source0_data -> RowData_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_002_source0_ready;                                                                    // RowData_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_002:source0_ready
	wire   [15:0] burst_adapter_002_source0_channel;                                                                  // burst_adapter_002:source0_channel -> RowData_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_003_src_endofpacket;                                                                   // cmd_xbar_mux_003:src_endofpacket -> burst_adapter_003:sink0_endofpacket
	wire          cmd_xbar_mux_003_src_valid;                                                                         // cmd_xbar_mux_003:src_valid -> burst_adapter_003:sink0_valid
	wire          cmd_xbar_mux_003_src_startofpacket;                                                                 // cmd_xbar_mux_003:src_startofpacket -> burst_adapter_003:sink0_startofpacket
	wire  [117:0] cmd_xbar_mux_003_src_data;                                                                          // cmd_xbar_mux_003:src_data -> burst_adapter_003:sink0_data
	wire   [15:0] cmd_xbar_mux_003_src_channel;                                                                       // cmd_xbar_mux_003:src_channel -> burst_adapter_003:sink0_channel
	wire          cmd_xbar_mux_003_src_ready;                                                                         // burst_adapter_003:sink0_ready -> cmd_xbar_mux_003:src_ready
	wire          burst_adapter_003_source0_endofpacket;                                                              // burst_adapter_003:source0_endofpacket -> Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_003_source0_valid;                                                                    // burst_adapter_003:source0_valid -> Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_003_source0_startofpacket;                                                            // burst_adapter_003:source0_startofpacket -> Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] burst_adapter_003_source0_data;                                                                     // burst_adapter_003:source0_data -> Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_003_source0_ready;                                                                    // Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_003:source0_ready
	wire   [15:0] burst_adapter_003_source0_channel;                                                                  // burst_adapter_003:source0_channel -> Verilog_ACK_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_004_src_endofpacket;                                                                   // cmd_xbar_mux_004:src_endofpacket -> burst_adapter_004:sink0_endofpacket
	wire          cmd_xbar_mux_004_src_valid;                                                                         // cmd_xbar_mux_004:src_valid -> burst_adapter_004:sink0_valid
	wire          cmd_xbar_mux_004_src_startofpacket;                                                                 // cmd_xbar_mux_004:src_startofpacket -> burst_adapter_004:sink0_startofpacket
	wire  [117:0] cmd_xbar_mux_004_src_data;                                                                          // cmd_xbar_mux_004:src_data -> burst_adapter_004:sink0_data
	wire   [15:0] cmd_xbar_mux_004_src_channel;                                                                       // cmd_xbar_mux_004:src_channel -> burst_adapter_004:sink0_channel
	wire          cmd_xbar_mux_004_src_ready;                                                                         // burst_adapter_004:sink0_ready -> cmd_xbar_mux_004:src_ready
	wire          burst_adapter_004_source0_endofpacket;                                                              // burst_adapter_004:source0_endofpacket -> ImageData_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_004_source0_valid;                                                                    // burst_adapter_004:source0_valid -> ImageData_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_004_source0_startofpacket;                                                            // burst_adapter_004:source0_startofpacket -> ImageData_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] burst_adapter_004_source0_data;                                                                     // burst_adapter_004:source0_data -> ImageData_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_004_source0_ready;                                                                    // ImageData_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_004:source0_ready
	wire   [15:0] burst_adapter_004_source0_channel;                                                                  // burst_adapter_004:source0_channel -> ImageData_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_005_src_endofpacket;                                                                   // cmd_xbar_mux_005:src_endofpacket -> burst_adapter_005:sink0_endofpacket
	wire          cmd_xbar_mux_005_src_valid;                                                                         // cmd_xbar_mux_005:src_valid -> burst_adapter_005:sink0_valid
	wire          cmd_xbar_mux_005_src_startofpacket;                                                                 // cmd_xbar_mux_005:src_startofpacket -> burst_adapter_005:sink0_startofpacket
	wire  [117:0] cmd_xbar_mux_005_src_data;                                                                          // cmd_xbar_mux_005:src_data -> burst_adapter_005:sink0_data
	wire   [15:0] cmd_xbar_mux_005_src_channel;                                                                       // cmd_xbar_mux_005:src_channel -> burst_adapter_005:sink0_channel
	wire          cmd_xbar_mux_005_src_ready;                                                                         // burst_adapter_005:sink0_ready -> cmd_xbar_mux_005:src_ready
	wire          burst_adapter_005_source0_endofpacket;                                                              // burst_adapter_005:source0_endofpacket -> HPS_toMem_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_005_source0_valid;                                                                    // burst_adapter_005:source0_valid -> HPS_toMem_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_005_source0_startofpacket;                                                            // burst_adapter_005:source0_startofpacket -> HPS_toMem_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] burst_adapter_005_source0_data;                                                                     // burst_adapter_005:source0_data -> HPS_toMem_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_005_source0_ready;                                                                    // HPS_toMem_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_005:source0_ready
	wire   [15:0] burst_adapter_005_source0_channel;                                                                  // burst_adapter_005:source0_channel -> HPS_toMem_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_006_src_endofpacket;                                                                   // cmd_xbar_mux_006:src_endofpacket -> burst_adapter_006:sink0_endofpacket
	wire          cmd_xbar_mux_006_src_valid;                                                                         // cmd_xbar_mux_006:src_valid -> burst_adapter_006:sink0_valid
	wire          cmd_xbar_mux_006_src_startofpacket;                                                                 // cmd_xbar_mux_006:src_startofpacket -> burst_adapter_006:sink0_startofpacket
	wire  [117:0] cmd_xbar_mux_006_src_data;                                                                          // cmd_xbar_mux_006:src_data -> burst_adapter_006:sink0_data
	wire   [15:0] cmd_xbar_mux_006_src_channel;                                                                       // cmd_xbar_mux_006:src_channel -> burst_adapter_006:sink0_channel
	wire          cmd_xbar_mux_006_src_ready;                                                                         // burst_adapter_006:sink0_ready -> cmd_xbar_mux_006:src_ready
	wire          burst_adapter_006_source0_endofpacket;                                                              // burst_adapter_006:source0_endofpacket -> HPS_Digits_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_006_source0_valid;                                                                    // burst_adapter_006:source0_valid -> HPS_Digits_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_006_source0_startofpacket;                                                            // burst_adapter_006:source0_startofpacket -> HPS_Digits_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] burst_adapter_006_source0_data;                                                                     // burst_adapter_006:source0_data -> HPS_Digits_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_006_source0_ready;                                                                    // HPS_Digits_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_006:source0_ready
	wire   [15:0] burst_adapter_006_source0_channel;                                                                  // burst_adapter_006:source0_channel -> HPS_Digits_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_007_src_endofpacket;                                                                   // cmd_xbar_mux_007:src_endofpacket -> burst_adapter_007:sink0_endofpacket
	wire          cmd_xbar_mux_007_src_valid;                                                                         // cmd_xbar_mux_007:src_valid -> burst_adapter_007:sink0_valid
	wire          cmd_xbar_mux_007_src_startofpacket;                                                                 // cmd_xbar_mux_007:src_startofpacket -> burst_adapter_007:sink0_startofpacket
	wire  [117:0] cmd_xbar_mux_007_src_data;                                                                          // cmd_xbar_mux_007:src_data -> burst_adapter_007:sink0_data
	wire   [15:0] cmd_xbar_mux_007_src_channel;                                                                       // cmd_xbar_mux_007:src_channel -> burst_adapter_007:sink0_channel
	wire          cmd_xbar_mux_007_src_ready;                                                                         // burst_adapter_007:sink0_ready -> cmd_xbar_mux_007:src_ready
	wire          burst_adapter_007_source0_endofpacket;                                                              // burst_adapter_007:source0_endofpacket -> HPS_State_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_007_source0_valid;                                                                    // burst_adapter_007:source0_valid -> HPS_State_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_007_source0_startofpacket;                                                            // burst_adapter_007:source0_startofpacket -> HPS_State_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] burst_adapter_007_source0_data;                                                                     // burst_adapter_007:source0_data -> HPS_State_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_007_source0_ready;                                                                    // HPS_State_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_007:source0_ready
	wire   [15:0] burst_adapter_007_source0_channel;                                                                  // burst_adapter_007:source0_channel -> HPS_State_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_008_src_endofpacket;                                                                   // cmd_xbar_mux_008:src_endofpacket -> burst_adapter_008:sink0_endofpacket
	wire          cmd_xbar_mux_008_src_valid;                                                                         // cmd_xbar_mux_008:src_valid -> burst_adapter_008:sink0_valid
	wire          cmd_xbar_mux_008_src_startofpacket;                                                                 // cmd_xbar_mux_008:src_startofpacket -> burst_adapter_008:sink0_startofpacket
	wire  [117:0] cmd_xbar_mux_008_src_data;                                                                          // cmd_xbar_mux_008:src_data -> burst_adapter_008:sink0_data
	wire   [15:0] cmd_xbar_mux_008_src_channel;                                                                       // cmd_xbar_mux_008:src_channel -> burst_adapter_008:sink0_channel
	wire          cmd_xbar_mux_008_src_ready;                                                                         // burst_adapter_008:sink0_ready -> cmd_xbar_mux_008:src_ready
	wire          burst_adapter_008_source0_endofpacket;                                                              // burst_adapter_008:source0_endofpacket -> HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_008_source0_valid;                                                                    // burst_adapter_008:source0_valid -> HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_008_source0_startofpacket;                                                            // burst_adapter_008:source0_startofpacket -> HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] burst_adapter_008_source0_data;                                                                     // burst_adapter_008:source0_data -> HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_008_source0_ready;                                                                    // HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_008:source0_ready
	wire   [15:0] burst_adapter_008_source0_channel;                                                                  // burst_adapter_008:source0_channel -> HPS_fromMem_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_009_src_endofpacket;                                                                   // cmd_xbar_mux_009:src_endofpacket -> burst_adapter_009:sink0_endofpacket
	wire          cmd_xbar_mux_009_src_valid;                                                                         // cmd_xbar_mux_009:src_valid -> burst_adapter_009:sink0_valid
	wire          cmd_xbar_mux_009_src_startofpacket;                                                                 // cmd_xbar_mux_009:src_startofpacket -> burst_adapter_009:sink0_startofpacket
	wire  [117:0] cmd_xbar_mux_009_src_data;                                                                          // cmd_xbar_mux_009:src_data -> burst_adapter_009:sink0_data
	wire   [15:0] cmd_xbar_mux_009_src_channel;                                                                       // cmd_xbar_mux_009:src_channel -> burst_adapter_009:sink0_channel
	wire          cmd_xbar_mux_009_src_ready;                                                                         // burst_adapter_009:sink0_ready -> cmd_xbar_mux_009:src_ready
	wire          burst_adapter_009_source0_endofpacket;                                                              // burst_adapter_009:source0_endofpacket -> HPS_CLK_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_009_source0_valid;                                                                    // burst_adapter_009:source0_valid -> HPS_CLK_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_009_source0_startofpacket;                                                            // burst_adapter_009:source0_startofpacket -> HPS_CLK_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] burst_adapter_009_source0_data;                                                                     // burst_adapter_009:source0_data -> HPS_CLK_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_009_source0_ready;                                                                    // HPS_CLK_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_009:source0_ready
	wire   [15:0] burst_adapter_009_source0_channel;                                                                  // burst_adapter_009:source0_channel -> HPS_CLK_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_010_src_endofpacket;                                                                   // cmd_xbar_mux_010:src_endofpacket -> burst_adapter_010:sink0_endofpacket
	wire          cmd_xbar_mux_010_src_valid;                                                                         // cmd_xbar_mux_010:src_valid -> burst_adapter_010:sink0_valid
	wire          cmd_xbar_mux_010_src_startofpacket;                                                                 // cmd_xbar_mux_010:src_startofpacket -> burst_adapter_010:sink0_startofpacket
	wire  [117:0] cmd_xbar_mux_010_src_data;                                                                          // cmd_xbar_mux_010:src_data -> burst_adapter_010:sink0_data
	wire   [15:0] cmd_xbar_mux_010_src_channel;                                                                       // cmd_xbar_mux_010:src_channel -> burst_adapter_010:sink0_channel
	wire          cmd_xbar_mux_010_src_ready;                                                                         // burst_adapter_010:sink0_ready -> cmd_xbar_mux_010:src_ready
	wire          burst_adapter_010_source0_endofpacket;                                                              // burst_adapter_010:source0_endofpacket -> ColData_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_010_source0_valid;                                                                    // burst_adapter_010:source0_valid -> ColData_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_010_source0_startofpacket;                                                            // burst_adapter_010:source0_startofpacket -> ColData_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] burst_adapter_010_source0_data;                                                                     // burst_adapter_010:source0_data -> ColData_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_010_source0_ready;                                                                    // ColData_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_010:source0_ready
	wire   [15:0] burst_adapter_010_source0_channel;                                                                  // burst_adapter_010:source0_channel -> ColData_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_011_src_endofpacket;                                                                   // cmd_xbar_mux_011:src_endofpacket -> burst_adapter_011:sink0_endofpacket
	wire          cmd_xbar_mux_011_src_valid;                                                                         // cmd_xbar_mux_011:src_valid -> burst_adapter_011:sink0_valid
	wire          cmd_xbar_mux_011_src_startofpacket;                                                                 // cmd_xbar_mux_011:src_startofpacket -> burst_adapter_011:sink0_startofpacket
	wire  [117:0] cmd_xbar_mux_011_src_data;                                                                          // cmd_xbar_mux_011:src_data -> burst_adapter_011:sink0_data
	wire   [15:0] cmd_xbar_mux_011_src_channel;                                                                       // cmd_xbar_mux_011:src_channel -> burst_adapter_011:sink0_channel
	wire          cmd_xbar_mux_011_src_ready;                                                                         // burst_adapter_011:sink0_ready -> cmd_xbar_mux_011:src_ready
	wire          burst_adapter_011_source0_endofpacket;                                                              // burst_adapter_011:source0_endofpacket -> ReadWrite_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_011_source0_valid;                                                                    // burst_adapter_011:source0_valid -> ReadWrite_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_011_source0_startofpacket;                                                            // burst_adapter_011:source0_startofpacket -> ReadWrite_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] burst_adapter_011_source0_data;                                                                     // burst_adapter_011:source0_data -> ReadWrite_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_011_source0_ready;                                                                    // ReadWrite_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_011:source0_ready
	wire   [15:0] burst_adapter_011_source0_channel;                                                                  // burst_adapter_011:source0_channel -> ReadWrite_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_012_src_endofpacket;                                                                   // cmd_xbar_mux_012:src_endofpacket -> burst_adapter_012:sink0_endofpacket
	wire          cmd_xbar_mux_012_src_valid;                                                                         // cmd_xbar_mux_012:src_valid -> burst_adapter_012:sink0_valid
	wire          cmd_xbar_mux_012_src_startofpacket;                                                                 // cmd_xbar_mux_012:src_startofpacket -> burst_adapter_012:sink0_startofpacket
	wire  [117:0] cmd_xbar_mux_012_src_data;                                                                          // cmd_xbar_mux_012:src_data -> burst_adapter_012:sink0_data
	wire   [15:0] cmd_xbar_mux_012_src_channel;                                                                       // cmd_xbar_mux_012:src_channel -> burst_adapter_012:sink0_channel
	wire          cmd_xbar_mux_012_src_ready;                                                                         // burst_adapter_012:sink0_ready -> cmd_xbar_mux_012:src_ready
	wire          burst_adapter_012_source0_endofpacket;                                                              // burst_adapter_012:source0_endofpacket -> RowAddr_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_012_source0_valid;                                                                    // burst_adapter_012:source0_valid -> RowAddr_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_012_source0_startofpacket;                                                            // burst_adapter_012:source0_startofpacket -> RowAddr_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] burst_adapter_012_source0_data;                                                                     // burst_adapter_012:source0_data -> RowAddr_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_012_source0_ready;                                                                    // RowAddr_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_012:source0_ready
	wire   [15:0] burst_adapter_012_source0_channel;                                                                  // burst_adapter_012:source0_channel -> RowAddr_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_013_src_endofpacket;                                                                   // cmd_xbar_mux_013:src_endofpacket -> burst_adapter_013:sink0_endofpacket
	wire          cmd_xbar_mux_013_src_valid;                                                                         // cmd_xbar_mux_013:src_valid -> burst_adapter_013:sink0_valid
	wire          cmd_xbar_mux_013_src_startofpacket;                                                                 // cmd_xbar_mux_013:src_startofpacket -> burst_adapter_013:sink0_startofpacket
	wire  [117:0] cmd_xbar_mux_013_src_data;                                                                          // cmd_xbar_mux_013:src_data -> burst_adapter_013:sink0_data
	wire   [15:0] cmd_xbar_mux_013_src_channel;                                                                       // cmd_xbar_mux_013:src_channel -> burst_adapter_013:sink0_channel
	wire          cmd_xbar_mux_013_src_ready;                                                                         // burst_adapter_013:sink0_ready -> cmd_xbar_mux_013:src_ready
	wire          burst_adapter_013_source0_endofpacket;                                                              // burst_adapter_013:source0_endofpacket -> ColAddr_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_013_source0_valid;                                                                    // burst_adapter_013:source0_valid -> ColAddr_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_013_source0_startofpacket;                                                            // burst_adapter_013:source0_startofpacket -> ColAddr_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] burst_adapter_013_source0_data;                                                                     // burst_adapter_013:source0_data -> ColAddr_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_013_source0_ready;                                                                    // ColAddr_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_013:source0_ready
	wire   [15:0] burst_adapter_013_source0_channel;                                                                  // burst_adapter_013:source0_channel -> ColAddr_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_014_src_endofpacket;                                                                   // cmd_xbar_mux_014:src_endofpacket -> burst_adapter_014:sink0_endofpacket
	wire          cmd_xbar_mux_014_src_valid;                                                                         // cmd_xbar_mux_014:src_valid -> burst_adapter_014:sink0_valid
	wire          cmd_xbar_mux_014_src_startofpacket;                                                                 // cmd_xbar_mux_014:src_startofpacket -> burst_adapter_014:sink0_startofpacket
	wire  [117:0] cmd_xbar_mux_014_src_data;                                                                          // cmd_xbar_mux_014:src_data -> burst_adapter_014:sink0_data
	wire   [15:0] cmd_xbar_mux_014_src_channel;                                                                       // cmd_xbar_mux_014:src_channel -> burst_adapter_014:sink0_channel
	wire          cmd_xbar_mux_014_src_ready;                                                                         // burst_adapter_014:sink0_ready -> cmd_xbar_mux_014:src_ready
	wire          burst_adapter_014_source0_endofpacket;                                                              // burst_adapter_014:source0_endofpacket -> Row_Read_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_014_source0_valid;                                                                    // burst_adapter_014:source0_valid -> Row_Read_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_014_source0_startofpacket;                                                            // burst_adapter_014:source0_startofpacket -> Row_Read_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] burst_adapter_014_source0_data;                                                                     // burst_adapter_014:source0_data -> Row_Read_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_014_source0_ready;                                                                    // Row_Read_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_014:source0_ready
	wire   [15:0] burst_adapter_014_source0_channel;                                                                  // burst_adapter_014:source0_channel -> Row_Read_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_015_src_endofpacket;                                                                   // cmd_xbar_mux_015:src_endofpacket -> burst_adapter_015:sink0_endofpacket
	wire          cmd_xbar_mux_015_src_valid;                                                                         // cmd_xbar_mux_015:src_valid -> burst_adapter_015:sink0_valid
	wire          cmd_xbar_mux_015_src_startofpacket;                                                                 // cmd_xbar_mux_015:src_startofpacket -> burst_adapter_015:sink0_startofpacket
	wire  [117:0] cmd_xbar_mux_015_src_data;                                                                          // cmd_xbar_mux_015:src_data -> burst_adapter_015:sink0_data
	wire   [15:0] cmd_xbar_mux_015_src_channel;                                                                       // cmd_xbar_mux_015:src_channel -> burst_adapter_015:sink0_channel
	wire          cmd_xbar_mux_015_src_ready;                                                                         // burst_adapter_015:sink0_ready -> cmd_xbar_mux_015:src_ready
	wire          burst_adapter_015_source0_endofpacket;                                                              // burst_adapter_015:source0_endofpacket -> Col_Read_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_015_source0_valid;                                                                    // burst_adapter_015:source0_valid -> Col_Read_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_015_source0_startofpacket;                                                            // burst_adapter_015:source0_startofpacket -> Col_Read_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [117:0] burst_adapter_015_source0_data;                                                                     // burst_adapter_015:source0_data -> Col_Read_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_015_source0_ready;                                                                    // Col_Read_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_015:source0_ready
	wire   [15:0] burst_adapter_015_source0_channel;                                                                  // burst_adapter_015:source0_channel -> Col_Read_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_demux_src0_endofpacket;                                                                    // cmd_xbar_demux:src0_endofpacket -> cmd_xbar_mux:sink0_endofpacket
	wire          cmd_xbar_demux_src0_valid;                                                                          // cmd_xbar_demux:src0_valid -> cmd_xbar_mux:sink0_valid
	wire          cmd_xbar_demux_src0_startofpacket;                                                                  // cmd_xbar_demux:src0_startofpacket -> cmd_xbar_mux:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_src0_data;                                                                           // cmd_xbar_demux:src0_data -> cmd_xbar_mux:sink0_data
	wire   [15:0] cmd_xbar_demux_src0_channel;                                                                        // cmd_xbar_demux:src0_channel -> cmd_xbar_mux:sink0_channel
	wire          cmd_xbar_demux_src0_ready;                                                                          // cmd_xbar_mux:sink0_ready -> cmd_xbar_demux:src0_ready
	wire          cmd_xbar_demux_src1_endofpacket;                                                                    // cmd_xbar_demux:src1_endofpacket -> cmd_xbar_mux_001:sink0_endofpacket
	wire          cmd_xbar_demux_src1_valid;                                                                          // cmd_xbar_demux:src1_valid -> cmd_xbar_mux_001:sink0_valid
	wire          cmd_xbar_demux_src1_startofpacket;                                                                  // cmd_xbar_demux:src1_startofpacket -> cmd_xbar_mux_001:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_src1_data;                                                                           // cmd_xbar_demux:src1_data -> cmd_xbar_mux_001:sink0_data
	wire   [15:0] cmd_xbar_demux_src1_channel;                                                                        // cmd_xbar_demux:src1_channel -> cmd_xbar_mux_001:sink0_channel
	wire          cmd_xbar_demux_src1_ready;                                                                          // cmd_xbar_mux_001:sink0_ready -> cmd_xbar_demux:src1_ready
	wire          cmd_xbar_demux_src2_endofpacket;                                                                    // cmd_xbar_demux:src2_endofpacket -> cmd_xbar_mux_002:sink0_endofpacket
	wire          cmd_xbar_demux_src2_valid;                                                                          // cmd_xbar_demux:src2_valid -> cmd_xbar_mux_002:sink0_valid
	wire          cmd_xbar_demux_src2_startofpacket;                                                                  // cmd_xbar_demux:src2_startofpacket -> cmd_xbar_mux_002:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_src2_data;                                                                           // cmd_xbar_demux:src2_data -> cmd_xbar_mux_002:sink0_data
	wire   [15:0] cmd_xbar_demux_src2_channel;                                                                        // cmd_xbar_demux:src2_channel -> cmd_xbar_mux_002:sink0_channel
	wire          cmd_xbar_demux_src2_ready;                                                                          // cmd_xbar_mux_002:sink0_ready -> cmd_xbar_demux:src2_ready
	wire          cmd_xbar_demux_src3_endofpacket;                                                                    // cmd_xbar_demux:src3_endofpacket -> cmd_xbar_mux_003:sink0_endofpacket
	wire          cmd_xbar_demux_src3_valid;                                                                          // cmd_xbar_demux:src3_valid -> cmd_xbar_mux_003:sink0_valid
	wire          cmd_xbar_demux_src3_startofpacket;                                                                  // cmd_xbar_demux:src3_startofpacket -> cmd_xbar_mux_003:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_src3_data;                                                                           // cmd_xbar_demux:src3_data -> cmd_xbar_mux_003:sink0_data
	wire   [15:0] cmd_xbar_demux_src3_channel;                                                                        // cmd_xbar_demux:src3_channel -> cmd_xbar_mux_003:sink0_channel
	wire          cmd_xbar_demux_src3_ready;                                                                          // cmd_xbar_mux_003:sink0_ready -> cmd_xbar_demux:src3_ready
	wire          cmd_xbar_demux_src4_endofpacket;                                                                    // cmd_xbar_demux:src4_endofpacket -> cmd_xbar_mux_004:sink0_endofpacket
	wire          cmd_xbar_demux_src4_valid;                                                                          // cmd_xbar_demux:src4_valid -> cmd_xbar_mux_004:sink0_valid
	wire          cmd_xbar_demux_src4_startofpacket;                                                                  // cmd_xbar_demux:src4_startofpacket -> cmd_xbar_mux_004:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_src4_data;                                                                           // cmd_xbar_demux:src4_data -> cmd_xbar_mux_004:sink0_data
	wire   [15:0] cmd_xbar_demux_src4_channel;                                                                        // cmd_xbar_demux:src4_channel -> cmd_xbar_mux_004:sink0_channel
	wire          cmd_xbar_demux_src4_ready;                                                                          // cmd_xbar_mux_004:sink0_ready -> cmd_xbar_demux:src4_ready
	wire          cmd_xbar_demux_src5_endofpacket;                                                                    // cmd_xbar_demux:src5_endofpacket -> cmd_xbar_mux_005:sink0_endofpacket
	wire          cmd_xbar_demux_src5_valid;                                                                          // cmd_xbar_demux:src5_valid -> cmd_xbar_mux_005:sink0_valid
	wire          cmd_xbar_demux_src5_startofpacket;                                                                  // cmd_xbar_demux:src5_startofpacket -> cmd_xbar_mux_005:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_src5_data;                                                                           // cmd_xbar_demux:src5_data -> cmd_xbar_mux_005:sink0_data
	wire   [15:0] cmd_xbar_demux_src5_channel;                                                                        // cmd_xbar_demux:src5_channel -> cmd_xbar_mux_005:sink0_channel
	wire          cmd_xbar_demux_src5_ready;                                                                          // cmd_xbar_mux_005:sink0_ready -> cmd_xbar_demux:src5_ready
	wire          cmd_xbar_demux_src6_endofpacket;                                                                    // cmd_xbar_demux:src6_endofpacket -> cmd_xbar_mux_006:sink0_endofpacket
	wire          cmd_xbar_demux_src6_valid;                                                                          // cmd_xbar_demux:src6_valid -> cmd_xbar_mux_006:sink0_valid
	wire          cmd_xbar_demux_src6_startofpacket;                                                                  // cmd_xbar_demux:src6_startofpacket -> cmd_xbar_mux_006:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_src6_data;                                                                           // cmd_xbar_demux:src6_data -> cmd_xbar_mux_006:sink0_data
	wire   [15:0] cmd_xbar_demux_src6_channel;                                                                        // cmd_xbar_demux:src6_channel -> cmd_xbar_mux_006:sink0_channel
	wire          cmd_xbar_demux_src6_ready;                                                                          // cmd_xbar_mux_006:sink0_ready -> cmd_xbar_demux:src6_ready
	wire          cmd_xbar_demux_src7_endofpacket;                                                                    // cmd_xbar_demux:src7_endofpacket -> cmd_xbar_mux_007:sink0_endofpacket
	wire          cmd_xbar_demux_src7_valid;                                                                          // cmd_xbar_demux:src7_valid -> cmd_xbar_mux_007:sink0_valid
	wire          cmd_xbar_demux_src7_startofpacket;                                                                  // cmd_xbar_demux:src7_startofpacket -> cmd_xbar_mux_007:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_src7_data;                                                                           // cmd_xbar_demux:src7_data -> cmd_xbar_mux_007:sink0_data
	wire   [15:0] cmd_xbar_demux_src7_channel;                                                                        // cmd_xbar_demux:src7_channel -> cmd_xbar_mux_007:sink0_channel
	wire          cmd_xbar_demux_src7_ready;                                                                          // cmd_xbar_mux_007:sink0_ready -> cmd_xbar_demux:src7_ready
	wire          cmd_xbar_demux_src8_endofpacket;                                                                    // cmd_xbar_demux:src8_endofpacket -> cmd_xbar_mux_008:sink0_endofpacket
	wire          cmd_xbar_demux_src8_valid;                                                                          // cmd_xbar_demux:src8_valid -> cmd_xbar_mux_008:sink0_valid
	wire          cmd_xbar_demux_src8_startofpacket;                                                                  // cmd_xbar_demux:src8_startofpacket -> cmd_xbar_mux_008:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_src8_data;                                                                           // cmd_xbar_demux:src8_data -> cmd_xbar_mux_008:sink0_data
	wire   [15:0] cmd_xbar_demux_src8_channel;                                                                        // cmd_xbar_demux:src8_channel -> cmd_xbar_mux_008:sink0_channel
	wire          cmd_xbar_demux_src8_ready;                                                                          // cmd_xbar_mux_008:sink0_ready -> cmd_xbar_demux:src8_ready
	wire          cmd_xbar_demux_src9_endofpacket;                                                                    // cmd_xbar_demux:src9_endofpacket -> cmd_xbar_mux_009:sink0_endofpacket
	wire          cmd_xbar_demux_src9_valid;                                                                          // cmd_xbar_demux:src9_valid -> cmd_xbar_mux_009:sink0_valid
	wire          cmd_xbar_demux_src9_startofpacket;                                                                  // cmd_xbar_demux:src9_startofpacket -> cmd_xbar_mux_009:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_src9_data;                                                                           // cmd_xbar_demux:src9_data -> cmd_xbar_mux_009:sink0_data
	wire   [15:0] cmd_xbar_demux_src9_channel;                                                                        // cmd_xbar_demux:src9_channel -> cmd_xbar_mux_009:sink0_channel
	wire          cmd_xbar_demux_src9_ready;                                                                          // cmd_xbar_mux_009:sink0_ready -> cmd_xbar_demux:src9_ready
	wire          cmd_xbar_demux_src10_endofpacket;                                                                   // cmd_xbar_demux:src10_endofpacket -> cmd_xbar_mux_010:sink0_endofpacket
	wire          cmd_xbar_demux_src10_valid;                                                                         // cmd_xbar_demux:src10_valid -> cmd_xbar_mux_010:sink0_valid
	wire          cmd_xbar_demux_src10_startofpacket;                                                                 // cmd_xbar_demux:src10_startofpacket -> cmd_xbar_mux_010:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_src10_data;                                                                          // cmd_xbar_demux:src10_data -> cmd_xbar_mux_010:sink0_data
	wire   [15:0] cmd_xbar_demux_src10_channel;                                                                       // cmd_xbar_demux:src10_channel -> cmd_xbar_mux_010:sink0_channel
	wire          cmd_xbar_demux_src10_ready;                                                                         // cmd_xbar_mux_010:sink0_ready -> cmd_xbar_demux:src10_ready
	wire          cmd_xbar_demux_src11_endofpacket;                                                                   // cmd_xbar_demux:src11_endofpacket -> cmd_xbar_mux_011:sink0_endofpacket
	wire          cmd_xbar_demux_src11_valid;                                                                         // cmd_xbar_demux:src11_valid -> cmd_xbar_mux_011:sink0_valid
	wire          cmd_xbar_demux_src11_startofpacket;                                                                 // cmd_xbar_demux:src11_startofpacket -> cmd_xbar_mux_011:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_src11_data;                                                                          // cmd_xbar_demux:src11_data -> cmd_xbar_mux_011:sink0_data
	wire   [15:0] cmd_xbar_demux_src11_channel;                                                                       // cmd_xbar_demux:src11_channel -> cmd_xbar_mux_011:sink0_channel
	wire          cmd_xbar_demux_src11_ready;                                                                         // cmd_xbar_mux_011:sink0_ready -> cmd_xbar_demux:src11_ready
	wire          cmd_xbar_demux_src12_endofpacket;                                                                   // cmd_xbar_demux:src12_endofpacket -> cmd_xbar_mux_012:sink0_endofpacket
	wire          cmd_xbar_demux_src12_valid;                                                                         // cmd_xbar_demux:src12_valid -> cmd_xbar_mux_012:sink0_valid
	wire          cmd_xbar_demux_src12_startofpacket;                                                                 // cmd_xbar_demux:src12_startofpacket -> cmd_xbar_mux_012:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_src12_data;                                                                          // cmd_xbar_demux:src12_data -> cmd_xbar_mux_012:sink0_data
	wire   [15:0] cmd_xbar_demux_src12_channel;                                                                       // cmd_xbar_demux:src12_channel -> cmd_xbar_mux_012:sink0_channel
	wire          cmd_xbar_demux_src12_ready;                                                                         // cmd_xbar_mux_012:sink0_ready -> cmd_xbar_demux:src12_ready
	wire          cmd_xbar_demux_src13_endofpacket;                                                                   // cmd_xbar_demux:src13_endofpacket -> cmd_xbar_mux_013:sink0_endofpacket
	wire          cmd_xbar_demux_src13_valid;                                                                         // cmd_xbar_demux:src13_valid -> cmd_xbar_mux_013:sink0_valid
	wire          cmd_xbar_demux_src13_startofpacket;                                                                 // cmd_xbar_demux:src13_startofpacket -> cmd_xbar_mux_013:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_src13_data;                                                                          // cmd_xbar_demux:src13_data -> cmd_xbar_mux_013:sink0_data
	wire   [15:0] cmd_xbar_demux_src13_channel;                                                                       // cmd_xbar_demux:src13_channel -> cmd_xbar_mux_013:sink0_channel
	wire          cmd_xbar_demux_src13_ready;                                                                         // cmd_xbar_mux_013:sink0_ready -> cmd_xbar_demux:src13_ready
	wire          cmd_xbar_demux_src14_endofpacket;                                                                   // cmd_xbar_demux:src14_endofpacket -> cmd_xbar_mux_014:sink0_endofpacket
	wire          cmd_xbar_demux_src14_valid;                                                                         // cmd_xbar_demux:src14_valid -> cmd_xbar_mux_014:sink0_valid
	wire          cmd_xbar_demux_src14_startofpacket;                                                                 // cmd_xbar_demux:src14_startofpacket -> cmd_xbar_mux_014:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_src14_data;                                                                          // cmd_xbar_demux:src14_data -> cmd_xbar_mux_014:sink0_data
	wire   [15:0] cmd_xbar_demux_src14_channel;                                                                       // cmd_xbar_demux:src14_channel -> cmd_xbar_mux_014:sink0_channel
	wire          cmd_xbar_demux_src14_ready;                                                                         // cmd_xbar_mux_014:sink0_ready -> cmd_xbar_demux:src14_ready
	wire          cmd_xbar_demux_src15_endofpacket;                                                                   // cmd_xbar_demux:src15_endofpacket -> cmd_xbar_mux_015:sink0_endofpacket
	wire          cmd_xbar_demux_src15_valid;                                                                         // cmd_xbar_demux:src15_valid -> cmd_xbar_mux_015:sink0_valid
	wire          cmd_xbar_demux_src15_startofpacket;                                                                 // cmd_xbar_demux:src15_startofpacket -> cmd_xbar_mux_015:sink0_startofpacket
	wire  [117:0] cmd_xbar_demux_src15_data;                                                                          // cmd_xbar_demux:src15_data -> cmd_xbar_mux_015:sink0_data
	wire   [15:0] cmd_xbar_demux_src15_channel;                                                                       // cmd_xbar_demux:src15_channel -> cmd_xbar_mux_015:sink0_channel
	wire          cmd_xbar_demux_src15_ready;                                                                         // cmd_xbar_mux_015:sink0_ready -> cmd_xbar_demux:src15_ready
	wire          cmd_xbar_demux_001_src0_endofpacket;                                                                // cmd_xbar_demux_001:src0_endofpacket -> cmd_xbar_mux:sink1_endofpacket
	wire          cmd_xbar_demux_001_src0_valid;                                                                      // cmd_xbar_demux_001:src0_valid -> cmd_xbar_mux:sink1_valid
	wire          cmd_xbar_demux_001_src0_startofpacket;                                                              // cmd_xbar_demux_001:src0_startofpacket -> cmd_xbar_mux:sink1_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src0_data;                                                                       // cmd_xbar_demux_001:src0_data -> cmd_xbar_mux:sink1_data
	wire   [15:0] cmd_xbar_demux_001_src0_channel;                                                                    // cmd_xbar_demux_001:src0_channel -> cmd_xbar_mux:sink1_channel
	wire          cmd_xbar_demux_001_src0_ready;                                                                      // cmd_xbar_mux:sink1_ready -> cmd_xbar_demux_001:src0_ready
	wire          cmd_xbar_demux_001_src1_endofpacket;                                                                // cmd_xbar_demux_001:src1_endofpacket -> cmd_xbar_mux_001:sink1_endofpacket
	wire          cmd_xbar_demux_001_src1_valid;                                                                      // cmd_xbar_demux_001:src1_valid -> cmd_xbar_mux_001:sink1_valid
	wire          cmd_xbar_demux_001_src1_startofpacket;                                                              // cmd_xbar_demux_001:src1_startofpacket -> cmd_xbar_mux_001:sink1_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src1_data;                                                                       // cmd_xbar_demux_001:src1_data -> cmd_xbar_mux_001:sink1_data
	wire   [15:0] cmd_xbar_demux_001_src1_channel;                                                                    // cmd_xbar_demux_001:src1_channel -> cmd_xbar_mux_001:sink1_channel
	wire          cmd_xbar_demux_001_src1_ready;                                                                      // cmd_xbar_mux_001:sink1_ready -> cmd_xbar_demux_001:src1_ready
	wire          cmd_xbar_demux_001_src2_endofpacket;                                                                // cmd_xbar_demux_001:src2_endofpacket -> cmd_xbar_mux_002:sink1_endofpacket
	wire          cmd_xbar_demux_001_src2_valid;                                                                      // cmd_xbar_demux_001:src2_valid -> cmd_xbar_mux_002:sink1_valid
	wire          cmd_xbar_demux_001_src2_startofpacket;                                                              // cmd_xbar_demux_001:src2_startofpacket -> cmd_xbar_mux_002:sink1_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src2_data;                                                                       // cmd_xbar_demux_001:src2_data -> cmd_xbar_mux_002:sink1_data
	wire   [15:0] cmd_xbar_demux_001_src2_channel;                                                                    // cmd_xbar_demux_001:src2_channel -> cmd_xbar_mux_002:sink1_channel
	wire          cmd_xbar_demux_001_src2_ready;                                                                      // cmd_xbar_mux_002:sink1_ready -> cmd_xbar_demux_001:src2_ready
	wire          cmd_xbar_demux_001_src3_endofpacket;                                                                // cmd_xbar_demux_001:src3_endofpacket -> cmd_xbar_mux_003:sink1_endofpacket
	wire          cmd_xbar_demux_001_src3_valid;                                                                      // cmd_xbar_demux_001:src3_valid -> cmd_xbar_mux_003:sink1_valid
	wire          cmd_xbar_demux_001_src3_startofpacket;                                                              // cmd_xbar_demux_001:src3_startofpacket -> cmd_xbar_mux_003:sink1_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src3_data;                                                                       // cmd_xbar_demux_001:src3_data -> cmd_xbar_mux_003:sink1_data
	wire   [15:0] cmd_xbar_demux_001_src3_channel;                                                                    // cmd_xbar_demux_001:src3_channel -> cmd_xbar_mux_003:sink1_channel
	wire          cmd_xbar_demux_001_src3_ready;                                                                      // cmd_xbar_mux_003:sink1_ready -> cmd_xbar_demux_001:src3_ready
	wire          cmd_xbar_demux_001_src4_endofpacket;                                                                // cmd_xbar_demux_001:src4_endofpacket -> cmd_xbar_mux_004:sink1_endofpacket
	wire          cmd_xbar_demux_001_src4_valid;                                                                      // cmd_xbar_demux_001:src4_valid -> cmd_xbar_mux_004:sink1_valid
	wire          cmd_xbar_demux_001_src4_startofpacket;                                                              // cmd_xbar_demux_001:src4_startofpacket -> cmd_xbar_mux_004:sink1_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src4_data;                                                                       // cmd_xbar_demux_001:src4_data -> cmd_xbar_mux_004:sink1_data
	wire   [15:0] cmd_xbar_demux_001_src4_channel;                                                                    // cmd_xbar_demux_001:src4_channel -> cmd_xbar_mux_004:sink1_channel
	wire          cmd_xbar_demux_001_src4_ready;                                                                      // cmd_xbar_mux_004:sink1_ready -> cmd_xbar_demux_001:src4_ready
	wire          cmd_xbar_demux_001_src5_endofpacket;                                                                // cmd_xbar_demux_001:src5_endofpacket -> cmd_xbar_mux_005:sink1_endofpacket
	wire          cmd_xbar_demux_001_src5_valid;                                                                      // cmd_xbar_demux_001:src5_valid -> cmd_xbar_mux_005:sink1_valid
	wire          cmd_xbar_demux_001_src5_startofpacket;                                                              // cmd_xbar_demux_001:src5_startofpacket -> cmd_xbar_mux_005:sink1_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src5_data;                                                                       // cmd_xbar_demux_001:src5_data -> cmd_xbar_mux_005:sink1_data
	wire   [15:0] cmd_xbar_demux_001_src5_channel;                                                                    // cmd_xbar_demux_001:src5_channel -> cmd_xbar_mux_005:sink1_channel
	wire          cmd_xbar_demux_001_src5_ready;                                                                      // cmd_xbar_mux_005:sink1_ready -> cmd_xbar_demux_001:src5_ready
	wire          cmd_xbar_demux_001_src6_endofpacket;                                                                // cmd_xbar_demux_001:src6_endofpacket -> cmd_xbar_mux_006:sink1_endofpacket
	wire          cmd_xbar_demux_001_src6_valid;                                                                      // cmd_xbar_demux_001:src6_valid -> cmd_xbar_mux_006:sink1_valid
	wire          cmd_xbar_demux_001_src6_startofpacket;                                                              // cmd_xbar_demux_001:src6_startofpacket -> cmd_xbar_mux_006:sink1_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src6_data;                                                                       // cmd_xbar_demux_001:src6_data -> cmd_xbar_mux_006:sink1_data
	wire   [15:0] cmd_xbar_demux_001_src6_channel;                                                                    // cmd_xbar_demux_001:src6_channel -> cmd_xbar_mux_006:sink1_channel
	wire          cmd_xbar_demux_001_src6_ready;                                                                      // cmd_xbar_mux_006:sink1_ready -> cmd_xbar_demux_001:src6_ready
	wire          cmd_xbar_demux_001_src7_endofpacket;                                                                // cmd_xbar_demux_001:src7_endofpacket -> cmd_xbar_mux_007:sink1_endofpacket
	wire          cmd_xbar_demux_001_src7_valid;                                                                      // cmd_xbar_demux_001:src7_valid -> cmd_xbar_mux_007:sink1_valid
	wire          cmd_xbar_demux_001_src7_startofpacket;                                                              // cmd_xbar_demux_001:src7_startofpacket -> cmd_xbar_mux_007:sink1_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src7_data;                                                                       // cmd_xbar_demux_001:src7_data -> cmd_xbar_mux_007:sink1_data
	wire   [15:0] cmd_xbar_demux_001_src7_channel;                                                                    // cmd_xbar_demux_001:src7_channel -> cmd_xbar_mux_007:sink1_channel
	wire          cmd_xbar_demux_001_src7_ready;                                                                      // cmd_xbar_mux_007:sink1_ready -> cmd_xbar_demux_001:src7_ready
	wire          cmd_xbar_demux_001_src8_endofpacket;                                                                // cmd_xbar_demux_001:src8_endofpacket -> cmd_xbar_mux_008:sink1_endofpacket
	wire          cmd_xbar_demux_001_src8_valid;                                                                      // cmd_xbar_demux_001:src8_valid -> cmd_xbar_mux_008:sink1_valid
	wire          cmd_xbar_demux_001_src8_startofpacket;                                                              // cmd_xbar_demux_001:src8_startofpacket -> cmd_xbar_mux_008:sink1_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src8_data;                                                                       // cmd_xbar_demux_001:src8_data -> cmd_xbar_mux_008:sink1_data
	wire   [15:0] cmd_xbar_demux_001_src8_channel;                                                                    // cmd_xbar_demux_001:src8_channel -> cmd_xbar_mux_008:sink1_channel
	wire          cmd_xbar_demux_001_src8_ready;                                                                      // cmd_xbar_mux_008:sink1_ready -> cmd_xbar_demux_001:src8_ready
	wire          cmd_xbar_demux_001_src9_endofpacket;                                                                // cmd_xbar_demux_001:src9_endofpacket -> cmd_xbar_mux_009:sink1_endofpacket
	wire          cmd_xbar_demux_001_src9_valid;                                                                      // cmd_xbar_demux_001:src9_valid -> cmd_xbar_mux_009:sink1_valid
	wire          cmd_xbar_demux_001_src9_startofpacket;                                                              // cmd_xbar_demux_001:src9_startofpacket -> cmd_xbar_mux_009:sink1_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src9_data;                                                                       // cmd_xbar_demux_001:src9_data -> cmd_xbar_mux_009:sink1_data
	wire   [15:0] cmd_xbar_demux_001_src9_channel;                                                                    // cmd_xbar_demux_001:src9_channel -> cmd_xbar_mux_009:sink1_channel
	wire          cmd_xbar_demux_001_src9_ready;                                                                      // cmd_xbar_mux_009:sink1_ready -> cmd_xbar_demux_001:src9_ready
	wire          cmd_xbar_demux_001_src10_endofpacket;                                                               // cmd_xbar_demux_001:src10_endofpacket -> cmd_xbar_mux_010:sink1_endofpacket
	wire          cmd_xbar_demux_001_src10_valid;                                                                     // cmd_xbar_demux_001:src10_valid -> cmd_xbar_mux_010:sink1_valid
	wire          cmd_xbar_demux_001_src10_startofpacket;                                                             // cmd_xbar_demux_001:src10_startofpacket -> cmd_xbar_mux_010:sink1_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src10_data;                                                                      // cmd_xbar_demux_001:src10_data -> cmd_xbar_mux_010:sink1_data
	wire   [15:0] cmd_xbar_demux_001_src10_channel;                                                                   // cmd_xbar_demux_001:src10_channel -> cmd_xbar_mux_010:sink1_channel
	wire          cmd_xbar_demux_001_src10_ready;                                                                     // cmd_xbar_mux_010:sink1_ready -> cmd_xbar_demux_001:src10_ready
	wire          cmd_xbar_demux_001_src11_endofpacket;                                                               // cmd_xbar_demux_001:src11_endofpacket -> cmd_xbar_mux_011:sink1_endofpacket
	wire          cmd_xbar_demux_001_src11_valid;                                                                     // cmd_xbar_demux_001:src11_valid -> cmd_xbar_mux_011:sink1_valid
	wire          cmd_xbar_demux_001_src11_startofpacket;                                                             // cmd_xbar_demux_001:src11_startofpacket -> cmd_xbar_mux_011:sink1_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src11_data;                                                                      // cmd_xbar_demux_001:src11_data -> cmd_xbar_mux_011:sink1_data
	wire   [15:0] cmd_xbar_demux_001_src11_channel;                                                                   // cmd_xbar_demux_001:src11_channel -> cmd_xbar_mux_011:sink1_channel
	wire          cmd_xbar_demux_001_src11_ready;                                                                     // cmd_xbar_mux_011:sink1_ready -> cmd_xbar_demux_001:src11_ready
	wire          cmd_xbar_demux_001_src12_endofpacket;                                                               // cmd_xbar_demux_001:src12_endofpacket -> cmd_xbar_mux_012:sink1_endofpacket
	wire          cmd_xbar_demux_001_src12_valid;                                                                     // cmd_xbar_demux_001:src12_valid -> cmd_xbar_mux_012:sink1_valid
	wire          cmd_xbar_demux_001_src12_startofpacket;                                                             // cmd_xbar_demux_001:src12_startofpacket -> cmd_xbar_mux_012:sink1_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src12_data;                                                                      // cmd_xbar_demux_001:src12_data -> cmd_xbar_mux_012:sink1_data
	wire   [15:0] cmd_xbar_demux_001_src12_channel;                                                                   // cmd_xbar_demux_001:src12_channel -> cmd_xbar_mux_012:sink1_channel
	wire          cmd_xbar_demux_001_src12_ready;                                                                     // cmd_xbar_mux_012:sink1_ready -> cmd_xbar_demux_001:src12_ready
	wire          cmd_xbar_demux_001_src13_endofpacket;                                                               // cmd_xbar_demux_001:src13_endofpacket -> cmd_xbar_mux_013:sink1_endofpacket
	wire          cmd_xbar_demux_001_src13_valid;                                                                     // cmd_xbar_demux_001:src13_valid -> cmd_xbar_mux_013:sink1_valid
	wire          cmd_xbar_demux_001_src13_startofpacket;                                                             // cmd_xbar_demux_001:src13_startofpacket -> cmd_xbar_mux_013:sink1_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src13_data;                                                                      // cmd_xbar_demux_001:src13_data -> cmd_xbar_mux_013:sink1_data
	wire   [15:0] cmd_xbar_demux_001_src13_channel;                                                                   // cmd_xbar_demux_001:src13_channel -> cmd_xbar_mux_013:sink1_channel
	wire          cmd_xbar_demux_001_src13_ready;                                                                     // cmd_xbar_mux_013:sink1_ready -> cmd_xbar_demux_001:src13_ready
	wire          cmd_xbar_demux_001_src14_endofpacket;                                                               // cmd_xbar_demux_001:src14_endofpacket -> cmd_xbar_mux_014:sink1_endofpacket
	wire          cmd_xbar_demux_001_src14_valid;                                                                     // cmd_xbar_demux_001:src14_valid -> cmd_xbar_mux_014:sink1_valid
	wire          cmd_xbar_demux_001_src14_startofpacket;                                                             // cmd_xbar_demux_001:src14_startofpacket -> cmd_xbar_mux_014:sink1_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src14_data;                                                                      // cmd_xbar_demux_001:src14_data -> cmd_xbar_mux_014:sink1_data
	wire   [15:0] cmd_xbar_demux_001_src14_channel;                                                                   // cmd_xbar_demux_001:src14_channel -> cmd_xbar_mux_014:sink1_channel
	wire          cmd_xbar_demux_001_src14_ready;                                                                     // cmd_xbar_mux_014:sink1_ready -> cmd_xbar_demux_001:src14_ready
	wire          cmd_xbar_demux_001_src15_endofpacket;                                                               // cmd_xbar_demux_001:src15_endofpacket -> cmd_xbar_mux_015:sink1_endofpacket
	wire          cmd_xbar_demux_001_src15_valid;                                                                     // cmd_xbar_demux_001:src15_valid -> cmd_xbar_mux_015:sink1_valid
	wire          cmd_xbar_demux_001_src15_startofpacket;                                                             // cmd_xbar_demux_001:src15_startofpacket -> cmd_xbar_mux_015:sink1_startofpacket
	wire  [117:0] cmd_xbar_demux_001_src15_data;                                                                      // cmd_xbar_demux_001:src15_data -> cmd_xbar_mux_015:sink1_data
	wire   [15:0] cmd_xbar_demux_001_src15_channel;                                                                   // cmd_xbar_demux_001:src15_channel -> cmd_xbar_mux_015:sink1_channel
	wire          cmd_xbar_demux_001_src15_ready;                                                                     // cmd_xbar_mux_015:sink1_ready -> cmd_xbar_demux_001:src15_ready
	wire          rsp_xbar_demux_src0_endofpacket;                                                                    // rsp_xbar_demux:src0_endofpacket -> rsp_xbar_mux:sink0_endofpacket
	wire          rsp_xbar_demux_src0_valid;                                                                          // rsp_xbar_demux:src0_valid -> rsp_xbar_mux:sink0_valid
	wire          rsp_xbar_demux_src0_startofpacket;                                                                  // rsp_xbar_demux:src0_startofpacket -> rsp_xbar_mux:sink0_startofpacket
	wire  [117:0] rsp_xbar_demux_src0_data;                                                                           // rsp_xbar_demux:src0_data -> rsp_xbar_mux:sink0_data
	wire   [15:0] rsp_xbar_demux_src0_channel;                                                                        // rsp_xbar_demux:src0_channel -> rsp_xbar_mux:sink0_channel
	wire          rsp_xbar_demux_src0_ready;                                                                          // rsp_xbar_mux:sink0_ready -> rsp_xbar_demux:src0_ready
	wire          rsp_xbar_demux_src1_endofpacket;                                                                    // rsp_xbar_demux:src1_endofpacket -> rsp_xbar_mux_001:sink0_endofpacket
	wire          rsp_xbar_demux_src1_valid;                                                                          // rsp_xbar_demux:src1_valid -> rsp_xbar_mux_001:sink0_valid
	wire          rsp_xbar_demux_src1_startofpacket;                                                                  // rsp_xbar_demux:src1_startofpacket -> rsp_xbar_mux_001:sink0_startofpacket
	wire  [117:0] rsp_xbar_demux_src1_data;                                                                           // rsp_xbar_demux:src1_data -> rsp_xbar_mux_001:sink0_data
	wire   [15:0] rsp_xbar_demux_src1_channel;                                                                        // rsp_xbar_demux:src1_channel -> rsp_xbar_mux_001:sink0_channel
	wire          rsp_xbar_demux_src1_ready;                                                                          // rsp_xbar_mux_001:sink0_ready -> rsp_xbar_demux:src1_ready
	wire          rsp_xbar_demux_001_src0_endofpacket;                                                                // rsp_xbar_demux_001:src0_endofpacket -> rsp_xbar_mux:sink1_endofpacket
	wire          rsp_xbar_demux_001_src0_valid;                                                                      // rsp_xbar_demux_001:src0_valid -> rsp_xbar_mux:sink1_valid
	wire          rsp_xbar_demux_001_src0_startofpacket;                                                              // rsp_xbar_demux_001:src0_startofpacket -> rsp_xbar_mux:sink1_startofpacket
	wire  [117:0] rsp_xbar_demux_001_src0_data;                                                                       // rsp_xbar_demux_001:src0_data -> rsp_xbar_mux:sink1_data
	wire   [15:0] rsp_xbar_demux_001_src0_channel;                                                                    // rsp_xbar_demux_001:src0_channel -> rsp_xbar_mux:sink1_channel
	wire          rsp_xbar_demux_001_src0_ready;                                                                      // rsp_xbar_mux:sink1_ready -> rsp_xbar_demux_001:src0_ready
	wire          rsp_xbar_demux_001_src1_endofpacket;                                                                // rsp_xbar_demux_001:src1_endofpacket -> rsp_xbar_mux_001:sink1_endofpacket
	wire          rsp_xbar_demux_001_src1_valid;                                                                      // rsp_xbar_demux_001:src1_valid -> rsp_xbar_mux_001:sink1_valid
	wire          rsp_xbar_demux_001_src1_startofpacket;                                                              // rsp_xbar_demux_001:src1_startofpacket -> rsp_xbar_mux_001:sink1_startofpacket
	wire  [117:0] rsp_xbar_demux_001_src1_data;                                                                       // rsp_xbar_demux_001:src1_data -> rsp_xbar_mux_001:sink1_data
	wire   [15:0] rsp_xbar_demux_001_src1_channel;                                                                    // rsp_xbar_demux_001:src1_channel -> rsp_xbar_mux_001:sink1_channel
	wire          rsp_xbar_demux_001_src1_ready;                                                                      // rsp_xbar_mux_001:sink1_ready -> rsp_xbar_demux_001:src1_ready
	wire          rsp_xbar_demux_002_src0_endofpacket;                                                                // rsp_xbar_demux_002:src0_endofpacket -> rsp_xbar_mux:sink2_endofpacket
	wire          rsp_xbar_demux_002_src0_valid;                                                                      // rsp_xbar_demux_002:src0_valid -> rsp_xbar_mux:sink2_valid
	wire          rsp_xbar_demux_002_src0_startofpacket;                                                              // rsp_xbar_demux_002:src0_startofpacket -> rsp_xbar_mux:sink2_startofpacket
	wire  [117:0] rsp_xbar_demux_002_src0_data;                                                                       // rsp_xbar_demux_002:src0_data -> rsp_xbar_mux:sink2_data
	wire   [15:0] rsp_xbar_demux_002_src0_channel;                                                                    // rsp_xbar_demux_002:src0_channel -> rsp_xbar_mux:sink2_channel
	wire          rsp_xbar_demux_002_src0_ready;                                                                      // rsp_xbar_mux:sink2_ready -> rsp_xbar_demux_002:src0_ready
	wire          rsp_xbar_demux_002_src1_endofpacket;                                                                // rsp_xbar_demux_002:src1_endofpacket -> rsp_xbar_mux_001:sink2_endofpacket
	wire          rsp_xbar_demux_002_src1_valid;                                                                      // rsp_xbar_demux_002:src1_valid -> rsp_xbar_mux_001:sink2_valid
	wire          rsp_xbar_demux_002_src1_startofpacket;                                                              // rsp_xbar_demux_002:src1_startofpacket -> rsp_xbar_mux_001:sink2_startofpacket
	wire  [117:0] rsp_xbar_demux_002_src1_data;                                                                       // rsp_xbar_demux_002:src1_data -> rsp_xbar_mux_001:sink2_data
	wire   [15:0] rsp_xbar_demux_002_src1_channel;                                                                    // rsp_xbar_demux_002:src1_channel -> rsp_xbar_mux_001:sink2_channel
	wire          rsp_xbar_demux_002_src1_ready;                                                                      // rsp_xbar_mux_001:sink2_ready -> rsp_xbar_demux_002:src1_ready
	wire          rsp_xbar_demux_003_src0_endofpacket;                                                                // rsp_xbar_demux_003:src0_endofpacket -> rsp_xbar_mux:sink3_endofpacket
	wire          rsp_xbar_demux_003_src0_valid;                                                                      // rsp_xbar_demux_003:src0_valid -> rsp_xbar_mux:sink3_valid
	wire          rsp_xbar_demux_003_src0_startofpacket;                                                              // rsp_xbar_demux_003:src0_startofpacket -> rsp_xbar_mux:sink3_startofpacket
	wire  [117:0] rsp_xbar_demux_003_src0_data;                                                                       // rsp_xbar_demux_003:src0_data -> rsp_xbar_mux:sink3_data
	wire   [15:0] rsp_xbar_demux_003_src0_channel;                                                                    // rsp_xbar_demux_003:src0_channel -> rsp_xbar_mux:sink3_channel
	wire          rsp_xbar_demux_003_src0_ready;                                                                      // rsp_xbar_mux:sink3_ready -> rsp_xbar_demux_003:src0_ready
	wire          rsp_xbar_demux_003_src1_endofpacket;                                                                // rsp_xbar_demux_003:src1_endofpacket -> rsp_xbar_mux_001:sink3_endofpacket
	wire          rsp_xbar_demux_003_src1_valid;                                                                      // rsp_xbar_demux_003:src1_valid -> rsp_xbar_mux_001:sink3_valid
	wire          rsp_xbar_demux_003_src1_startofpacket;                                                              // rsp_xbar_demux_003:src1_startofpacket -> rsp_xbar_mux_001:sink3_startofpacket
	wire  [117:0] rsp_xbar_demux_003_src1_data;                                                                       // rsp_xbar_demux_003:src1_data -> rsp_xbar_mux_001:sink3_data
	wire   [15:0] rsp_xbar_demux_003_src1_channel;                                                                    // rsp_xbar_demux_003:src1_channel -> rsp_xbar_mux_001:sink3_channel
	wire          rsp_xbar_demux_003_src1_ready;                                                                      // rsp_xbar_mux_001:sink3_ready -> rsp_xbar_demux_003:src1_ready
	wire          rsp_xbar_demux_004_src0_endofpacket;                                                                // rsp_xbar_demux_004:src0_endofpacket -> rsp_xbar_mux:sink4_endofpacket
	wire          rsp_xbar_demux_004_src0_valid;                                                                      // rsp_xbar_demux_004:src0_valid -> rsp_xbar_mux:sink4_valid
	wire          rsp_xbar_demux_004_src0_startofpacket;                                                              // rsp_xbar_demux_004:src0_startofpacket -> rsp_xbar_mux:sink4_startofpacket
	wire  [117:0] rsp_xbar_demux_004_src0_data;                                                                       // rsp_xbar_demux_004:src0_data -> rsp_xbar_mux:sink4_data
	wire   [15:0] rsp_xbar_demux_004_src0_channel;                                                                    // rsp_xbar_demux_004:src0_channel -> rsp_xbar_mux:sink4_channel
	wire          rsp_xbar_demux_004_src0_ready;                                                                      // rsp_xbar_mux:sink4_ready -> rsp_xbar_demux_004:src0_ready
	wire          rsp_xbar_demux_004_src1_endofpacket;                                                                // rsp_xbar_demux_004:src1_endofpacket -> rsp_xbar_mux_001:sink4_endofpacket
	wire          rsp_xbar_demux_004_src1_valid;                                                                      // rsp_xbar_demux_004:src1_valid -> rsp_xbar_mux_001:sink4_valid
	wire          rsp_xbar_demux_004_src1_startofpacket;                                                              // rsp_xbar_demux_004:src1_startofpacket -> rsp_xbar_mux_001:sink4_startofpacket
	wire  [117:0] rsp_xbar_demux_004_src1_data;                                                                       // rsp_xbar_demux_004:src1_data -> rsp_xbar_mux_001:sink4_data
	wire   [15:0] rsp_xbar_demux_004_src1_channel;                                                                    // rsp_xbar_demux_004:src1_channel -> rsp_xbar_mux_001:sink4_channel
	wire          rsp_xbar_demux_004_src1_ready;                                                                      // rsp_xbar_mux_001:sink4_ready -> rsp_xbar_demux_004:src1_ready
	wire          rsp_xbar_demux_005_src0_endofpacket;                                                                // rsp_xbar_demux_005:src0_endofpacket -> rsp_xbar_mux:sink5_endofpacket
	wire          rsp_xbar_demux_005_src0_valid;                                                                      // rsp_xbar_demux_005:src0_valid -> rsp_xbar_mux:sink5_valid
	wire          rsp_xbar_demux_005_src0_startofpacket;                                                              // rsp_xbar_demux_005:src0_startofpacket -> rsp_xbar_mux:sink5_startofpacket
	wire  [117:0] rsp_xbar_demux_005_src0_data;                                                                       // rsp_xbar_demux_005:src0_data -> rsp_xbar_mux:sink5_data
	wire   [15:0] rsp_xbar_demux_005_src0_channel;                                                                    // rsp_xbar_demux_005:src0_channel -> rsp_xbar_mux:sink5_channel
	wire          rsp_xbar_demux_005_src0_ready;                                                                      // rsp_xbar_mux:sink5_ready -> rsp_xbar_demux_005:src0_ready
	wire          rsp_xbar_demux_005_src1_endofpacket;                                                                // rsp_xbar_demux_005:src1_endofpacket -> rsp_xbar_mux_001:sink5_endofpacket
	wire          rsp_xbar_demux_005_src1_valid;                                                                      // rsp_xbar_demux_005:src1_valid -> rsp_xbar_mux_001:sink5_valid
	wire          rsp_xbar_demux_005_src1_startofpacket;                                                              // rsp_xbar_demux_005:src1_startofpacket -> rsp_xbar_mux_001:sink5_startofpacket
	wire  [117:0] rsp_xbar_demux_005_src1_data;                                                                       // rsp_xbar_demux_005:src1_data -> rsp_xbar_mux_001:sink5_data
	wire   [15:0] rsp_xbar_demux_005_src1_channel;                                                                    // rsp_xbar_demux_005:src1_channel -> rsp_xbar_mux_001:sink5_channel
	wire          rsp_xbar_demux_005_src1_ready;                                                                      // rsp_xbar_mux_001:sink5_ready -> rsp_xbar_demux_005:src1_ready
	wire          rsp_xbar_demux_006_src0_endofpacket;                                                                // rsp_xbar_demux_006:src0_endofpacket -> rsp_xbar_mux:sink6_endofpacket
	wire          rsp_xbar_demux_006_src0_valid;                                                                      // rsp_xbar_demux_006:src0_valid -> rsp_xbar_mux:sink6_valid
	wire          rsp_xbar_demux_006_src0_startofpacket;                                                              // rsp_xbar_demux_006:src0_startofpacket -> rsp_xbar_mux:sink6_startofpacket
	wire  [117:0] rsp_xbar_demux_006_src0_data;                                                                       // rsp_xbar_demux_006:src0_data -> rsp_xbar_mux:sink6_data
	wire   [15:0] rsp_xbar_demux_006_src0_channel;                                                                    // rsp_xbar_demux_006:src0_channel -> rsp_xbar_mux:sink6_channel
	wire          rsp_xbar_demux_006_src0_ready;                                                                      // rsp_xbar_mux:sink6_ready -> rsp_xbar_demux_006:src0_ready
	wire          rsp_xbar_demux_006_src1_endofpacket;                                                                // rsp_xbar_demux_006:src1_endofpacket -> rsp_xbar_mux_001:sink6_endofpacket
	wire          rsp_xbar_demux_006_src1_valid;                                                                      // rsp_xbar_demux_006:src1_valid -> rsp_xbar_mux_001:sink6_valid
	wire          rsp_xbar_demux_006_src1_startofpacket;                                                              // rsp_xbar_demux_006:src1_startofpacket -> rsp_xbar_mux_001:sink6_startofpacket
	wire  [117:0] rsp_xbar_demux_006_src1_data;                                                                       // rsp_xbar_demux_006:src1_data -> rsp_xbar_mux_001:sink6_data
	wire   [15:0] rsp_xbar_demux_006_src1_channel;                                                                    // rsp_xbar_demux_006:src1_channel -> rsp_xbar_mux_001:sink6_channel
	wire          rsp_xbar_demux_006_src1_ready;                                                                      // rsp_xbar_mux_001:sink6_ready -> rsp_xbar_demux_006:src1_ready
	wire          rsp_xbar_demux_007_src0_endofpacket;                                                                // rsp_xbar_demux_007:src0_endofpacket -> rsp_xbar_mux:sink7_endofpacket
	wire          rsp_xbar_demux_007_src0_valid;                                                                      // rsp_xbar_demux_007:src0_valid -> rsp_xbar_mux:sink7_valid
	wire          rsp_xbar_demux_007_src0_startofpacket;                                                              // rsp_xbar_demux_007:src0_startofpacket -> rsp_xbar_mux:sink7_startofpacket
	wire  [117:0] rsp_xbar_demux_007_src0_data;                                                                       // rsp_xbar_demux_007:src0_data -> rsp_xbar_mux:sink7_data
	wire   [15:0] rsp_xbar_demux_007_src0_channel;                                                                    // rsp_xbar_demux_007:src0_channel -> rsp_xbar_mux:sink7_channel
	wire          rsp_xbar_demux_007_src0_ready;                                                                      // rsp_xbar_mux:sink7_ready -> rsp_xbar_demux_007:src0_ready
	wire          rsp_xbar_demux_007_src1_endofpacket;                                                                // rsp_xbar_demux_007:src1_endofpacket -> rsp_xbar_mux_001:sink7_endofpacket
	wire          rsp_xbar_demux_007_src1_valid;                                                                      // rsp_xbar_demux_007:src1_valid -> rsp_xbar_mux_001:sink7_valid
	wire          rsp_xbar_demux_007_src1_startofpacket;                                                              // rsp_xbar_demux_007:src1_startofpacket -> rsp_xbar_mux_001:sink7_startofpacket
	wire  [117:0] rsp_xbar_demux_007_src1_data;                                                                       // rsp_xbar_demux_007:src1_data -> rsp_xbar_mux_001:sink7_data
	wire   [15:0] rsp_xbar_demux_007_src1_channel;                                                                    // rsp_xbar_demux_007:src1_channel -> rsp_xbar_mux_001:sink7_channel
	wire          rsp_xbar_demux_007_src1_ready;                                                                      // rsp_xbar_mux_001:sink7_ready -> rsp_xbar_demux_007:src1_ready
	wire          rsp_xbar_demux_008_src0_endofpacket;                                                                // rsp_xbar_demux_008:src0_endofpacket -> rsp_xbar_mux:sink8_endofpacket
	wire          rsp_xbar_demux_008_src0_valid;                                                                      // rsp_xbar_demux_008:src0_valid -> rsp_xbar_mux:sink8_valid
	wire          rsp_xbar_demux_008_src0_startofpacket;                                                              // rsp_xbar_demux_008:src0_startofpacket -> rsp_xbar_mux:sink8_startofpacket
	wire  [117:0] rsp_xbar_demux_008_src0_data;                                                                       // rsp_xbar_demux_008:src0_data -> rsp_xbar_mux:sink8_data
	wire   [15:0] rsp_xbar_demux_008_src0_channel;                                                                    // rsp_xbar_demux_008:src0_channel -> rsp_xbar_mux:sink8_channel
	wire          rsp_xbar_demux_008_src0_ready;                                                                      // rsp_xbar_mux:sink8_ready -> rsp_xbar_demux_008:src0_ready
	wire          rsp_xbar_demux_008_src1_endofpacket;                                                                // rsp_xbar_demux_008:src1_endofpacket -> rsp_xbar_mux_001:sink8_endofpacket
	wire          rsp_xbar_demux_008_src1_valid;                                                                      // rsp_xbar_demux_008:src1_valid -> rsp_xbar_mux_001:sink8_valid
	wire          rsp_xbar_demux_008_src1_startofpacket;                                                              // rsp_xbar_demux_008:src1_startofpacket -> rsp_xbar_mux_001:sink8_startofpacket
	wire  [117:0] rsp_xbar_demux_008_src1_data;                                                                       // rsp_xbar_demux_008:src1_data -> rsp_xbar_mux_001:sink8_data
	wire   [15:0] rsp_xbar_demux_008_src1_channel;                                                                    // rsp_xbar_demux_008:src1_channel -> rsp_xbar_mux_001:sink8_channel
	wire          rsp_xbar_demux_008_src1_ready;                                                                      // rsp_xbar_mux_001:sink8_ready -> rsp_xbar_demux_008:src1_ready
	wire          rsp_xbar_demux_009_src0_endofpacket;                                                                // rsp_xbar_demux_009:src0_endofpacket -> rsp_xbar_mux:sink9_endofpacket
	wire          rsp_xbar_demux_009_src0_valid;                                                                      // rsp_xbar_demux_009:src0_valid -> rsp_xbar_mux:sink9_valid
	wire          rsp_xbar_demux_009_src0_startofpacket;                                                              // rsp_xbar_demux_009:src0_startofpacket -> rsp_xbar_mux:sink9_startofpacket
	wire  [117:0] rsp_xbar_demux_009_src0_data;                                                                       // rsp_xbar_demux_009:src0_data -> rsp_xbar_mux:sink9_data
	wire   [15:0] rsp_xbar_demux_009_src0_channel;                                                                    // rsp_xbar_demux_009:src0_channel -> rsp_xbar_mux:sink9_channel
	wire          rsp_xbar_demux_009_src0_ready;                                                                      // rsp_xbar_mux:sink9_ready -> rsp_xbar_demux_009:src0_ready
	wire          rsp_xbar_demux_009_src1_endofpacket;                                                                // rsp_xbar_demux_009:src1_endofpacket -> rsp_xbar_mux_001:sink9_endofpacket
	wire          rsp_xbar_demux_009_src1_valid;                                                                      // rsp_xbar_demux_009:src1_valid -> rsp_xbar_mux_001:sink9_valid
	wire          rsp_xbar_demux_009_src1_startofpacket;                                                              // rsp_xbar_demux_009:src1_startofpacket -> rsp_xbar_mux_001:sink9_startofpacket
	wire  [117:0] rsp_xbar_demux_009_src1_data;                                                                       // rsp_xbar_demux_009:src1_data -> rsp_xbar_mux_001:sink9_data
	wire   [15:0] rsp_xbar_demux_009_src1_channel;                                                                    // rsp_xbar_demux_009:src1_channel -> rsp_xbar_mux_001:sink9_channel
	wire          rsp_xbar_demux_009_src1_ready;                                                                      // rsp_xbar_mux_001:sink9_ready -> rsp_xbar_demux_009:src1_ready
	wire          rsp_xbar_demux_010_src0_endofpacket;                                                                // rsp_xbar_demux_010:src0_endofpacket -> rsp_xbar_mux:sink10_endofpacket
	wire          rsp_xbar_demux_010_src0_valid;                                                                      // rsp_xbar_demux_010:src0_valid -> rsp_xbar_mux:sink10_valid
	wire          rsp_xbar_demux_010_src0_startofpacket;                                                              // rsp_xbar_demux_010:src0_startofpacket -> rsp_xbar_mux:sink10_startofpacket
	wire  [117:0] rsp_xbar_demux_010_src0_data;                                                                       // rsp_xbar_demux_010:src0_data -> rsp_xbar_mux:sink10_data
	wire   [15:0] rsp_xbar_demux_010_src0_channel;                                                                    // rsp_xbar_demux_010:src0_channel -> rsp_xbar_mux:sink10_channel
	wire          rsp_xbar_demux_010_src0_ready;                                                                      // rsp_xbar_mux:sink10_ready -> rsp_xbar_demux_010:src0_ready
	wire          rsp_xbar_demux_010_src1_endofpacket;                                                                // rsp_xbar_demux_010:src1_endofpacket -> rsp_xbar_mux_001:sink10_endofpacket
	wire          rsp_xbar_demux_010_src1_valid;                                                                      // rsp_xbar_demux_010:src1_valid -> rsp_xbar_mux_001:sink10_valid
	wire          rsp_xbar_demux_010_src1_startofpacket;                                                              // rsp_xbar_demux_010:src1_startofpacket -> rsp_xbar_mux_001:sink10_startofpacket
	wire  [117:0] rsp_xbar_demux_010_src1_data;                                                                       // rsp_xbar_demux_010:src1_data -> rsp_xbar_mux_001:sink10_data
	wire   [15:0] rsp_xbar_demux_010_src1_channel;                                                                    // rsp_xbar_demux_010:src1_channel -> rsp_xbar_mux_001:sink10_channel
	wire          rsp_xbar_demux_010_src1_ready;                                                                      // rsp_xbar_mux_001:sink10_ready -> rsp_xbar_demux_010:src1_ready
	wire          rsp_xbar_demux_011_src0_endofpacket;                                                                // rsp_xbar_demux_011:src0_endofpacket -> rsp_xbar_mux:sink11_endofpacket
	wire          rsp_xbar_demux_011_src0_valid;                                                                      // rsp_xbar_demux_011:src0_valid -> rsp_xbar_mux:sink11_valid
	wire          rsp_xbar_demux_011_src0_startofpacket;                                                              // rsp_xbar_demux_011:src0_startofpacket -> rsp_xbar_mux:sink11_startofpacket
	wire  [117:0] rsp_xbar_demux_011_src0_data;                                                                       // rsp_xbar_demux_011:src0_data -> rsp_xbar_mux:sink11_data
	wire   [15:0] rsp_xbar_demux_011_src0_channel;                                                                    // rsp_xbar_demux_011:src0_channel -> rsp_xbar_mux:sink11_channel
	wire          rsp_xbar_demux_011_src0_ready;                                                                      // rsp_xbar_mux:sink11_ready -> rsp_xbar_demux_011:src0_ready
	wire          rsp_xbar_demux_011_src1_endofpacket;                                                                // rsp_xbar_demux_011:src1_endofpacket -> rsp_xbar_mux_001:sink11_endofpacket
	wire          rsp_xbar_demux_011_src1_valid;                                                                      // rsp_xbar_demux_011:src1_valid -> rsp_xbar_mux_001:sink11_valid
	wire          rsp_xbar_demux_011_src1_startofpacket;                                                              // rsp_xbar_demux_011:src1_startofpacket -> rsp_xbar_mux_001:sink11_startofpacket
	wire  [117:0] rsp_xbar_demux_011_src1_data;                                                                       // rsp_xbar_demux_011:src1_data -> rsp_xbar_mux_001:sink11_data
	wire   [15:0] rsp_xbar_demux_011_src1_channel;                                                                    // rsp_xbar_demux_011:src1_channel -> rsp_xbar_mux_001:sink11_channel
	wire          rsp_xbar_demux_011_src1_ready;                                                                      // rsp_xbar_mux_001:sink11_ready -> rsp_xbar_demux_011:src1_ready
	wire          rsp_xbar_demux_012_src0_endofpacket;                                                                // rsp_xbar_demux_012:src0_endofpacket -> rsp_xbar_mux:sink12_endofpacket
	wire          rsp_xbar_demux_012_src0_valid;                                                                      // rsp_xbar_demux_012:src0_valid -> rsp_xbar_mux:sink12_valid
	wire          rsp_xbar_demux_012_src0_startofpacket;                                                              // rsp_xbar_demux_012:src0_startofpacket -> rsp_xbar_mux:sink12_startofpacket
	wire  [117:0] rsp_xbar_demux_012_src0_data;                                                                       // rsp_xbar_demux_012:src0_data -> rsp_xbar_mux:sink12_data
	wire   [15:0] rsp_xbar_demux_012_src0_channel;                                                                    // rsp_xbar_demux_012:src0_channel -> rsp_xbar_mux:sink12_channel
	wire          rsp_xbar_demux_012_src0_ready;                                                                      // rsp_xbar_mux:sink12_ready -> rsp_xbar_demux_012:src0_ready
	wire          rsp_xbar_demux_012_src1_endofpacket;                                                                // rsp_xbar_demux_012:src1_endofpacket -> rsp_xbar_mux_001:sink12_endofpacket
	wire          rsp_xbar_demux_012_src1_valid;                                                                      // rsp_xbar_demux_012:src1_valid -> rsp_xbar_mux_001:sink12_valid
	wire          rsp_xbar_demux_012_src1_startofpacket;                                                              // rsp_xbar_demux_012:src1_startofpacket -> rsp_xbar_mux_001:sink12_startofpacket
	wire  [117:0] rsp_xbar_demux_012_src1_data;                                                                       // rsp_xbar_demux_012:src1_data -> rsp_xbar_mux_001:sink12_data
	wire   [15:0] rsp_xbar_demux_012_src1_channel;                                                                    // rsp_xbar_demux_012:src1_channel -> rsp_xbar_mux_001:sink12_channel
	wire          rsp_xbar_demux_012_src1_ready;                                                                      // rsp_xbar_mux_001:sink12_ready -> rsp_xbar_demux_012:src1_ready
	wire          rsp_xbar_demux_013_src0_endofpacket;                                                                // rsp_xbar_demux_013:src0_endofpacket -> rsp_xbar_mux:sink13_endofpacket
	wire          rsp_xbar_demux_013_src0_valid;                                                                      // rsp_xbar_demux_013:src0_valid -> rsp_xbar_mux:sink13_valid
	wire          rsp_xbar_demux_013_src0_startofpacket;                                                              // rsp_xbar_demux_013:src0_startofpacket -> rsp_xbar_mux:sink13_startofpacket
	wire  [117:0] rsp_xbar_demux_013_src0_data;                                                                       // rsp_xbar_demux_013:src0_data -> rsp_xbar_mux:sink13_data
	wire   [15:0] rsp_xbar_demux_013_src0_channel;                                                                    // rsp_xbar_demux_013:src0_channel -> rsp_xbar_mux:sink13_channel
	wire          rsp_xbar_demux_013_src0_ready;                                                                      // rsp_xbar_mux:sink13_ready -> rsp_xbar_demux_013:src0_ready
	wire          rsp_xbar_demux_013_src1_endofpacket;                                                                // rsp_xbar_demux_013:src1_endofpacket -> rsp_xbar_mux_001:sink13_endofpacket
	wire          rsp_xbar_demux_013_src1_valid;                                                                      // rsp_xbar_demux_013:src1_valid -> rsp_xbar_mux_001:sink13_valid
	wire          rsp_xbar_demux_013_src1_startofpacket;                                                              // rsp_xbar_demux_013:src1_startofpacket -> rsp_xbar_mux_001:sink13_startofpacket
	wire  [117:0] rsp_xbar_demux_013_src1_data;                                                                       // rsp_xbar_demux_013:src1_data -> rsp_xbar_mux_001:sink13_data
	wire   [15:0] rsp_xbar_demux_013_src1_channel;                                                                    // rsp_xbar_demux_013:src1_channel -> rsp_xbar_mux_001:sink13_channel
	wire          rsp_xbar_demux_013_src1_ready;                                                                      // rsp_xbar_mux_001:sink13_ready -> rsp_xbar_demux_013:src1_ready
	wire          rsp_xbar_demux_014_src0_endofpacket;                                                                // rsp_xbar_demux_014:src0_endofpacket -> rsp_xbar_mux:sink14_endofpacket
	wire          rsp_xbar_demux_014_src0_valid;                                                                      // rsp_xbar_demux_014:src0_valid -> rsp_xbar_mux:sink14_valid
	wire          rsp_xbar_demux_014_src0_startofpacket;                                                              // rsp_xbar_demux_014:src0_startofpacket -> rsp_xbar_mux:sink14_startofpacket
	wire  [117:0] rsp_xbar_demux_014_src0_data;                                                                       // rsp_xbar_demux_014:src0_data -> rsp_xbar_mux:sink14_data
	wire   [15:0] rsp_xbar_demux_014_src0_channel;                                                                    // rsp_xbar_demux_014:src0_channel -> rsp_xbar_mux:sink14_channel
	wire          rsp_xbar_demux_014_src0_ready;                                                                      // rsp_xbar_mux:sink14_ready -> rsp_xbar_demux_014:src0_ready
	wire          rsp_xbar_demux_014_src1_endofpacket;                                                                // rsp_xbar_demux_014:src1_endofpacket -> rsp_xbar_mux_001:sink14_endofpacket
	wire          rsp_xbar_demux_014_src1_valid;                                                                      // rsp_xbar_demux_014:src1_valid -> rsp_xbar_mux_001:sink14_valid
	wire          rsp_xbar_demux_014_src1_startofpacket;                                                              // rsp_xbar_demux_014:src1_startofpacket -> rsp_xbar_mux_001:sink14_startofpacket
	wire  [117:0] rsp_xbar_demux_014_src1_data;                                                                       // rsp_xbar_demux_014:src1_data -> rsp_xbar_mux_001:sink14_data
	wire   [15:0] rsp_xbar_demux_014_src1_channel;                                                                    // rsp_xbar_demux_014:src1_channel -> rsp_xbar_mux_001:sink14_channel
	wire          rsp_xbar_demux_014_src1_ready;                                                                      // rsp_xbar_mux_001:sink14_ready -> rsp_xbar_demux_014:src1_ready
	wire          rsp_xbar_demux_015_src0_endofpacket;                                                                // rsp_xbar_demux_015:src0_endofpacket -> rsp_xbar_mux:sink15_endofpacket
	wire          rsp_xbar_demux_015_src0_valid;                                                                      // rsp_xbar_demux_015:src0_valid -> rsp_xbar_mux:sink15_valid
	wire          rsp_xbar_demux_015_src0_startofpacket;                                                              // rsp_xbar_demux_015:src0_startofpacket -> rsp_xbar_mux:sink15_startofpacket
	wire  [117:0] rsp_xbar_demux_015_src0_data;                                                                       // rsp_xbar_demux_015:src0_data -> rsp_xbar_mux:sink15_data
	wire   [15:0] rsp_xbar_demux_015_src0_channel;                                                                    // rsp_xbar_demux_015:src0_channel -> rsp_xbar_mux:sink15_channel
	wire          rsp_xbar_demux_015_src0_ready;                                                                      // rsp_xbar_mux:sink15_ready -> rsp_xbar_demux_015:src0_ready
	wire          rsp_xbar_demux_015_src1_endofpacket;                                                                // rsp_xbar_demux_015:src1_endofpacket -> rsp_xbar_mux_001:sink15_endofpacket
	wire          rsp_xbar_demux_015_src1_valid;                                                                      // rsp_xbar_demux_015:src1_valid -> rsp_xbar_mux_001:sink15_valid
	wire          rsp_xbar_demux_015_src1_startofpacket;                                                              // rsp_xbar_demux_015:src1_startofpacket -> rsp_xbar_mux_001:sink15_startofpacket
	wire  [117:0] rsp_xbar_demux_015_src1_data;                                                                       // rsp_xbar_demux_015:src1_data -> rsp_xbar_mux_001:sink15_data
	wire   [15:0] rsp_xbar_demux_015_src1_channel;                                                                    // rsp_xbar_demux_015:src1_channel -> rsp_xbar_mux_001:sink15_channel
	wire          rsp_xbar_demux_015_src1_ready;                                                                      // rsp_xbar_mux_001:sink15_ready -> rsp_xbar_demux_015:src1_ready
	wire   [15:0] limiter_cmd_valid_data;                                                                             // limiter:cmd_src_valid -> cmd_xbar_demux:sink_valid
	wire   [15:0] limiter_001_cmd_valid_data;                                                                         // limiter_001:cmd_src_valid -> cmd_xbar_demux_001:sink_valid

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) start_s1_translator (
		.clk                      (sys_sdram_pll_0_sys_clk_clk),                                         //                      clk.clk
		.reset                    (start_reset_reset_bridge_in_reset_reset),                             //                    reset.reset
		.uav_address              (start_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (start_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (start_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (start_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (start_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (start_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (start_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (start_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (start_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (start_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (start_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (start_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (start_s1_write),                                                      //                         .write
		.av_readdata              (start_s1_readdata),                                                   //                         .readdata
		.av_writedata             (start_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (start_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                    //              (terminated)
		.av_begintransfer         (),                                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                                    //              (terminated)
		.av_burstcount            (),                                                                    //              (terminated)
		.av_byteenable            (),                                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                                //              (terminated)
		.av_writebyteenable       (),                                                                    //              (terminated)
		.av_lock                  (),                                                                    //              (terminated)
		.av_clken                 (),                                                                    //              (terminated)
		.uav_clken                (1'b0),                                                                //              (terminated)
		.av_debugaccess           (),                                                                    //              (terminated)
		.av_outputenable          (),                                                                    //              (terminated)
		.uav_response             (),                                                                    //              (terminated)
		.av_response              (2'b00),                                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                                    //              (terminated)
		.av_writeresponserequest  (),                                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_0_avalon_jtag_slave_translator (
		.clk                      (sys_sdram_pll_0_sys_clk_clk),                                                              //                      clk.clk
		.reset                    (start_reset_reset_bridge_in_reset_reset),                                                  //                    reset.reset
		.uav_address              (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (jtag_uart_0_avalon_jtag_slave_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (jtag_uart_0_avalon_jtag_slave_write),                                                      //                         .write
		.av_read                  (jtag_uart_0_avalon_jtag_slave_read),                                                       //                         .read
		.av_readdata              (jtag_uart_0_avalon_jtag_slave_readdata),                                                   //                         .readdata
		.av_writedata             (jtag_uart_0_avalon_jtag_slave_writedata),                                                  //                         .writedata
		.av_waitrequest           (jtag_uart_0_avalon_jtag_slave_waitrequest),                                                //                         .waitrequest
		.av_chipselect            (jtag_uart_0_avalon_jtag_slave_chipselect),                                                 //                         .chipselect
		.av_begintransfer         (),                                                                                         //              (terminated)
		.av_beginbursttransfer    (),                                                                                         //              (terminated)
		.av_burstcount            (),                                                                                         //              (terminated)
		.av_byteenable            (),                                                                                         //              (terminated)
		.av_readdatavalid         (1'b0),                                                                                     //              (terminated)
		.av_writebyteenable       (),                                                                                         //              (terminated)
		.av_lock                  (),                                                                                         //              (terminated)
		.av_clken                 (),                                                                                         //              (terminated)
		.uav_clken                (1'b0),                                                                                     //              (terminated)
		.av_debugaccess           (),                                                                                         //              (terminated)
		.av_outputenable          (),                                                                                         //              (terminated)
		.uav_response             (),                                                                                         //              (terminated)
		.av_response              (2'b00),                                                                                    //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                                     //              (terminated)
		.uav_writeresponsevalid   (),                                                                                         //              (terminated)
		.av_writeresponserequest  (),                                                                                         //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rowdata_s1_translator (
		.clk                      (sys_sdram_pll_0_sys_clk_clk),                                           //                      clk.clk
		.reset                    (start_reset_reset_bridge_in_reset_reset),                               //                    reset.reset
		.uav_address              (rowdata_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (rowdata_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (rowdata_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (rowdata_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (rowdata_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (rowdata_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (rowdata_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (rowdata_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (rowdata_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (rowdata_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (rowdata_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (RowData_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (RowData_s1_write),                                                      //                         .write
		.av_readdata              (RowData_s1_readdata),                                                   //                         .readdata
		.av_writedata             (RowData_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (RowData_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                      //              (terminated)
		.av_begintransfer         (),                                                                      //              (terminated)
		.av_beginbursttransfer    (),                                                                      //              (terminated)
		.av_burstcount            (),                                                                      //              (terminated)
		.av_byteenable            (),                                                                      //              (terminated)
		.av_readdatavalid         (1'b0),                                                                  //              (terminated)
		.av_waitrequest           (1'b0),                                                                  //              (terminated)
		.av_writebyteenable       (),                                                                      //              (terminated)
		.av_lock                  (),                                                                      //              (terminated)
		.av_clken                 (),                                                                      //              (terminated)
		.uav_clken                (1'b0),                                                                  //              (terminated)
		.av_debugaccess           (),                                                                      //              (terminated)
		.av_outputenable          (),                                                                      //              (terminated)
		.uav_response             (),                                                                      //              (terminated)
		.av_response              (2'b00),                                                                 //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                  //              (terminated)
		.uav_writeresponsevalid   (),                                                                      //              (terminated)
		.av_writeresponserequest  (),                                                                      //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) verilog_ack_s1_translator (
		.clk                      (sys_sdram_pll_0_sys_clk_clk),                                               //                      clk.clk
		.reset                    (start_reset_reset_bridge_in_reset_reset),                                   //                    reset.reset
		.uav_address              (verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (Verilog_ACK_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (Verilog_ACK_s1_write),                                                      //                         .write
		.av_readdata              (Verilog_ACK_s1_readdata),                                                   //                         .readdata
		.av_writedata             (Verilog_ACK_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (Verilog_ACK_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                          //              (terminated)
		.av_begintransfer         (),                                                                          //              (terminated)
		.av_beginbursttransfer    (),                                                                          //              (terminated)
		.av_burstcount            (),                                                                          //              (terminated)
		.av_byteenable            (),                                                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                                                      //              (terminated)
		.av_waitrequest           (1'b0),                                                                      //              (terminated)
		.av_writebyteenable       (),                                                                          //              (terminated)
		.av_lock                  (),                                                                          //              (terminated)
		.av_clken                 (),                                                                          //              (terminated)
		.uav_clken                (1'b0),                                                                      //              (terminated)
		.av_debugaccess           (),                                                                          //              (terminated)
		.av_outputenable          (),                                                                          //              (terminated)
		.uav_response             (),                                                                          //              (terminated)
		.av_response              (2'b00),                                                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                      //              (terminated)
		.uav_writeresponsevalid   (),                                                                          //              (terminated)
		.av_writeresponserequest  (),                                                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) imagedata_s1_translator (
		.clk                      (sys_sdram_pll_0_sys_clk_clk),                                             //                      clk.clk
		.reset                    (start_reset_reset_bridge_in_reset_reset),                                 //                    reset.reset
		.uav_address              (imagedata_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (imagedata_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (imagedata_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (imagedata_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (imagedata_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (imagedata_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (imagedata_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (imagedata_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (imagedata_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (imagedata_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (imagedata_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (ImageData_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (ImageData_s1_write),                                                      //                         .write
		.av_readdata              (ImageData_s1_readdata),                                                   //                         .readdata
		.av_writedata             (ImageData_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (ImageData_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                        //              (terminated)
		.av_begintransfer         (),                                                                        //              (terminated)
		.av_beginbursttransfer    (),                                                                        //              (terminated)
		.av_burstcount            (),                                                                        //              (terminated)
		.av_byteenable            (),                                                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                                                    //              (terminated)
		.av_waitrequest           (1'b0),                                                                    //              (terminated)
		.av_writebyteenable       (),                                                                        //              (terminated)
		.av_lock                  (),                                                                        //              (terminated)
		.av_clken                 (),                                                                        //              (terminated)
		.uav_clken                (1'b0),                                                                    //              (terminated)
		.av_debugaccess           (),                                                                        //              (terminated)
		.av_outputenable          (),                                                                        //              (terminated)
		.uav_response             (),                                                                        //              (terminated)
		.av_response              (2'b00),                                                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                    //              (terminated)
		.uav_writeresponsevalid   (),                                                                        //              (terminated)
		.av_writeresponserequest  (),                                                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hps_tomem_s1_translator (
		.clk                      (sys_sdram_pll_0_sys_clk_clk),                                             //                      clk.clk
		.reset                    (HPS_toMem_reset_reset_bridge_in_reset_reset),                             //                    reset.reset
		.uav_address              (hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (HPS_toMem_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (HPS_toMem_s1_write),                                                      //                         .write
		.av_readdata              (HPS_toMem_s1_readdata),                                                   //                         .readdata
		.av_writedata             (HPS_toMem_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (HPS_toMem_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                        //              (terminated)
		.av_begintransfer         (),                                                                        //              (terminated)
		.av_beginbursttransfer    (),                                                                        //              (terminated)
		.av_burstcount            (),                                                                        //              (terminated)
		.av_byteenable            (),                                                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                                                    //              (terminated)
		.av_waitrequest           (1'b0),                                                                    //              (terminated)
		.av_writebyteenable       (),                                                                        //              (terminated)
		.av_lock                  (),                                                                        //              (terminated)
		.av_clken                 (),                                                                        //              (terminated)
		.uav_clken                (1'b0),                                                                    //              (terminated)
		.av_debugaccess           (),                                                                        //              (terminated)
		.av_outputenable          (),                                                                        //              (terminated)
		.uav_response             (),                                                                        //              (terminated)
		.av_response              (2'b00),                                                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                    //              (terminated)
		.uav_writeresponsevalid   (),                                                                        //              (terminated)
		.av_writeresponserequest  (),                                                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hps_digits_s1_translator (
		.clk                      (sys_sdram_pll_0_sys_clk_clk),                                              //                      clk.clk
		.reset                    (HPS_toMem_reset_reset_bridge_in_reset_reset),                              //                    reset.reset
		.uav_address              (hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (HPS_Digits_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (HPS_Digits_s1_write),                                                      //                         .write
		.av_readdata              (HPS_Digits_s1_readdata),                                                   //                         .readdata
		.av_writedata             (HPS_Digits_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (HPS_Digits_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                         //              (terminated)
		.av_begintransfer         (),                                                                         //              (terminated)
		.av_beginbursttransfer    (),                                                                         //              (terminated)
		.av_burstcount            (),                                                                         //              (terminated)
		.av_byteenable            (),                                                                         //              (terminated)
		.av_readdatavalid         (1'b0),                                                                     //              (terminated)
		.av_waitrequest           (1'b0),                                                                     //              (terminated)
		.av_writebyteenable       (),                                                                         //              (terminated)
		.av_lock                  (),                                                                         //              (terminated)
		.av_clken                 (),                                                                         //              (terminated)
		.uav_clken                (1'b0),                                                                     //              (terminated)
		.av_debugaccess           (),                                                                         //              (terminated)
		.av_outputenable          (),                                                                         //              (terminated)
		.uav_response             (),                                                                         //              (terminated)
		.av_response              (2'b00),                                                                    //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                     //              (terminated)
		.uav_writeresponsevalid   (),                                                                         //              (terminated)
		.av_writeresponserequest  (),                                                                         //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hps_state_s1_translator (
		.clk                      (sys_sdram_pll_0_sys_clk_clk),                                             //                      clk.clk
		.reset                    (HPS_toMem_reset_reset_bridge_in_reset_reset),                             //                    reset.reset
		.uav_address              (hps_state_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (hps_state_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (hps_state_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (hps_state_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (hps_state_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (hps_state_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (hps_state_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (hps_state_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (hps_state_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (hps_state_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (hps_state_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (HPS_State_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (HPS_State_s1_write),                                                      //                         .write
		.av_readdata              (HPS_State_s1_readdata),                                                   //                         .readdata
		.av_writedata             (HPS_State_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (HPS_State_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                        //              (terminated)
		.av_begintransfer         (),                                                                        //              (terminated)
		.av_beginbursttransfer    (),                                                                        //              (terminated)
		.av_burstcount            (),                                                                        //              (terminated)
		.av_byteenable            (),                                                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                                                    //              (terminated)
		.av_waitrequest           (1'b0),                                                                    //              (terminated)
		.av_writebyteenable       (),                                                                        //              (terminated)
		.av_lock                  (),                                                                        //              (terminated)
		.av_clken                 (),                                                                        //              (terminated)
		.uav_clken                (1'b0),                                                                    //              (terminated)
		.av_debugaccess           (),                                                                        //              (terminated)
		.av_outputenable          (),                                                                        //              (terminated)
		.uav_response             (),                                                                        //              (terminated)
		.av_response              (2'b00),                                                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                    //              (terminated)
		.uav_writeresponsevalid   (),                                                                        //              (terminated)
		.av_writeresponserequest  (),                                                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hps_frommem_s1_translator (
		.clk                      (sys_sdram_pll_0_sys_clk_clk),                                               //                      clk.clk
		.reset                    (HPS_toMem_reset_reset_bridge_in_reset_reset),                               //                    reset.reset
		.uav_address              (hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (HPS_fromMem_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (HPS_fromMem_s1_write),                                                      //                         .write
		.av_readdata              (HPS_fromMem_s1_readdata),                                                   //                         .readdata
		.av_writedata             (HPS_fromMem_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (HPS_fromMem_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                          //              (terminated)
		.av_begintransfer         (),                                                                          //              (terminated)
		.av_beginbursttransfer    (),                                                                          //              (terminated)
		.av_burstcount            (),                                                                          //              (terminated)
		.av_byteenable            (),                                                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                                                      //              (terminated)
		.av_waitrequest           (1'b0),                                                                      //              (terminated)
		.av_writebyteenable       (),                                                                          //              (terminated)
		.av_lock                  (),                                                                          //              (terminated)
		.av_clken                 (),                                                                          //              (terminated)
		.uav_clken                (1'b0),                                                                      //              (terminated)
		.av_debugaccess           (),                                                                          //              (terminated)
		.av_outputenable          (),                                                                          //              (terminated)
		.uav_response             (),                                                                          //              (terminated)
		.av_response              (2'b00),                                                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                      //              (terminated)
		.uav_writeresponsevalid   (),                                                                          //              (terminated)
		.av_writeresponserequest  (),                                                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hps_clk_s1_translator (
		.clk                      (sys_sdram_pll_0_sys_clk_clk),                                           //                      clk.clk
		.reset                    (HPS_toMem_reset_reset_bridge_in_reset_reset),                           //                    reset.reset
		.uav_address              (hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (HPS_CLK_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (HPS_CLK_s1_write),                                                      //                         .write
		.av_readdata              (HPS_CLK_s1_readdata),                                                   //                         .readdata
		.av_writedata             (HPS_CLK_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (HPS_CLK_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                      //              (terminated)
		.av_begintransfer         (),                                                                      //              (terminated)
		.av_beginbursttransfer    (),                                                                      //              (terminated)
		.av_burstcount            (),                                                                      //              (terminated)
		.av_byteenable            (),                                                                      //              (terminated)
		.av_readdatavalid         (1'b0),                                                                  //              (terminated)
		.av_waitrequest           (1'b0),                                                                  //              (terminated)
		.av_writebyteenable       (),                                                                      //              (terminated)
		.av_lock                  (),                                                                      //              (terminated)
		.av_clken                 (),                                                                      //              (terminated)
		.uav_clken                (1'b0),                                                                  //              (terminated)
		.av_debugaccess           (),                                                                      //              (terminated)
		.av_outputenable          (),                                                                      //              (terminated)
		.uav_response             (),                                                                      //              (terminated)
		.av_response              (2'b00),                                                                 //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                  //              (terminated)
		.uav_writeresponsevalid   (),                                                                      //              (terminated)
		.av_writeresponserequest  (),                                                                      //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) coldata_s1_translator (
		.clk                      (sys_sdram_pll_0_sys_clk_clk),                                           //                      clk.clk
		.reset                    (start_reset_reset_bridge_in_reset_reset),                               //                    reset.reset
		.uav_address              (coldata_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (coldata_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (coldata_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (coldata_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (coldata_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (coldata_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (coldata_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (coldata_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (coldata_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (coldata_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (coldata_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (ColData_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (ColData_s1_write),                                                      //                         .write
		.av_readdata              (ColData_s1_readdata),                                                   //                         .readdata
		.av_writedata             (ColData_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (ColData_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                      //              (terminated)
		.av_begintransfer         (),                                                                      //              (terminated)
		.av_beginbursttransfer    (),                                                                      //              (terminated)
		.av_burstcount            (),                                                                      //              (terminated)
		.av_byteenable            (),                                                                      //              (terminated)
		.av_readdatavalid         (1'b0),                                                                  //              (terminated)
		.av_waitrequest           (1'b0),                                                                  //              (terminated)
		.av_writebyteenable       (),                                                                      //              (terminated)
		.av_lock                  (),                                                                      //              (terminated)
		.av_clken                 (),                                                                      //              (terminated)
		.uav_clken                (1'b0),                                                                  //              (terminated)
		.av_debugaccess           (),                                                                      //              (terminated)
		.av_outputenable          (),                                                                      //              (terminated)
		.uav_response             (),                                                                      //              (terminated)
		.av_response              (2'b00),                                                                 //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                  //              (terminated)
		.uav_writeresponsevalid   (),                                                                      //              (terminated)
		.av_writeresponserequest  (),                                                                      //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) readwrite_s1_translator (
		.clk                      (sys_sdram_pll_0_sys_clk_clk),                                             //                      clk.clk
		.reset                    (HPS_toMem_reset_reset_bridge_in_reset_reset),                             //                    reset.reset
		.uav_address              (readwrite_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (readwrite_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (readwrite_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (readwrite_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (readwrite_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (readwrite_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (readwrite_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (readwrite_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (readwrite_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (readwrite_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (readwrite_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (ReadWrite_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (ReadWrite_s1_write),                                                      //                         .write
		.av_readdata              (ReadWrite_s1_readdata),                                                   //                         .readdata
		.av_writedata             (ReadWrite_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (ReadWrite_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                        //              (terminated)
		.av_begintransfer         (),                                                                        //              (terminated)
		.av_beginbursttransfer    (),                                                                        //              (terminated)
		.av_burstcount            (),                                                                        //              (terminated)
		.av_byteenable            (),                                                                        //              (terminated)
		.av_readdatavalid         (1'b0),                                                                    //              (terminated)
		.av_waitrequest           (1'b0),                                                                    //              (terminated)
		.av_writebyteenable       (),                                                                        //              (terminated)
		.av_lock                  (),                                                                        //              (terminated)
		.av_clken                 (),                                                                        //              (terminated)
		.uav_clken                (1'b0),                                                                    //              (terminated)
		.av_debugaccess           (),                                                                        //              (terminated)
		.av_outputenable          (),                                                                        //              (terminated)
		.uav_response             (),                                                                        //              (terminated)
		.av_response              (2'b00),                                                                   //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                    //              (terminated)
		.uav_writeresponsevalid   (),                                                                        //              (terminated)
		.av_writeresponserequest  (),                                                                        //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rowaddr_s1_translator (
		.clk                      (sys_sdram_pll_0_sys_clk_clk),                                           //                      clk.clk
		.reset                    (HPS_toMem_reset_reset_bridge_in_reset_reset),                           //                    reset.reset
		.uav_address              (rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (RowAddr_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (RowAddr_s1_write),                                                      //                         .write
		.av_readdata              (RowAddr_s1_readdata),                                                   //                         .readdata
		.av_writedata             (RowAddr_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (RowAddr_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                      //              (terminated)
		.av_begintransfer         (),                                                                      //              (terminated)
		.av_beginbursttransfer    (),                                                                      //              (terminated)
		.av_burstcount            (),                                                                      //              (terminated)
		.av_byteenable            (),                                                                      //              (terminated)
		.av_readdatavalid         (1'b0),                                                                  //              (terminated)
		.av_waitrequest           (1'b0),                                                                  //              (terminated)
		.av_writebyteenable       (),                                                                      //              (terminated)
		.av_lock                  (),                                                                      //              (terminated)
		.av_clken                 (),                                                                      //              (terminated)
		.uav_clken                (1'b0),                                                                  //              (terminated)
		.av_debugaccess           (),                                                                      //              (terminated)
		.av_outputenable          (),                                                                      //              (terminated)
		.uav_response             (),                                                                      //              (terminated)
		.av_response              (2'b00),                                                                 //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                  //              (terminated)
		.uav_writeresponsevalid   (),                                                                      //              (terminated)
		.av_writeresponserequest  (),                                                                      //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) coladdr_s1_translator (
		.clk                      (sys_sdram_pll_0_sys_clk_clk),                                           //                      clk.clk
		.reset                    (HPS_toMem_reset_reset_bridge_in_reset_reset),                           //                    reset.reset
		.uav_address              (coladdr_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (coladdr_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (coladdr_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (coladdr_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (coladdr_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (coladdr_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (coladdr_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (coladdr_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (coladdr_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (coladdr_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (coladdr_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (ColAddr_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (ColAddr_s1_write),                                                      //                         .write
		.av_readdata              (ColAddr_s1_readdata),                                                   //                         .readdata
		.av_writedata             (ColAddr_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (ColAddr_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                      //              (terminated)
		.av_begintransfer         (),                                                                      //              (terminated)
		.av_beginbursttransfer    (),                                                                      //              (terminated)
		.av_burstcount            (),                                                                      //              (terminated)
		.av_byteenable            (),                                                                      //              (terminated)
		.av_readdatavalid         (1'b0),                                                                  //              (terminated)
		.av_waitrequest           (1'b0),                                                                  //              (terminated)
		.av_writebyteenable       (),                                                                      //              (terminated)
		.av_lock                  (),                                                                      //              (terminated)
		.av_clken                 (),                                                                      //              (terminated)
		.uav_clken                (1'b0),                                                                  //              (terminated)
		.av_debugaccess           (),                                                                      //              (terminated)
		.av_outputenable          (),                                                                      //              (terminated)
		.uav_response             (),                                                                      //              (terminated)
		.av_response              (2'b00),                                                                 //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                  //              (terminated)
		.uav_writeresponsevalid   (),                                                                      //              (terminated)
		.av_writeresponserequest  (),                                                                      //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) row_read_s1_translator (
		.clk                      (sys_sdram_pll_0_sys_clk_clk),                                            //                      clk.clk
		.reset                    (HPS_toMem_reset_reset_bridge_in_reset_reset),                            //                    reset.reset
		.uav_address              (row_read_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (row_read_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (row_read_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (row_read_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (row_read_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (row_read_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (row_read_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (row_read_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (row_read_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (row_read_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (row_read_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (Row_Read_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (Row_Read_s1_write),                                                      //                         .write
		.av_readdata              (Row_Read_s1_readdata),                                                   //                         .readdata
		.av_writedata             (Row_Read_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (Row_Read_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                       //              (terminated)
		.av_begintransfer         (),                                                                       //              (terminated)
		.av_beginbursttransfer    (),                                                                       //              (terminated)
		.av_burstcount            (),                                                                       //              (terminated)
		.av_byteenable            (),                                                                       //              (terminated)
		.av_readdatavalid         (1'b0),                                                                   //              (terminated)
		.av_waitrequest           (1'b0),                                                                   //              (terminated)
		.av_writebyteenable       (),                                                                       //              (terminated)
		.av_lock                  (),                                                                       //              (terminated)
		.av_clken                 (),                                                                       //              (terminated)
		.uav_clken                (1'b0),                                                                   //              (terminated)
		.av_debugaccess           (),                                                                       //              (terminated)
		.av_outputenable          (),                                                                       //              (terminated)
		.uav_response             (),                                                                       //              (terminated)
		.av_response              (2'b00),                                                                  //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                   //              (terminated)
		.uav_writeresponsevalid   (),                                                                       //              (terminated)
		.av_writeresponserequest  (),                                                                       //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) col_read_s1_translator (
		.clk                      (sys_sdram_pll_0_sys_clk_clk),                                            //                      clk.clk
		.reset                    (HPS_toMem_reset_reset_bridge_in_reset_reset),                            //                    reset.reset
		.uav_address              (col_read_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (col_read_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (col_read_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (col_read_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (col_read_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (col_read_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (col_read_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (col_read_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (col_read_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (col_read_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (col_read_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (Col_Read_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (Col_Read_s1_write),                                                      //                         .write
		.av_readdata              (Col_Read_s1_readdata),                                                   //                         .readdata
		.av_writedata             (Col_Read_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (Col_Read_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                       //              (terminated)
		.av_begintransfer         (),                                                                       //              (terminated)
		.av_beginbursttransfer    (),                                                                       //              (terminated)
		.av_burstcount            (),                                                                       //              (terminated)
		.av_byteenable            (),                                                                       //              (terminated)
		.av_readdatavalid         (1'b0),                                                                   //              (terminated)
		.av_waitrequest           (1'b0),                                                                   //              (terminated)
		.av_writebyteenable       (),                                                                       //              (terminated)
		.av_lock                  (),                                                                       //              (terminated)
		.av_clken                 (),                                                                       //              (terminated)
		.uav_clken                (1'b0),                                                                   //              (terminated)
		.av_debugaccess           (),                                                                       //              (terminated)
		.av_outputenable          (),                                                                       //              (terminated)
		.uav_response             (),                                                                       //              (terminated)
		.av_response              (2'b00),                                                                  //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                   //              (terminated)
		.uav_writeresponsevalid   (),                                                                       //              (terminated)
		.av_writeresponserequest  (),                                                                       //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                    //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (84),
		.PKT_CACHE_H               (112),
		.PKT_CACHE_L               (109),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_THREAD_ID_H           (105),
		.PKT_THREAD_ID_L           (94),
		.PKT_QOS_L                 (85),
		.PKT_QOS_H                 (85),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (16),
		.ID                        (0)
	) hps_0_h2f_lw_axi_master_agent (
		.aclk                   (sys_sdram_pll_0_sys_clk_clk),                                          //              clk.clk
		.aresetn                (~hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (limiter_rsp_src_valid),                                                //         write_rp.valid
		.write_rp_data          (limiter_rsp_src_data),                                                 //                 .data
		.write_rp_channel       (limiter_rsp_src_channel),                                              //                 .channel
		.write_rp_startofpacket (limiter_rsp_src_startofpacket),                                        //                 .startofpacket
		.write_rp_endofpacket   (limiter_rsp_src_endofpacket),                                          //                 .endofpacket
		.write_rp_ready         (limiter_rsp_src_ready),                                                //                 .ready
		.read_cp_valid          (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_lw_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (limiter_001_rsp_src_valid),                                            //          read_rp.valid
		.read_rp_data           (limiter_001_rsp_src_data),                                             //                 .data
		.read_rp_channel        (limiter_001_rsp_src_channel),                                          //                 .channel
		.read_rp_startofpacket  (limiter_001_rsp_src_startofpacket),                                    //                 .startofpacket
		.read_rp_endofpacket    (limiter_001_rsp_src_endofpacket),                                      //                 .endofpacket
		.read_rp_ready          (limiter_001_rsp_src_ready),                                            //                 .ready
		.awid                   (hps_0_h2f_lw_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_lw_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_lw_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_lw_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_lw_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_lw_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_lw_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_lw_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_lw_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_lw_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_lw_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_lw_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_lw_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_lw_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_lw_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_lw_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_lw_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_lw_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_lw_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_lw_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_lw_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_lw_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_lw_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_lw_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_lw_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_lw_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_lw_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_lw_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_lw_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_lw_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_lw_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_lw_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_lw_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_lw_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_lw_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_lw_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                 //      (terminated)
		.aruser                 (1'b0),                                                                 //      (terminated)
		.awqos                  (4'b0000),                                                              //      (terminated)
		.arqos                  (4'b0000),                                                              //      (terminated)
		.awregion               (4'b0000),                                                              //      (terminated)
		.arregion               (4'b0000),                                                              //      (terminated)
		.wuser                  (8'b00000000),                                                          //      (terminated)
		.ruser                  (),                                                                     //      (terminated)
		.buser                  ()                                                                      //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) start_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                                                   //             clk.clk
		.reset                   (start_reset_reset_bridge_in_reset_reset),                                       //       clk_reset.reset
		.m0_address              (start_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (start_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (start_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (start_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (start_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (start_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (start_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (start_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (start_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (start_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (start_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (start_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (start_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (start_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (start_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (start_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_source0_ready),                                                   //              cp.ready
		.cp_valid                (burst_adapter_source0_valid),                                                   //                .valid
		.cp_data                 (burst_adapter_source0_data),                                                    //                .data
		.cp_startofpacket        (burst_adapter_source0_startofpacket),                                           //                .startofpacket
		.cp_endofpacket          (burst_adapter_source0_endofpacket),                                             //                .endofpacket
		.cp_channel              (burst_adapter_source0_channel),                                                 //                .channel
		.rf_sink_ready           (start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (start_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (start_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (start_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (start_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (start_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponserequest (),                                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                                   //       clk.clk
		.reset             (start_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.in_data           (start_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (start_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (start_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (start_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (start_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (start_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                             //       clk.clk
		.reset             (start_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.in_data           (start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (start_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                                    // (terminated)
		.out_startofpacket (),                                                                        // (terminated)
		.out_endofpacket   (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                                                                        //             clk.clk
		.reset                   (start_reset_reset_bridge_in_reset_reset),                                                            //       clk_reset.reset
		.m0_address              (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_001_source0_ready),                                                                    //              cp.ready
		.cp_valid                (burst_adapter_001_source0_valid),                                                                    //                .valid
		.cp_data                 (burst_adapter_001_source0_data),                                                                     //                .data
		.cp_startofpacket        (burst_adapter_001_source0_startofpacket),                                                            //                .startofpacket
		.cp_endofpacket          (burst_adapter_001_source0_endofpacket),                                                              //                .endofpacket
		.cp_channel              (burst_adapter_001_source0_channel),                                                                  //                .channel
		.rf_sink_ready           (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                              //     (terminated)
		.m0_writeresponserequest (),                                                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                                                        //       clk.clk
		.reset             (start_reset_reset_bridge_in_reset_reset),                                                            // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                              // (terminated)
		.csr_read          (1'b0),                                                                                               // (terminated)
		.csr_write         (1'b0),                                                                                               // (terminated)
		.csr_readdata      (),                                                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                               // (terminated)
		.almost_full_data  (),                                                                                                   // (terminated)
		.almost_empty_data (),                                                                                                   // (terminated)
		.in_empty          (1'b0),                                                                                               // (terminated)
		.out_empty         (),                                                                                                   // (terminated)
		.in_error          (1'b0),                                                                                               // (terminated)
		.out_error         (),                                                                                                   // (terminated)
		.in_channel        (1'b0),                                                                                               // (terminated)
		.out_channel       ()                                                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                                                  //       clk.clk
		.reset             (start_reset_reset_bridge_in_reset_reset),                                                      // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                                        // (terminated)
		.csr_read          (1'b0),                                                                                         // (terminated)
		.csr_write         (1'b0),                                                                                         // (terminated)
		.csr_readdata      (),                                                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                         // (terminated)
		.almost_full_data  (),                                                                                             // (terminated)
		.almost_empty_data (),                                                                                             // (terminated)
		.in_startofpacket  (1'b0),                                                                                         // (terminated)
		.in_endofpacket    (1'b0),                                                                                         // (terminated)
		.out_startofpacket (),                                                                                             // (terminated)
		.out_endofpacket   (),                                                                                             // (terminated)
		.in_empty          (1'b0),                                                                                         // (terminated)
		.out_empty         (),                                                                                             // (terminated)
		.in_error          (1'b0),                                                                                         // (terminated)
		.out_error         (),                                                                                             // (terminated)
		.in_channel        (1'b0),                                                                                         // (terminated)
		.out_channel       ()                                                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) rowdata_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                                                     //             clk.clk
		.reset                   (start_reset_reset_bridge_in_reset_reset),                                         //       clk_reset.reset
		.m0_address              (rowdata_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (rowdata_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (rowdata_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (rowdata_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (rowdata_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (rowdata_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (rowdata_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (rowdata_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (rowdata_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (rowdata_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (rowdata_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (rowdata_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (rowdata_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (rowdata_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (rowdata_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (rowdata_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_002_source0_ready),                                                 //              cp.ready
		.cp_valid                (burst_adapter_002_source0_valid),                                                 //                .valid
		.cp_data                 (burst_adapter_002_source0_data),                                                  //                .data
		.cp_startofpacket        (burst_adapter_002_source0_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (burst_adapter_002_source0_endofpacket),                                           //                .endofpacket
		.cp_channel              (burst_adapter_002_source0_channel),                                               //                .channel
		.rf_sink_ready           (rowdata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (rowdata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (rowdata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (rowdata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (rowdata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (rowdata_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (rowdata_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (rowdata_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (rowdata_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (rowdata_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (rowdata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (rowdata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (rowdata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (rowdata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rowdata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (rowdata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                           //     (terminated)
		.m0_writeresponserequest (),                                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rowdata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                                     //       clk.clk
		.reset             (start_reset_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.in_data           (rowdata_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (rowdata_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (rowdata_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (rowdata_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (rowdata_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (rowdata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (rowdata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (rowdata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (rowdata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (rowdata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                           // (terminated)
		.csr_read          (1'b0),                                                                            // (terminated)
		.csr_write         (1'b0),                                                                            // (terminated)
		.csr_readdata      (),                                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                            // (terminated)
		.almost_full_data  (),                                                                                // (terminated)
		.almost_empty_data (),                                                                                // (terminated)
		.in_empty          (1'b0),                                                                            // (terminated)
		.out_empty         (),                                                                                // (terminated)
		.in_error          (1'b0),                                                                            // (terminated)
		.out_error         (),                                                                                // (terminated)
		.in_channel        (1'b0),                                                                            // (terminated)
		.out_channel       ()                                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rowdata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                               //       clk.clk
		.reset             (start_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.in_data           (rowdata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (rowdata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (rowdata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (rowdata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (rowdata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (rowdata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                                      // (terminated)
		.out_startofpacket (),                                                                          // (terminated)
		.out_endofpacket   (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) verilog_ack_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                                                         //             clk.clk
		.reset                   (start_reset_reset_bridge_in_reset_reset),                                             //       clk_reset.reset
		.m0_address              (verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (verilog_ack_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_003_source0_ready),                                                     //              cp.ready
		.cp_valid                (burst_adapter_003_source0_valid),                                                     //                .valid
		.cp_data                 (burst_adapter_003_source0_data),                                                      //                .data
		.cp_startofpacket        (burst_adapter_003_source0_startofpacket),                                             //                .startofpacket
		.cp_endofpacket          (burst_adapter_003_source0_endofpacket),                                               //                .endofpacket
		.cp_channel              (burst_adapter_003_source0_channel),                                                   //                .channel
		.rf_sink_ready           (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                               //     (terminated)
		.m0_writeresponserequest (),                                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) verilog_ack_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                                         //       clk.clk
		.reset             (start_reset_reset_bridge_in_reset_reset),                                             // clk_reset.reset
		.in_data           (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                               // (terminated)
		.csr_read          (1'b0),                                                                                // (terminated)
		.csr_write         (1'b0),                                                                                // (terminated)
		.csr_readdata      (),                                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                // (terminated)
		.almost_full_data  (),                                                                                    // (terminated)
		.almost_empty_data (),                                                                                    // (terminated)
		.in_empty          (1'b0),                                                                                // (terminated)
		.out_empty         (),                                                                                    // (terminated)
		.in_error          (1'b0),                                                                                // (terminated)
		.out_error         (),                                                                                    // (terminated)
		.in_channel        (1'b0),                                                                                // (terminated)
		.out_channel       ()                                                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) verilog_ack_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                                   //       clk.clk
		.reset             (start_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.in_data           (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_startofpacket  (1'b0),                                                                          // (terminated)
		.in_endofpacket    (1'b0),                                                                          // (terminated)
		.out_startofpacket (),                                                                              // (terminated)
		.out_endofpacket   (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) imagedata_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                                                       //             clk.clk
		.reset                   (start_reset_reset_bridge_in_reset_reset),                                           //       clk_reset.reset
		.m0_address              (imagedata_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (imagedata_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (imagedata_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (imagedata_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (imagedata_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (imagedata_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (imagedata_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (imagedata_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (imagedata_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (imagedata_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (imagedata_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (imagedata_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (imagedata_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (imagedata_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (imagedata_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (imagedata_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_004_source0_ready),                                                   //              cp.ready
		.cp_valid                (burst_adapter_004_source0_valid),                                                   //                .valid
		.cp_data                 (burst_adapter_004_source0_data),                                                    //                .data
		.cp_startofpacket        (burst_adapter_004_source0_startofpacket),                                           //                .startofpacket
		.cp_endofpacket          (burst_adapter_004_source0_endofpacket),                                             //                .endofpacket
		.cp_channel              (burst_adapter_004_source0_channel),                                                 //                .channel
		.rf_sink_ready           (imagedata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (imagedata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (imagedata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (imagedata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (imagedata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (imagedata_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (imagedata_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (imagedata_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (imagedata_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (imagedata_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (imagedata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (imagedata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (imagedata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (imagedata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (imagedata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (imagedata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                             //     (terminated)
		.m0_writeresponserequest (),                                                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) imagedata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                                       //       clk.clk
		.reset             (start_reset_reset_bridge_in_reset_reset),                                           // clk_reset.reset
		.in_data           (imagedata_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (imagedata_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (imagedata_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (imagedata_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (imagedata_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (imagedata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (imagedata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (imagedata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (imagedata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (imagedata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                             // (terminated)
		.csr_read          (1'b0),                                                                              // (terminated)
		.csr_write         (1'b0),                                                                              // (terminated)
		.csr_readdata      (),                                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                              // (terminated)
		.almost_full_data  (),                                                                                  // (terminated)
		.almost_empty_data (),                                                                                  // (terminated)
		.in_empty          (1'b0),                                                                              // (terminated)
		.out_empty         (),                                                                                  // (terminated)
		.in_error          (1'b0),                                                                              // (terminated)
		.out_error         (),                                                                                  // (terminated)
		.in_channel        (1'b0),                                                                              // (terminated)
		.out_channel       ()                                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) imagedata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                                 //       clk.clk
		.reset             (start_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.in_data           (imagedata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (imagedata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (imagedata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (imagedata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (imagedata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (imagedata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                       // (terminated)
		.csr_read          (1'b0),                                                                        // (terminated)
		.csr_write         (1'b0),                                                                        // (terminated)
		.csr_readdata      (),                                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                        // (terminated)
		.almost_full_data  (),                                                                            // (terminated)
		.almost_empty_data (),                                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                                        // (terminated)
		.out_startofpacket (),                                                                            // (terminated)
		.out_endofpacket   (),                                                                            // (terminated)
		.in_empty          (1'b0),                                                                        // (terminated)
		.out_empty         (),                                                                            // (terminated)
		.in_error          (1'b0),                                                                        // (terminated)
		.out_error         (),                                                                            // (terminated)
		.in_channel        (1'b0),                                                                        // (terminated)
		.out_channel       ()                                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) hps_tomem_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                                                       //             clk.clk
		.reset                   (HPS_toMem_reset_reset_bridge_in_reset_reset),                                       //       clk_reset.reset
		.m0_address              (hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (hps_tomem_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_005_source0_ready),                                                   //              cp.ready
		.cp_valid                (burst_adapter_005_source0_valid),                                                   //                .valid
		.cp_data                 (burst_adapter_005_source0_data),                                                    //                .data
		.cp_startofpacket        (burst_adapter_005_source0_startofpacket),                                           //                .startofpacket
		.cp_endofpacket          (burst_adapter_005_source0_endofpacket),                                             //                .endofpacket
		.cp_channel              (burst_adapter_005_source0_channel),                                                 //                .channel
		.rf_sink_ready           (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                             //     (terminated)
		.m0_writeresponserequest (),                                                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hps_tomem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                                       //       clk.clk
		.reset             (HPS_toMem_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.in_data           (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                             // (terminated)
		.csr_read          (1'b0),                                                                              // (terminated)
		.csr_write         (1'b0),                                                                              // (terminated)
		.csr_readdata      (),                                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                              // (terminated)
		.almost_full_data  (),                                                                                  // (terminated)
		.almost_empty_data (),                                                                                  // (terminated)
		.in_empty          (1'b0),                                                                              // (terminated)
		.out_empty         (),                                                                                  // (terminated)
		.in_error          (1'b0),                                                                              // (terminated)
		.out_error         (),                                                                                  // (terminated)
		.in_channel        (1'b0),                                                                              // (terminated)
		.out_channel       ()                                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hps_tomem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                                 //       clk.clk
		.reset             (HPS_toMem_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.in_data           (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                       // (terminated)
		.csr_read          (1'b0),                                                                        // (terminated)
		.csr_write         (1'b0),                                                                        // (terminated)
		.csr_readdata      (),                                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                        // (terminated)
		.almost_full_data  (),                                                                            // (terminated)
		.almost_empty_data (),                                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                                        // (terminated)
		.out_startofpacket (),                                                                            // (terminated)
		.out_endofpacket   (),                                                                            // (terminated)
		.in_empty          (1'b0),                                                                        // (terminated)
		.out_empty         (),                                                                            // (terminated)
		.in_error          (1'b0),                                                                        // (terminated)
		.out_error         (),                                                                            // (terminated)
		.in_channel        (1'b0),                                                                        // (terminated)
		.out_channel       ()                                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) hps_digits_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                                                        //             clk.clk
		.reset                   (HPS_toMem_reset_reset_bridge_in_reset_reset),                                        //       clk_reset.reset
		.m0_address              (hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (hps_digits_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (hps_digits_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hps_digits_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (hps_digits_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (hps_digits_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (hps_digits_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_006_source0_ready),                                                    //              cp.ready
		.cp_valid                (burst_adapter_006_source0_valid),                                                    //                .valid
		.cp_data                 (burst_adapter_006_source0_data),                                                     //                .data
		.cp_startofpacket        (burst_adapter_006_source0_startofpacket),                                            //                .startofpacket
		.cp_endofpacket          (burst_adapter_006_source0_endofpacket),                                              //                .endofpacket
		.cp_channel              (burst_adapter_006_source0_channel),                                                  //                .channel
		.rf_sink_ready           (hps_digits_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hps_digits_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hps_digits_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hps_digits_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hps_digits_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hps_digits_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hps_digits_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hps_digits_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hps_digits_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hps_digits_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (hps_digits_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (hps_digits_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (hps_digits_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (hps_digits_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hps_digits_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hps_digits_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                              //     (terminated)
		.m0_writeresponserequest (),                                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hps_digits_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                                        //       clk.clk
		.reset             (HPS_toMem_reset_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.in_data           (hps_digits_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (hps_digits_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (hps_digits_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hps_digits_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hps_digits_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hps_digits_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hps_digits_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hps_digits_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hps_digits_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hps_digits_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                              // (terminated)
		.csr_read          (1'b0),                                                                               // (terminated)
		.csr_write         (1'b0),                                                                               // (terminated)
		.csr_readdata      (),                                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                               // (terminated)
		.almost_full_data  (),                                                                                   // (terminated)
		.almost_empty_data (),                                                                                   // (terminated)
		.in_empty          (1'b0),                                                                               // (terminated)
		.out_empty         (),                                                                                   // (terminated)
		.in_error          (1'b0),                                                                               // (terminated)
		.out_error         (),                                                                                   // (terminated)
		.in_channel        (1'b0),                                                                               // (terminated)
		.out_channel       ()                                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hps_digits_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                                  //       clk.clk
		.reset             (HPS_toMem_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.in_data           (hps_digits_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (hps_digits_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (hps_digits_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (hps_digits_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (hps_digits_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (hps_digits_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                        // (terminated)
		.csr_read          (1'b0),                                                                         // (terminated)
		.csr_write         (1'b0),                                                                         // (terminated)
		.csr_readdata      (),                                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                         // (terminated)
		.almost_full_data  (),                                                                             // (terminated)
		.almost_empty_data (),                                                                             // (terminated)
		.in_startofpacket  (1'b0),                                                                         // (terminated)
		.in_endofpacket    (1'b0),                                                                         // (terminated)
		.out_startofpacket (),                                                                             // (terminated)
		.out_endofpacket   (),                                                                             // (terminated)
		.in_empty          (1'b0),                                                                         // (terminated)
		.out_empty         (),                                                                             // (terminated)
		.in_error          (1'b0),                                                                         // (terminated)
		.out_error         (),                                                                             // (terminated)
		.in_channel        (1'b0),                                                                         // (terminated)
		.out_channel       ()                                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) hps_state_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                                                       //             clk.clk
		.reset                   (HPS_toMem_reset_reset_bridge_in_reset_reset),                                       //       clk_reset.reset
		.m0_address              (hps_state_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hps_state_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hps_state_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hps_state_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hps_state_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (hps_state_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hps_state_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hps_state_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (hps_state_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hps_state_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (hps_state_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (hps_state_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hps_state_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (hps_state_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (hps_state_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (hps_state_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_007_source0_ready),                                                   //              cp.ready
		.cp_valid                (burst_adapter_007_source0_valid),                                                   //                .valid
		.cp_data                 (burst_adapter_007_source0_data),                                                    //                .data
		.cp_startofpacket        (burst_adapter_007_source0_startofpacket),                                           //                .startofpacket
		.cp_endofpacket          (burst_adapter_007_source0_endofpacket),                                             //                .endofpacket
		.cp_channel              (burst_adapter_007_source0_channel),                                                 //                .channel
		.rf_sink_ready           (hps_state_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hps_state_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hps_state_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hps_state_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hps_state_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hps_state_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hps_state_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hps_state_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hps_state_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hps_state_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (hps_state_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (hps_state_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (hps_state_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (hps_state_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hps_state_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hps_state_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                             //     (terminated)
		.m0_writeresponserequest (),                                                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hps_state_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                                       //       clk.clk
		.reset             (HPS_toMem_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.in_data           (hps_state_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (hps_state_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (hps_state_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hps_state_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hps_state_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hps_state_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hps_state_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hps_state_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hps_state_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hps_state_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                             // (terminated)
		.csr_read          (1'b0),                                                                              // (terminated)
		.csr_write         (1'b0),                                                                              // (terminated)
		.csr_readdata      (),                                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                              // (terminated)
		.almost_full_data  (),                                                                                  // (terminated)
		.almost_empty_data (),                                                                                  // (terminated)
		.in_empty          (1'b0),                                                                              // (terminated)
		.out_empty         (),                                                                                  // (terminated)
		.in_error          (1'b0),                                                                              // (terminated)
		.out_error         (),                                                                                  // (terminated)
		.in_channel        (1'b0),                                                                              // (terminated)
		.out_channel       ()                                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hps_state_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                                 //       clk.clk
		.reset             (HPS_toMem_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.in_data           (hps_state_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (hps_state_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (hps_state_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (hps_state_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (hps_state_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (hps_state_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                       // (terminated)
		.csr_read          (1'b0),                                                                        // (terminated)
		.csr_write         (1'b0),                                                                        // (terminated)
		.csr_readdata      (),                                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                        // (terminated)
		.almost_full_data  (),                                                                            // (terminated)
		.almost_empty_data (),                                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                                        // (terminated)
		.out_startofpacket (),                                                                            // (terminated)
		.out_endofpacket   (),                                                                            // (terminated)
		.in_empty          (1'b0),                                                                        // (terminated)
		.out_empty         (),                                                                            // (terminated)
		.in_error          (1'b0),                                                                        // (terminated)
		.out_error         (),                                                                            // (terminated)
		.in_channel        (1'b0),                                                                        // (terminated)
		.out_channel       ()                                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) hps_frommem_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                                                         //             clk.clk
		.reset                   (HPS_toMem_reset_reset_bridge_in_reset_reset),                                         //       clk_reset.reset
		.m0_address              (hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (hps_frommem_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_008_source0_ready),                                                     //              cp.ready
		.cp_valid                (burst_adapter_008_source0_valid),                                                     //                .valid
		.cp_data                 (burst_adapter_008_source0_data),                                                      //                .data
		.cp_startofpacket        (burst_adapter_008_source0_startofpacket),                                             //                .startofpacket
		.cp_endofpacket          (burst_adapter_008_source0_endofpacket),                                               //                .endofpacket
		.cp_channel              (burst_adapter_008_source0_channel),                                                   //                .channel
		.rf_sink_ready           (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                               //     (terminated)
		.m0_writeresponserequest (),                                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hps_frommem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                                         //       clk.clk
		.reset             (HPS_toMem_reset_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.in_data           (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                               // (terminated)
		.csr_read          (1'b0),                                                                                // (terminated)
		.csr_write         (1'b0),                                                                                // (terminated)
		.csr_readdata      (),                                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                // (terminated)
		.almost_full_data  (),                                                                                    // (terminated)
		.almost_empty_data (),                                                                                    // (terminated)
		.in_empty          (1'b0),                                                                                // (terminated)
		.out_empty         (),                                                                                    // (terminated)
		.in_error          (1'b0),                                                                                // (terminated)
		.out_error         (),                                                                                    // (terminated)
		.in_channel        (1'b0),                                                                                // (terminated)
		.out_channel       ()                                                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hps_frommem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                                   //       clk.clk
		.reset             (HPS_toMem_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.in_data           (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_startofpacket  (1'b0),                                                                          // (terminated)
		.in_endofpacket    (1'b0),                                                                          // (terminated)
		.out_startofpacket (),                                                                              // (terminated)
		.out_endofpacket   (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) hps_clk_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                                                     //             clk.clk
		.reset                   (HPS_toMem_reset_reset_bridge_in_reset_reset),                                     //       clk_reset.reset
		.m0_address              (hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (hps_clk_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (hps_clk_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hps_clk_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (hps_clk_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (hps_clk_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (hps_clk_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_009_source0_ready),                                                 //              cp.ready
		.cp_valid                (burst_adapter_009_source0_valid),                                                 //                .valid
		.cp_data                 (burst_adapter_009_source0_data),                                                  //                .data
		.cp_startofpacket        (burst_adapter_009_source0_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (burst_adapter_009_source0_endofpacket),                                           //                .endofpacket
		.cp_channel              (burst_adapter_009_source0_channel),                                               //                .channel
		.rf_sink_ready           (hps_clk_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hps_clk_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hps_clk_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hps_clk_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hps_clk_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hps_clk_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hps_clk_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hps_clk_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hps_clk_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hps_clk_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (hps_clk_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (hps_clk_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (hps_clk_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (hps_clk_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hps_clk_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hps_clk_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                           //     (terminated)
		.m0_writeresponserequest (),                                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hps_clk_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                                     //       clk.clk
		.reset             (HPS_toMem_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.in_data           (hps_clk_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (hps_clk_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (hps_clk_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hps_clk_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hps_clk_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hps_clk_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hps_clk_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hps_clk_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hps_clk_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hps_clk_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                           // (terminated)
		.csr_read          (1'b0),                                                                            // (terminated)
		.csr_write         (1'b0),                                                                            // (terminated)
		.csr_readdata      (),                                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                            // (terminated)
		.almost_full_data  (),                                                                                // (terminated)
		.almost_empty_data (),                                                                                // (terminated)
		.in_empty          (1'b0),                                                                            // (terminated)
		.out_empty         (),                                                                                // (terminated)
		.in_error          (1'b0),                                                                            // (terminated)
		.out_error         (),                                                                                // (terminated)
		.in_channel        (1'b0),                                                                            // (terminated)
		.out_channel       ()                                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hps_clk_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                               //       clk.clk
		.reset             (HPS_toMem_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.in_data           (hps_clk_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (hps_clk_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (hps_clk_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (hps_clk_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (hps_clk_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (hps_clk_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                                      // (terminated)
		.out_startofpacket (),                                                                          // (terminated)
		.out_endofpacket   (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) coldata_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                                                     //             clk.clk
		.reset                   (start_reset_reset_bridge_in_reset_reset),                                         //       clk_reset.reset
		.m0_address              (coldata_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (coldata_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (coldata_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (coldata_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (coldata_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (coldata_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (coldata_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (coldata_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (coldata_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (coldata_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (coldata_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (coldata_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (coldata_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (coldata_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (coldata_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (coldata_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_010_source0_ready),                                                 //              cp.ready
		.cp_valid                (burst_adapter_010_source0_valid),                                                 //                .valid
		.cp_data                 (burst_adapter_010_source0_data),                                                  //                .data
		.cp_startofpacket        (burst_adapter_010_source0_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (burst_adapter_010_source0_endofpacket),                                           //                .endofpacket
		.cp_channel              (burst_adapter_010_source0_channel),                                               //                .channel
		.rf_sink_ready           (coldata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (coldata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (coldata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (coldata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (coldata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (coldata_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (coldata_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (coldata_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (coldata_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (coldata_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (coldata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (coldata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (coldata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (coldata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (coldata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (coldata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                           //     (terminated)
		.m0_writeresponserequest (),                                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) coldata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                                     //       clk.clk
		.reset             (start_reset_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.in_data           (coldata_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (coldata_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (coldata_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (coldata_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (coldata_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (coldata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (coldata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (coldata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (coldata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (coldata_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                           // (terminated)
		.csr_read          (1'b0),                                                                            // (terminated)
		.csr_write         (1'b0),                                                                            // (terminated)
		.csr_readdata      (),                                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                            // (terminated)
		.almost_full_data  (),                                                                                // (terminated)
		.almost_empty_data (),                                                                                // (terminated)
		.in_empty          (1'b0),                                                                            // (terminated)
		.out_empty         (),                                                                                // (terminated)
		.in_error          (1'b0),                                                                            // (terminated)
		.out_error         (),                                                                                // (terminated)
		.in_channel        (1'b0),                                                                            // (terminated)
		.out_channel       ()                                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) coldata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                               //       clk.clk
		.reset             (start_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.in_data           (coldata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (coldata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (coldata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (coldata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (coldata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (coldata_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                                      // (terminated)
		.out_startofpacket (),                                                                          // (terminated)
		.out_endofpacket   (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) readwrite_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                                                       //             clk.clk
		.reset                   (HPS_toMem_reset_reset_bridge_in_reset_reset),                                       //       clk_reset.reset
		.m0_address              (readwrite_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (readwrite_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (readwrite_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (readwrite_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (readwrite_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (readwrite_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (readwrite_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (readwrite_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (readwrite_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (readwrite_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (readwrite_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (readwrite_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (readwrite_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (readwrite_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (readwrite_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (readwrite_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_011_source0_ready),                                                   //              cp.ready
		.cp_valid                (burst_adapter_011_source0_valid),                                                   //                .valid
		.cp_data                 (burst_adapter_011_source0_data),                                                    //                .data
		.cp_startofpacket        (burst_adapter_011_source0_startofpacket),                                           //                .startofpacket
		.cp_endofpacket          (burst_adapter_011_source0_endofpacket),                                             //                .endofpacket
		.cp_channel              (burst_adapter_011_source0_channel),                                                 //                .channel
		.rf_sink_ready           (readwrite_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (readwrite_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (readwrite_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (readwrite_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (readwrite_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (readwrite_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (readwrite_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (readwrite_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (readwrite_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (readwrite_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (readwrite_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (readwrite_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (readwrite_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (readwrite_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (readwrite_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (readwrite_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                             //     (terminated)
		.m0_writeresponserequest (),                                                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) readwrite_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                                       //       clk.clk
		.reset             (HPS_toMem_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.in_data           (readwrite_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (readwrite_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (readwrite_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (readwrite_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (readwrite_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (readwrite_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (readwrite_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (readwrite_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (readwrite_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (readwrite_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                             // (terminated)
		.csr_read          (1'b0),                                                                              // (terminated)
		.csr_write         (1'b0),                                                                              // (terminated)
		.csr_readdata      (),                                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                              // (terminated)
		.almost_full_data  (),                                                                                  // (terminated)
		.almost_empty_data (),                                                                                  // (terminated)
		.in_empty          (1'b0),                                                                              // (terminated)
		.out_empty         (),                                                                                  // (terminated)
		.in_error          (1'b0),                                                                              // (terminated)
		.out_error         (),                                                                                  // (terminated)
		.in_channel        (1'b0),                                                                              // (terminated)
		.out_channel       ()                                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) readwrite_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                                 //       clk.clk
		.reset             (HPS_toMem_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.in_data           (readwrite_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (readwrite_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (readwrite_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (readwrite_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (readwrite_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (readwrite_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                       // (terminated)
		.csr_read          (1'b0),                                                                        // (terminated)
		.csr_write         (1'b0),                                                                        // (terminated)
		.csr_readdata      (),                                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                        // (terminated)
		.almost_full_data  (),                                                                            // (terminated)
		.almost_empty_data (),                                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                                        // (terminated)
		.out_startofpacket (),                                                                            // (terminated)
		.out_endofpacket   (),                                                                            // (terminated)
		.in_empty          (1'b0),                                                                        // (terminated)
		.out_empty         (),                                                                            // (terminated)
		.in_error          (1'b0),                                                                        // (terminated)
		.out_error         (),                                                                            // (terminated)
		.in_channel        (1'b0),                                                                        // (terminated)
		.out_channel       ()                                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) rowaddr_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                                                     //             clk.clk
		.reset                   (HPS_toMem_reset_reset_bridge_in_reset_reset),                                     //       clk_reset.reset
		.m0_address              (rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (rowaddr_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (rowaddr_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (rowaddr_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (rowaddr_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (rowaddr_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (rowaddr_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_012_source0_ready),                                                 //              cp.ready
		.cp_valid                (burst_adapter_012_source0_valid),                                                 //                .valid
		.cp_data                 (burst_adapter_012_source0_data),                                                  //                .data
		.cp_startofpacket        (burst_adapter_012_source0_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (burst_adapter_012_source0_endofpacket),                                           //                .endofpacket
		.cp_channel              (burst_adapter_012_source0_channel),                                               //                .channel
		.rf_sink_ready           (rowaddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (rowaddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (rowaddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (rowaddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (rowaddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (rowaddr_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (rowaddr_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (rowaddr_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (rowaddr_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (rowaddr_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (rowaddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (rowaddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (rowaddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (rowaddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rowaddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (rowaddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                           //     (terminated)
		.m0_writeresponserequest (),                                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rowaddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                                     //       clk.clk
		.reset             (HPS_toMem_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.in_data           (rowaddr_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (rowaddr_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (rowaddr_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (rowaddr_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (rowaddr_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (rowaddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (rowaddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (rowaddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (rowaddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (rowaddr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                           // (terminated)
		.csr_read          (1'b0),                                                                            // (terminated)
		.csr_write         (1'b0),                                                                            // (terminated)
		.csr_readdata      (),                                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                            // (terminated)
		.almost_full_data  (),                                                                                // (terminated)
		.almost_empty_data (),                                                                                // (terminated)
		.in_empty          (1'b0),                                                                            // (terminated)
		.out_empty         (),                                                                                // (terminated)
		.in_error          (1'b0),                                                                            // (terminated)
		.out_error         (),                                                                                // (terminated)
		.in_channel        (1'b0),                                                                            // (terminated)
		.out_channel       ()                                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rowaddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                               //       clk.clk
		.reset             (HPS_toMem_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.in_data           (rowaddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (rowaddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (rowaddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (rowaddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (rowaddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (rowaddr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                                      // (terminated)
		.out_startofpacket (),                                                                          // (terminated)
		.out_endofpacket   (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) coladdr_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                                                     //             clk.clk
		.reset                   (HPS_toMem_reset_reset_bridge_in_reset_reset),                                     //       clk_reset.reset
		.m0_address              (coladdr_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (coladdr_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (coladdr_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (coladdr_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (coladdr_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (coladdr_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (coladdr_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (coladdr_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (coladdr_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (coladdr_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (coladdr_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (coladdr_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (coladdr_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (coladdr_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (coladdr_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (coladdr_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_013_source0_ready),                                                 //              cp.ready
		.cp_valid                (burst_adapter_013_source0_valid),                                                 //                .valid
		.cp_data                 (burst_adapter_013_source0_data),                                                  //                .data
		.cp_startofpacket        (burst_adapter_013_source0_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (burst_adapter_013_source0_endofpacket),                                           //                .endofpacket
		.cp_channel              (burst_adapter_013_source0_channel),                                               //                .channel
		.rf_sink_ready           (coladdr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (coladdr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (coladdr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (coladdr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (coladdr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (coladdr_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (coladdr_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (coladdr_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (coladdr_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (coladdr_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (coladdr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (coladdr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (coladdr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (coladdr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (coladdr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (coladdr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                           //     (terminated)
		.m0_writeresponserequest (),                                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) coladdr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                                     //       clk.clk
		.reset             (HPS_toMem_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.in_data           (coladdr_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (coladdr_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (coladdr_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (coladdr_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (coladdr_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (coladdr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (coladdr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (coladdr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (coladdr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (coladdr_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                           // (terminated)
		.csr_read          (1'b0),                                                                            // (terminated)
		.csr_write         (1'b0),                                                                            // (terminated)
		.csr_readdata      (),                                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                            // (terminated)
		.almost_full_data  (),                                                                                // (terminated)
		.almost_empty_data (),                                                                                // (terminated)
		.in_empty          (1'b0),                                                                            // (terminated)
		.out_empty         (),                                                                                // (terminated)
		.in_error          (1'b0),                                                                            // (terminated)
		.out_error         (),                                                                                // (terminated)
		.in_channel        (1'b0),                                                                            // (terminated)
		.out_channel       ()                                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) coladdr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                               //       clk.clk
		.reset             (HPS_toMem_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.in_data           (coladdr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (coladdr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (coladdr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (coladdr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (coladdr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (coladdr_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                                      // (terminated)
		.out_startofpacket (),                                                                          // (terminated)
		.out_endofpacket   (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) row_read_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                                                      //             clk.clk
		.reset                   (HPS_toMem_reset_reset_bridge_in_reset_reset),                                      //       clk_reset.reset
		.m0_address              (row_read_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (row_read_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (row_read_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (row_read_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (row_read_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (row_read_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (row_read_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (row_read_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (row_read_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (row_read_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (row_read_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (row_read_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (row_read_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (row_read_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (row_read_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (row_read_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_014_source0_ready),                                                  //              cp.ready
		.cp_valid                (burst_adapter_014_source0_valid),                                                  //                .valid
		.cp_data                 (burst_adapter_014_source0_data),                                                   //                .data
		.cp_startofpacket        (burst_adapter_014_source0_startofpacket),                                          //                .startofpacket
		.cp_endofpacket          (burst_adapter_014_source0_endofpacket),                                            //                .endofpacket
		.cp_channel              (burst_adapter_014_source0_channel),                                                //                .channel
		.rf_sink_ready           (row_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (row_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (row_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (row_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (row_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (row_read_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (row_read_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (row_read_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (row_read_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (row_read_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (row_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (row_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (row_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (row_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (row_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (row_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                            //     (terminated)
		.m0_writeresponserequest (),                                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) row_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                                      //       clk.clk
		.reset             (HPS_toMem_reset_reset_bridge_in_reset_reset),                                      // clk_reset.reset
		.in_data           (row_read_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (row_read_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (row_read_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (row_read_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (row_read_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (row_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (row_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (row_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (row_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (row_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                            // (terminated)
		.csr_read          (1'b0),                                                                             // (terminated)
		.csr_write         (1'b0),                                                                             // (terminated)
		.csr_readdata      (),                                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                             // (terminated)
		.almost_full_data  (),                                                                                 // (terminated)
		.almost_empty_data (),                                                                                 // (terminated)
		.in_empty          (1'b0),                                                                             // (terminated)
		.out_empty         (),                                                                                 // (terminated)
		.in_error          (1'b0),                                                                             // (terminated)
		.out_error         (),                                                                                 // (terminated)
		.in_channel        (1'b0),                                                                             // (terminated)
		.out_channel       ()                                                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) row_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                                //       clk.clk
		.reset             (HPS_toMem_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_data           (row_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (row_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (row_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (row_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (row_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (row_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                      // (terminated)
		.csr_read          (1'b0),                                                                       // (terminated)
		.csr_write         (1'b0),                                                                       // (terminated)
		.csr_readdata      (),                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                       // (terminated)
		.almost_full_data  (),                                                                           // (terminated)
		.almost_empty_data (),                                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                                       // (terminated)
		.out_startofpacket (),                                                                           // (terminated)
		.out_endofpacket   (),                                                                           // (terminated)
		.in_empty          (1'b0),                                                                       // (terminated)
		.out_empty         (),                                                                           // (terminated)
		.in_error          (1'b0),                                                                       // (terminated)
		.out_error         (),                                                                           // (terminated)
		.in_channel        (1'b0),                                                                       // (terminated)
		.out_channel       ()                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (84),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) col_read_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                                                      //             clk.clk
		.reset                   (HPS_toMem_reset_reset_bridge_in_reset_reset),                                      //       clk_reset.reset
		.m0_address              (col_read_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (col_read_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (col_read_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (col_read_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (col_read_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (col_read_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (col_read_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (col_read_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (col_read_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (col_read_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (col_read_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (col_read_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (col_read_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (col_read_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (col_read_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (col_read_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_015_source0_ready),                                                  //              cp.ready
		.cp_valid                (burst_adapter_015_source0_valid),                                                  //                .valid
		.cp_data                 (burst_adapter_015_source0_data),                                                   //                .data
		.cp_startofpacket        (burst_adapter_015_source0_startofpacket),                                          //                .startofpacket
		.cp_endofpacket          (burst_adapter_015_source0_endofpacket),                                            //                .endofpacket
		.cp_channel              (burst_adapter_015_source0_channel),                                                //                .channel
		.rf_sink_ready           (col_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (col_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (col_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (col_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (col_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (col_read_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (col_read_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (col_read_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (col_read_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (col_read_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (col_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (col_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (col_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (col_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (col_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (col_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                            //     (terminated)
		.m0_writeresponserequest (),                                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) col_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                                      //       clk.clk
		.reset             (HPS_toMem_reset_reset_bridge_in_reset_reset),                                      // clk_reset.reset
		.in_data           (col_read_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (col_read_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (col_read_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (col_read_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (col_read_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (col_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (col_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (col_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (col_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (col_read_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                            // (terminated)
		.csr_read          (1'b0),                                                                             // (terminated)
		.csr_write         (1'b0),                                                                             // (terminated)
		.csr_readdata      (),                                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                             // (terminated)
		.almost_full_data  (),                                                                                 // (terminated)
		.almost_empty_data (),                                                                                 // (terminated)
		.in_empty          (1'b0),                                                                             // (terminated)
		.out_empty         (),                                                                                 // (terminated)
		.in_error          (1'b0),                                                                             // (terminated)
		.out_error         (),                                                                                 // (terminated)
		.in_channel        (1'b0),                                                                             // (terminated)
		.out_channel       ()                                                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) col_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                                //       clk.clk
		.reset             (HPS_toMem_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_data           (col_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (col_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (col_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (col_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (col_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (col_read_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                      // (terminated)
		.csr_read          (1'b0),                                                                       // (terminated)
		.csr_write         (1'b0),                                                                       // (terminated)
		.csr_readdata      (),                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                       // (terminated)
		.almost_full_data  (),                                                                           // (terminated)
		.almost_empty_data (),                                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                                       // (terminated)
		.out_startofpacket (),                                                                           // (terminated)
		.out_endofpacket   (),                                                                           // (terminated)
		.in_empty          (1'b0),                                                                       // (terminated)
		.out_empty         (),                                                                           // (terminated)
		.in_error          (1'b0),                                                                       // (terminated)
		.out_error         (),                                                                           // (terminated)
		.in_channel        (1'b0),                                                                       // (terminated)
		.out_channel       ()                                                                            // (terminated)
	);

	mysystem_mm_interconnect_0_addr_router addr_router (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                         //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (addr_router_src_ready),                                               //       src.ready
		.src_valid          (addr_router_src_valid),                                               //          .valid
		.src_data           (addr_router_src_data),                                                //          .data
		.src_channel        (addr_router_src_channel),                                             //          .channel
		.src_startofpacket  (addr_router_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (addr_router_src_endofpacket)                                          //          .endofpacket
	);

	mysystem_mm_interconnect_0_addr_router addr_router_001 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                         //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (addr_router_001_src_ready),                                           //       src.ready
		.src_valid          (addr_router_001_src_valid),                                           //          .valid
		.src_data           (addr_router_001_src_data),                                            //          .data
		.src_channel        (addr_router_001_src_channel),                                         //          .channel
		.src_startofpacket  (addr_router_001_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket    (addr_router_001_src_endofpacket)                                      //          .endofpacket
	);

	mysystem_mm_interconnect_0_id_router id_router (
		.sink_ready         (start_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (start_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (start_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (start_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (start_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                         //       clk.clk
		.reset              (start_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready          (id_router_src_ready),                                                 //       src.ready
		.src_valid          (id_router_src_valid),                                                 //          .valid
		.src_data           (id_router_src_data),                                                  //          .data
		.src_channel        (id_router_src_channel),                                               //          .channel
		.src_startofpacket  (id_router_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (id_router_src_endofpacket)                                            //          .endofpacket
	);

	mysystem_mm_interconnect_0_id_router id_router_001 (
		.sink_ready         (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_0_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                                              //       clk.clk
		.reset              (start_reset_reset_bridge_in_reset_reset),                                                  // clk_reset.reset
		.src_ready          (id_router_001_src_ready),                                                                  //       src.ready
		.src_valid          (id_router_001_src_valid),                                                                  //          .valid
		.src_data           (id_router_001_src_data),                                                                   //          .data
		.src_channel        (id_router_001_src_channel),                                                                //          .channel
		.src_startofpacket  (id_router_001_src_startofpacket),                                                          //          .startofpacket
		.src_endofpacket    (id_router_001_src_endofpacket)                                                             //          .endofpacket
	);

	mysystem_mm_interconnect_0_id_router id_router_002 (
		.sink_ready         (rowdata_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (rowdata_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (rowdata_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (rowdata_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (rowdata_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                           //       clk.clk
		.reset              (start_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.src_ready          (id_router_002_src_ready),                                               //       src.ready
		.src_valid          (id_router_002_src_valid),                                               //          .valid
		.src_data           (id_router_002_src_data),                                                //          .data
		.src_channel        (id_router_002_src_channel),                                             //          .channel
		.src_startofpacket  (id_router_002_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (id_router_002_src_endofpacket)                                          //          .endofpacket
	);

	mysystem_mm_interconnect_0_id_router id_router_003 (
		.sink_ready         (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (verilog_ack_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                               //       clk.clk
		.reset              (start_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.src_ready          (id_router_003_src_ready),                                                   //       src.ready
		.src_valid          (id_router_003_src_valid),                                                   //          .valid
		.src_data           (id_router_003_src_data),                                                    //          .data
		.src_channel        (id_router_003_src_channel),                                                 //          .channel
		.src_startofpacket  (id_router_003_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket    (id_router_003_src_endofpacket)                                              //          .endofpacket
	);

	mysystem_mm_interconnect_0_id_router id_router_004 (
		.sink_ready         (imagedata_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (imagedata_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (imagedata_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (imagedata_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (imagedata_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                             //       clk.clk
		.reset              (start_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.src_ready          (id_router_004_src_ready),                                                 //       src.ready
		.src_valid          (id_router_004_src_valid),                                                 //          .valid
		.src_data           (id_router_004_src_data),                                                  //          .data
		.src_channel        (id_router_004_src_channel),                                               //          .channel
		.src_startofpacket  (id_router_004_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (id_router_004_src_endofpacket)                                            //          .endofpacket
	);

	mysystem_mm_interconnect_0_id_router id_router_005 (
		.sink_ready         (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hps_tomem_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                             //       clk.clk
		.reset              (HPS_toMem_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready          (id_router_005_src_ready),                                                 //       src.ready
		.src_valid          (id_router_005_src_valid),                                                 //          .valid
		.src_data           (id_router_005_src_data),                                                  //          .data
		.src_channel        (id_router_005_src_channel),                                               //          .channel
		.src_startofpacket  (id_router_005_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (id_router_005_src_endofpacket)                                            //          .endofpacket
	);

	mysystem_mm_interconnect_0_id_router id_router_006 (
		.sink_ready         (hps_digits_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (hps_digits_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (hps_digits_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (hps_digits_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hps_digits_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                              //       clk.clk
		.reset              (HPS_toMem_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.src_ready          (id_router_006_src_ready),                                                  //       src.ready
		.src_valid          (id_router_006_src_valid),                                                  //          .valid
		.src_data           (id_router_006_src_data),                                                   //          .data
		.src_channel        (id_router_006_src_channel),                                                //          .channel
		.src_startofpacket  (id_router_006_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (id_router_006_src_endofpacket)                                             //          .endofpacket
	);

	mysystem_mm_interconnect_0_id_router id_router_007 (
		.sink_ready         (hps_state_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (hps_state_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (hps_state_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (hps_state_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hps_state_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                             //       clk.clk
		.reset              (HPS_toMem_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready          (id_router_007_src_ready),                                                 //       src.ready
		.src_valid          (id_router_007_src_valid),                                                 //          .valid
		.src_data           (id_router_007_src_data),                                                  //          .data
		.src_channel        (id_router_007_src_channel),                                               //          .channel
		.src_startofpacket  (id_router_007_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (id_router_007_src_endofpacket)                                            //          .endofpacket
	);

	mysystem_mm_interconnect_0_id_router id_router_008 (
		.sink_ready         (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hps_frommem_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                               //       clk.clk
		.reset              (HPS_toMem_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.src_ready          (id_router_008_src_ready),                                                   //       src.ready
		.src_valid          (id_router_008_src_valid),                                                   //          .valid
		.src_data           (id_router_008_src_data),                                                    //          .data
		.src_channel        (id_router_008_src_channel),                                                 //          .channel
		.src_startofpacket  (id_router_008_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket    (id_router_008_src_endofpacket)                                              //          .endofpacket
	);

	mysystem_mm_interconnect_0_id_router id_router_009 (
		.sink_ready         (hps_clk_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (hps_clk_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (hps_clk_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (hps_clk_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hps_clk_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                           //       clk.clk
		.reset              (HPS_toMem_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.src_ready          (id_router_009_src_ready),                                               //       src.ready
		.src_valid          (id_router_009_src_valid),                                               //          .valid
		.src_data           (id_router_009_src_data),                                                //          .data
		.src_channel        (id_router_009_src_channel),                                             //          .channel
		.src_startofpacket  (id_router_009_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (id_router_009_src_endofpacket)                                          //          .endofpacket
	);

	mysystem_mm_interconnect_0_id_router id_router_010 (
		.sink_ready         (coldata_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (coldata_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (coldata_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (coldata_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (coldata_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                           //       clk.clk
		.reset              (start_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.src_ready          (id_router_010_src_ready),                                               //       src.ready
		.src_valid          (id_router_010_src_valid),                                               //          .valid
		.src_data           (id_router_010_src_data),                                                //          .data
		.src_channel        (id_router_010_src_channel),                                             //          .channel
		.src_startofpacket  (id_router_010_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (id_router_010_src_endofpacket)                                          //          .endofpacket
	);

	mysystem_mm_interconnect_0_id_router id_router_011 (
		.sink_ready         (readwrite_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (readwrite_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (readwrite_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (readwrite_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (readwrite_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                             //       clk.clk
		.reset              (HPS_toMem_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready          (id_router_011_src_ready),                                                 //       src.ready
		.src_valid          (id_router_011_src_valid),                                                 //          .valid
		.src_data           (id_router_011_src_data),                                                  //          .data
		.src_channel        (id_router_011_src_channel),                                               //          .channel
		.src_startofpacket  (id_router_011_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (id_router_011_src_endofpacket)                                            //          .endofpacket
	);

	mysystem_mm_interconnect_0_id_router id_router_012 (
		.sink_ready         (rowaddr_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (rowaddr_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (rowaddr_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (rowaddr_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (rowaddr_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                           //       clk.clk
		.reset              (HPS_toMem_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.src_ready          (id_router_012_src_ready),                                               //       src.ready
		.src_valid          (id_router_012_src_valid),                                               //          .valid
		.src_data           (id_router_012_src_data),                                                //          .data
		.src_channel        (id_router_012_src_channel),                                             //          .channel
		.src_startofpacket  (id_router_012_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (id_router_012_src_endofpacket)                                          //          .endofpacket
	);

	mysystem_mm_interconnect_0_id_router id_router_013 (
		.sink_ready         (coladdr_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (coladdr_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (coladdr_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (coladdr_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (coladdr_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                           //       clk.clk
		.reset              (HPS_toMem_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.src_ready          (id_router_013_src_ready),                                               //       src.ready
		.src_valid          (id_router_013_src_valid),                                               //          .valid
		.src_data           (id_router_013_src_data),                                                //          .data
		.src_channel        (id_router_013_src_channel),                                             //          .channel
		.src_startofpacket  (id_router_013_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (id_router_013_src_endofpacket)                                          //          .endofpacket
	);

	mysystem_mm_interconnect_0_id_router id_router_014 (
		.sink_ready         (row_read_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (row_read_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (row_read_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (row_read_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (row_read_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                            //       clk.clk
		.reset              (HPS_toMem_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.src_ready          (id_router_014_src_ready),                                                //       src.ready
		.src_valid          (id_router_014_src_valid),                                                //          .valid
		.src_data           (id_router_014_src_data),                                                 //          .data
		.src_channel        (id_router_014_src_channel),                                              //          .channel
		.src_startofpacket  (id_router_014_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (id_router_014_src_endofpacket)                                           //          .endofpacket
	);

	mysystem_mm_interconnect_0_id_router id_router_015 (
		.sink_ready         (col_read_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (col_read_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (col_read_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (col_read_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (col_read_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                            //       clk.clk
		.reset              (HPS_toMem_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.src_ready          (id_router_015_src_ready),                                                //       src.ready
		.src_valid          (id_router_015_src_valid),                                                //          .valid
		.src_data           (id_router_015_src_data),                                                 //          .data
		.src_channel        (id_router_015_src_channel),                                              //          .channel
		.src_startofpacket  (id_router_015_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (id_router_015_src_endofpacket)                                           //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (16),
		.VALID_WIDTH               (16),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) limiter (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                                         //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (addr_router_src_ready),                                               //  cmd_sink.ready
		.cmd_sink_valid         (addr_router_src_valid),                                               //          .valid
		.cmd_sink_data          (addr_router_src_data),                                                //          .data
		.cmd_sink_channel       (addr_router_src_channel),                                             //          .channel
		.cmd_sink_startofpacket (addr_router_src_startofpacket),                                       //          .startofpacket
		.cmd_sink_endofpacket   (addr_router_src_endofpacket),                                         //          .endofpacket
		.cmd_src_ready          (limiter_cmd_src_ready),                                               //   cmd_src.ready
		.cmd_src_data           (limiter_cmd_src_data),                                                //          .data
		.cmd_src_channel        (limiter_cmd_src_channel),                                             //          .channel
		.cmd_src_startofpacket  (limiter_cmd_src_startofpacket),                                       //          .startofpacket
		.cmd_src_endofpacket    (limiter_cmd_src_endofpacket),                                         //          .endofpacket
		.rsp_sink_ready         (rsp_xbar_mux_src_ready),                                              //  rsp_sink.ready
		.rsp_sink_valid         (rsp_xbar_mux_src_valid),                                              //          .valid
		.rsp_sink_channel       (rsp_xbar_mux_src_channel),                                            //          .channel
		.rsp_sink_data          (rsp_xbar_mux_src_data),                                               //          .data
		.rsp_sink_startofpacket (rsp_xbar_mux_src_startofpacket),                                      //          .startofpacket
		.rsp_sink_endofpacket   (rsp_xbar_mux_src_endofpacket),                                        //          .endofpacket
		.rsp_src_ready          (limiter_rsp_src_ready),                                               //   rsp_src.ready
		.rsp_src_valid          (limiter_rsp_src_valid),                                               //          .valid
		.rsp_src_data           (limiter_rsp_src_data),                                                //          .data
		.rsp_src_channel        (limiter_rsp_src_channel),                                             //          .channel
		.rsp_src_startofpacket  (limiter_rsp_src_startofpacket),                                       //          .startofpacket
		.rsp_src_endofpacket    (limiter_rsp_src_endofpacket),                                         //          .endofpacket
		.cmd_src_valid          (limiter_cmd_valid_data)                                               // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (16),
		.VALID_WIDTH               (16),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) limiter_001 (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                                         //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (addr_router_001_src_ready),                                           //  cmd_sink.ready
		.cmd_sink_valid         (addr_router_001_src_valid),                                           //          .valid
		.cmd_sink_data          (addr_router_001_src_data),                                            //          .data
		.cmd_sink_channel       (addr_router_001_src_channel),                                         //          .channel
		.cmd_sink_startofpacket (addr_router_001_src_startofpacket),                                   //          .startofpacket
		.cmd_sink_endofpacket   (addr_router_001_src_endofpacket),                                     //          .endofpacket
		.cmd_src_ready          (limiter_001_cmd_src_ready),                                           //   cmd_src.ready
		.cmd_src_data           (limiter_001_cmd_src_data),                                            //          .data
		.cmd_src_channel        (limiter_001_cmd_src_channel),                                         //          .channel
		.cmd_src_startofpacket  (limiter_001_cmd_src_startofpacket),                                   //          .startofpacket
		.cmd_src_endofpacket    (limiter_001_cmd_src_endofpacket),                                     //          .endofpacket
		.rsp_sink_ready         (rsp_xbar_mux_001_src_ready),                                          //  rsp_sink.ready
		.rsp_sink_valid         (rsp_xbar_mux_001_src_valid),                                          //          .valid
		.rsp_sink_channel       (rsp_xbar_mux_001_src_channel),                                        //          .channel
		.rsp_sink_data          (rsp_xbar_mux_001_src_data),                                           //          .data
		.rsp_sink_startofpacket (rsp_xbar_mux_001_src_startofpacket),                                  //          .startofpacket
		.rsp_sink_endofpacket   (rsp_xbar_mux_001_src_endofpacket),                                    //          .endofpacket
		.rsp_src_ready          (limiter_001_rsp_src_ready),                                           //   rsp_src.ready
		.rsp_src_valid          (limiter_001_rsp_src_valid),                                           //          .valid
		.rsp_src_data           (limiter_001_rsp_src_data),                                            //          .data
		.rsp_src_channel        (limiter_001_rsp_src_channel),                                         //          .channel
		.rsp_src_startofpacket  (limiter_001_rsp_src_startofpacket),                                   //          .startofpacket
		.rsp_src_endofpacket    (limiter_001_rsp_src_endofpacket),                                     //          .endofpacket
		.cmd_src_valid          (limiter_001_cmd_valid_data)                                           // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),             //       cr0.clk
		.reset                 (start_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_src_valid),                  //     sink0.valid
		.sink0_data            (cmd_xbar_mux_src_data),                   //          .data
		.sink0_channel         (cmd_xbar_mux_src_channel),                //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_src_startofpacket),          //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_src_endofpacket),            //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_src_ready),                  //          .ready
		.source0_valid         (burst_adapter_source0_valid),             //   source0.valid
		.source0_data          (burst_adapter_source0_data),              //          .data
		.source0_channel       (burst_adapter_source0_channel),           //          .channel
		.source0_startofpacket (burst_adapter_source0_startofpacket),     //          .startofpacket
		.source0_endofpacket   (burst_adapter_source0_endofpacket),       //          .endofpacket
		.source0_ready         (burst_adapter_source0_ready)              //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_001 (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),             //       cr0.clk
		.reset                 (start_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_001_src_valid),              //     sink0.valid
		.sink0_data            (cmd_xbar_mux_001_src_data),               //          .data
		.sink0_channel         (cmd_xbar_mux_001_src_channel),            //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_001_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_001_src_endofpacket),        //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_001_src_ready),              //          .ready
		.source0_valid         (burst_adapter_001_source0_valid),         //   source0.valid
		.source0_data          (burst_adapter_001_source0_data),          //          .data
		.source0_channel       (burst_adapter_001_source0_channel),       //          .channel
		.source0_startofpacket (burst_adapter_001_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (burst_adapter_001_source0_endofpacket),   //          .endofpacket
		.source0_ready         (burst_adapter_001_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_002 (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),             //       cr0.clk
		.reset                 (start_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_002_src_valid),              //     sink0.valid
		.sink0_data            (cmd_xbar_mux_002_src_data),               //          .data
		.sink0_channel         (cmd_xbar_mux_002_src_channel),            //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_002_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_002_src_endofpacket),        //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_002_src_ready),              //          .ready
		.source0_valid         (burst_adapter_002_source0_valid),         //   source0.valid
		.source0_data          (burst_adapter_002_source0_data),          //          .data
		.source0_channel       (burst_adapter_002_source0_channel),       //          .channel
		.source0_startofpacket (burst_adapter_002_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (burst_adapter_002_source0_endofpacket),   //          .endofpacket
		.source0_ready         (burst_adapter_002_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_003 (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),             //       cr0.clk
		.reset                 (start_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_003_src_valid),              //     sink0.valid
		.sink0_data            (cmd_xbar_mux_003_src_data),               //          .data
		.sink0_channel         (cmd_xbar_mux_003_src_channel),            //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_003_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_003_src_endofpacket),        //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_003_src_ready),              //          .ready
		.source0_valid         (burst_adapter_003_source0_valid),         //   source0.valid
		.source0_data          (burst_adapter_003_source0_data),          //          .data
		.source0_channel       (burst_adapter_003_source0_channel),       //          .channel
		.source0_startofpacket (burst_adapter_003_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (burst_adapter_003_source0_endofpacket),   //          .endofpacket
		.source0_ready         (burst_adapter_003_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_004 (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),             //       cr0.clk
		.reset                 (start_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_004_src_valid),              //     sink0.valid
		.sink0_data            (cmd_xbar_mux_004_src_data),               //          .data
		.sink0_channel         (cmd_xbar_mux_004_src_channel),            //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_004_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_004_src_endofpacket),        //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_004_src_ready),              //          .ready
		.source0_valid         (burst_adapter_004_source0_valid),         //   source0.valid
		.source0_data          (burst_adapter_004_source0_data),          //          .data
		.source0_channel       (burst_adapter_004_source0_channel),       //          .channel
		.source0_startofpacket (burst_adapter_004_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (burst_adapter_004_source0_endofpacket),   //          .endofpacket
		.source0_ready         (burst_adapter_004_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_005 (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),                 //       cr0.clk
		.reset                 (HPS_toMem_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_005_src_valid),                  //     sink0.valid
		.sink0_data            (cmd_xbar_mux_005_src_data),                   //          .data
		.sink0_channel         (cmd_xbar_mux_005_src_channel),                //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_005_src_startofpacket),          //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_005_src_endofpacket),            //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_005_src_ready),                  //          .ready
		.source0_valid         (burst_adapter_005_source0_valid),             //   source0.valid
		.source0_data          (burst_adapter_005_source0_data),              //          .data
		.source0_channel       (burst_adapter_005_source0_channel),           //          .channel
		.source0_startofpacket (burst_adapter_005_source0_startofpacket),     //          .startofpacket
		.source0_endofpacket   (burst_adapter_005_source0_endofpacket),       //          .endofpacket
		.source0_ready         (burst_adapter_005_source0_ready)              //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_006 (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),                 //       cr0.clk
		.reset                 (HPS_toMem_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_006_src_valid),                  //     sink0.valid
		.sink0_data            (cmd_xbar_mux_006_src_data),                   //          .data
		.sink0_channel         (cmd_xbar_mux_006_src_channel),                //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_006_src_startofpacket),          //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_006_src_endofpacket),            //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_006_src_ready),                  //          .ready
		.source0_valid         (burst_adapter_006_source0_valid),             //   source0.valid
		.source0_data          (burst_adapter_006_source0_data),              //          .data
		.source0_channel       (burst_adapter_006_source0_channel),           //          .channel
		.source0_startofpacket (burst_adapter_006_source0_startofpacket),     //          .startofpacket
		.source0_endofpacket   (burst_adapter_006_source0_endofpacket),       //          .endofpacket
		.source0_ready         (burst_adapter_006_source0_ready)              //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_007 (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),                 //       cr0.clk
		.reset                 (HPS_toMem_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_007_src_valid),                  //     sink0.valid
		.sink0_data            (cmd_xbar_mux_007_src_data),                   //          .data
		.sink0_channel         (cmd_xbar_mux_007_src_channel),                //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_007_src_startofpacket),          //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_007_src_endofpacket),            //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_007_src_ready),                  //          .ready
		.source0_valid         (burst_adapter_007_source0_valid),             //   source0.valid
		.source0_data          (burst_adapter_007_source0_data),              //          .data
		.source0_channel       (burst_adapter_007_source0_channel),           //          .channel
		.source0_startofpacket (burst_adapter_007_source0_startofpacket),     //          .startofpacket
		.source0_endofpacket   (burst_adapter_007_source0_endofpacket),       //          .endofpacket
		.source0_ready         (burst_adapter_007_source0_ready)              //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_008 (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),                 //       cr0.clk
		.reset                 (HPS_toMem_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_008_src_valid),                  //     sink0.valid
		.sink0_data            (cmd_xbar_mux_008_src_data),                   //          .data
		.sink0_channel         (cmd_xbar_mux_008_src_channel),                //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_008_src_startofpacket),          //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_008_src_endofpacket),            //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_008_src_ready),                  //          .ready
		.source0_valid         (burst_adapter_008_source0_valid),             //   source0.valid
		.source0_data          (burst_adapter_008_source0_data),              //          .data
		.source0_channel       (burst_adapter_008_source0_channel),           //          .channel
		.source0_startofpacket (burst_adapter_008_source0_startofpacket),     //          .startofpacket
		.source0_endofpacket   (burst_adapter_008_source0_endofpacket),       //          .endofpacket
		.source0_ready         (burst_adapter_008_source0_ready)              //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_009 (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),                 //       cr0.clk
		.reset                 (HPS_toMem_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_009_src_valid),                  //     sink0.valid
		.sink0_data            (cmd_xbar_mux_009_src_data),                   //          .data
		.sink0_channel         (cmd_xbar_mux_009_src_channel),                //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_009_src_startofpacket),          //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_009_src_endofpacket),            //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_009_src_ready),                  //          .ready
		.source0_valid         (burst_adapter_009_source0_valid),             //   source0.valid
		.source0_data          (burst_adapter_009_source0_data),              //          .data
		.source0_channel       (burst_adapter_009_source0_channel),           //          .channel
		.source0_startofpacket (burst_adapter_009_source0_startofpacket),     //          .startofpacket
		.source0_endofpacket   (burst_adapter_009_source0_endofpacket),       //          .endofpacket
		.source0_ready         (burst_adapter_009_source0_ready)              //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_010 (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),             //       cr0.clk
		.reset                 (start_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_010_src_valid),              //     sink0.valid
		.sink0_data            (cmd_xbar_mux_010_src_data),               //          .data
		.sink0_channel         (cmd_xbar_mux_010_src_channel),            //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_010_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_010_src_endofpacket),        //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_010_src_ready),              //          .ready
		.source0_valid         (burst_adapter_010_source0_valid),         //   source0.valid
		.source0_data          (burst_adapter_010_source0_data),          //          .data
		.source0_channel       (burst_adapter_010_source0_channel),       //          .channel
		.source0_startofpacket (burst_adapter_010_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (burst_adapter_010_source0_endofpacket),   //          .endofpacket
		.source0_ready         (burst_adapter_010_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_011 (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),                 //       cr0.clk
		.reset                 (HPS_toMem_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_011_src_valid),                  //     sink0.valid
		.sink0_data            (cmd_xbar_mux_011_src_data),                   //          .data
		.sink0_channel         (cmd_xbar_mux_011_src_channel),                //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_011_src_startofpacket),          //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_011_src_endofpacket),            //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_011_src_ready),                  //          .ready
		.source0_valid         (burst_adapter_011_source0_valid),             //   source0.valid
		.source0_data          (burst_adapter_011_source0_data),              //          .data
		.source0_channel       (burst_adapter_011_source0_channel),           //          .channel
		.source0_startofpacket (burst_adapter_011_source0_startofpacket),     //          .startofpacket
		.source0_endofpacket   (burst_adapter_011_source0_endofpacket),       //          .endofpacket
		.source0_ready         (burst_adapter_011_source0_ready)              //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_012 (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),                 //       cr0.clk
		.reset                 (HPS_toMem_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_012_src_valid),                  //     sink0.valid
		.sink0_data            (cmd_xbar_mux_012_src_data),                   //          .data
		.sink0_channel         (cmd_xbar_mux_012_src_channel),                //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_012_src_startofpacket),          //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_012_src_endofpacket),            //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_012_src_ready),                  //          .ready
		.source0_valid         (burst_adapter_012_source0_valid),             //   source0.valid
		.source0_data          (burst_adapter_012_source0_data),              //          .data
		.source0_channel       (burst_adapter_012_source0_channel),           //          .channel
		.source0_startofpacket (burst_adapter_012_source0_startofpacket),     //          .startofpacket
		.source0_endofpacket   (burst_adapter_012_source0_endofpacket),       //          .endofpacket
		.source0_ready         (burst_adapter_012_source0_ready)              //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_013 (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),                 //       cr0.clk
		.reset                 (HPS_toMem_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_013_src_valid),                  //     sink0.valid
		.sink0_data            (cmd_xbar_mux_013_src_data),                   //          .data
		.sink0_channel         (cmd_xbar_mux_013_src_channel),                //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_013_src_startofpacket),          //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_013_src_endofpacket),            //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_013_src_ready),                  //          .ready
		.source0_valid         (burst_adapter_013_source0_valid),             //   source0.valid
		.source0_data          (burst_adapter_013_source0_data),              //          .data
		.source0_channel       (burst_adapter_013_source0_channel),           //          .channel
		.source0_startofpacket (burst_adapter_013_source0_startofpacket),     //          .startofpacket
		.source0_endofpacket   (burst_adapter_013_source0_endofpacket),       //          .endofpacket
		.source0_ready         (burst_adapter_013_source0_ready)              //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_014 (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),                 //       cr0.clk
		.reset                 (HPS_toMem_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_014_src_valid),                  //     sink0.valid
		.sink0_data            (cmd_xbar_mux_014_src_data),                   //          .data
		.sink0_channel         (cmd_xbar_mux_014_src_channel),                //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_014_src_startofpacket),          //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_014_src_endofpacket),            //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_014_src_ready),                  //          .ready
		.source0_valid         (burst_adapter_014_source0_valid),             //   source0.valid
		.source0_data          (burst_adapter_014_source0_data),              //          .data
		.source0_channel       (burst_adapter_014_source0_channel),           //          .channel
		.source0_startofpacket (burst_adapter_014_source0_startofpacket),     //          .startofpacket
		.source0_endofpacket   (burst_adapter_014_source0_endofpacket),       //          .endofpacket
		.source0_ready         (burst_adapter_014_source0_ready)              //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_015 (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),                 //       cr0.clk
		.reset                 (HPS_toMem_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_015_src_valid),                  //     sink0.valid
		.sink0_data            (cmd_xbar_mux_015_src_data),                   //          .data
		.sink0_channel         (cmd_xbar_mux_015_src_channel),                //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_015_src_startofpacket),          //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_015_src_endofpacket),            //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_015_src_ready),                  //          .ready
		.source0_valid         (burst_adapter_015_source0_valid),             //   source0.valid
		.source0_data          (burst_adapter_015_source0_data),              //          .data
		.source0_channel       (burst_adapter_015_source0_channel),           //          .channel
		.source0_startofpacket (burst_adapter_015_source0_startofpacket),     //          .startofpacket
		.source0_endofpacket   (burst_adapter_015_source0_endofpacket),       //          .endofpacket
		.source0_ready         (burst_adapter_015_source0_ready)              //          .ready
	);

	mysystem_mm_interconnect_0_cmd_xbar_demux cmd_xbar_demux (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                                         //        clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (limiter_cmd_src_ready),                                               //       sink.ready
		.sink_channel        (limiter_cmd_src_channel),                                             //           .channel
		.sink_data           (limiter_cmd_src_data),                                                //           .data
		.sink_startofpacket  (limiter_cmd_src_startofpacket),                                       //           .startofpacket
		.sink_endofpacket    (limiter_cmd_src_endofpacket),                                         //           .endofpacket
		.sink_valid          (limiter_cmd_valid_data),                                              // sink_valid.data
		.src0_ready          (cmd_xbar_demux_src0_ready),                                           //       src0.ready
		.src0_valid          (cmd_xbar_demux_src0_valid),                                           //           .valid
		.src0_data           (cmd_xbar_demux_src0_data),                                            //           .data
		.src0_channel        (cmd_xbar_demux_src0_channel),                                         //           .channel
		.src0_startofpacket  (cmd_xbar_demux_src0_startofpacket),                                   //           .startofpacket
		.src0_endofpacket    (cmd_xbar_demux_src0_endofpacket),                                     //           .endofpacket
		.src1_ready          (cmd_xbar_demux_src1_ready),                                           //       src1.ready
		.src1_valid          (cmd_xbar_demux_src1_valid),                                           //           .valid
		.src1_data           (cmd_xbar_demux_src1_data),                                            //           .data
		.src1_channel        (cmd_xbar_demux_src1_channel),                                         //           .channel
		.src1_startofpacket  (cmd_xbar_demux_src1_startofpacket),                                   //           .startofpacket
		.src1_endofpacket    (cmd_xbar_demux_src1_endofpacket),                                     //           .endofpacket
		.src2_ready          (cmd_xbar_demux_src2_ready),                                           //       src2.ready
		.src2_valid          (cmd_xbar_demux_src2_valid),                                           //           .valid
		.src2_data           (cmd_xbar_demux_src2_data),                                            //           .data
		.src2_channel        (cmd_xbar_demux_src2_channel),                                         //           .channel
		.src2_startofpacket  (cmd_xbar_demux_src2_startofpacket),                                   //           .startofpacket
		.src2_endofpacket    (cmd_xbar_demux_src2_endofpacket),                                     //           .endofpacket
		.src3_ready          (cmd_xbar_demux_src3_ready),                                           //       src3.ready
		.src3_valid          (cmd_xbar_demux_src3_valid),                                           //           .valid
		.src3_data           (cmd_xbar_demux_src3_data),                                            //           .data
		.src3_channel        (cmd_xbar_demux_src3_channel),                                         //           .channel
		.src3_startofpacket  (cmd_xbar_demux_src3_startofpacket),                                   //           .startofpacket
		.src3_endofpacket    (cmd_xbar_demux_src3_endofpacket),                                     //           .endofpacket
		.src4_ready          (cmd_xbar_demux_src4_ready),                                           //       src4.ready
		.src4_valid          (cmd_xbar_demux_src4_valid),                                           //           .valid
		.src4_data           (cmd_xbar_demux_src4_data),                                            //           .data
		.src4_channel        (cmd_xbar_demux_src4_channel),                                         //           .channel
		.src4_startofpacket  (cmd_xbar_demux_src4_startofpacket),                                   //           .startofpacket
		.src4_endofpacket    (cmd_xbar_demux_src4_endofpacket),                                     //           .endofpacket
		.src5_ready          (cmd_xbar_demux_src5_ready),                                           //       src5.ready
		.src5_valid          (cmd_xbar_demux_src5_valid),                                           //           .valid
		.src5_data           (cmd_xbar_demux_src5_data),                                            //           .data
		.src5_channel        (cmd_xbar_demux_src5_channel),                                         //           .channel
		.src5_startofpacket  (cmd_xbar_demux_src5_startofpacket),                                   //           .startofpacket
		.src5_endofpacket    (cmd_xbar_demux_src5_endofpacket),                                     //           .endofpacket
		.src6_ready          (cmd_xbar_demux_src6_ready),                                           //       src6.ready
		.src6_valid          (cmd_xbar_demux_src6_valid),                                           //           .valid
		.src6_data           (cmd_xbar_demux_src6_data),                                            //           .data
		.src6_channel        (cmd_xbar_demux_src6_channel),                                         //           .channel
		.src6_startofpacket  (cmd_xbar_demux_src6_startofpacket),                                   //           .startofpacket
		.src6_endofpacket    (cmd_xbar_demux_src6_endofpacket),                                     //           .endofpacket
		.src7_ready          (cmd_xbar_demux_src7_ready),                                           //       src7.ready
		.src7_valid          (cmd_xbar_demux_src7_valid),                                           //           .valid
		.src7_data           (cmd_xbar_demux_src7_data),                                            //           .data
		.src7_channel        (cmd_xbar_demux_src7_channel),                                         //           .channel
		.src7_startofpacket  (cmd_xbar_demux_src7_startofpacket),                                   //           .startofpacket
		.src7_endofpacket    (cmd_xbar_demux_src7_endofpacket),                                     //           .endofpacket
		.src8_ready          (cmd_xbar_demux_src8_ready),                                           //       src8.ready
		.src8_valid          (cmd_xbar_demux_src8_valid),                                           //           .valid
		.src8_data           (cmd_xbar_demux_src8_data),                                            //           .data
		.src8_channel        (cmd_xbar_demux_src8_channel),                                         //           .channel
		.src8_startofpacket  (cmd_xbar_demux_src8_startofpacket),                                   //           .startofpacket
		.src8_endofpacket    (cmd_xbar_demux_src8_endofpacket),                                     //           .endofpacket
		.src9_ready          (cmd_xbar_demux_src9_ready),                                           //       src9.ready
		.src9_valid          (cmd_xbar_demux_src9_valid),                                           //           .valid
		.src9_data           (cmd_xbar_demux_src9_data),                                            //           .data
		.src9_channel        (cmd_xbar_demux_src9_channel),                                         //           .channel
		.src9_startofpacket  (cmd_xbar_demux_src9_startofpacket),                                   //           .startofpacket
		.src9_endofpacket    (cmd_xbar_demux_src9_endofpacket),                                     //           .endofpacket
		.src10_ready         (cmd_xbar_demux_src10_ready),                                          //      src10.ready
		.src10_valid         (cmd_xbar_demux_src10_valid),                                          //           .valid
		.src10_data          (cmd_xbar_demux_src10_data),                                           //           .data
		.src10_channel       (cmd_xbar_demux_src10_channel),                                        //           .channel
		.src10_startofpacket (cmd_xbar_demux_src10_startofpacket),                                  //           .startofpacket
		.src10_endofpacket   (cmd_xbar_demux_src10_endofpacket),                                    //           .endofpacket
		.src11_ready         (cmd_xbar_demux_src11_ready),                                          //      src11.ready
		.src11_valid         (cmd_xbar_demux_src11_valid),                                          //           .valid
		.src11_data          (cmd_xbar_demux_src11_data),                                           //           .data
		.src11_channel       (cmd_xbar_demux_src11_channel),                                        //           .channel
		.src11_startofpacket (cmd_xbar_demux_src11_startofpacket),                                  //           .startofpacket
		.src11_endofpacket   (cmd_xbar_demux_src11_endofpacket),                                    //           .endofpacket
		.src12_ready         (cmd_xbar_demux_src12_ready),                                          //      src12.ready
		.src12_valid         (cmd_xbar_demux_src12_valid),                                          //           .valid
		.src12_data          (cmd_xbar_demux_src12_data),                                           //           .data
		.src12_channel       (cmd_xbar_demux_src12_channel),                                        //           .channel
		.src12_startofpacket (cmd_xbar_demux_src12_startofpacket),                                  //           .startofpacket
		.src12_endofpacket   (cmd_xbar_demux_src12_endofpacket),                                    //           .endofpacket
		.src13_ready         (cmd_xbar_demux_src13_ready),                                          //      src13.ready
		.src13_valid         (cmd_xbar_demux_src13_valid),                                          //           .valid
		.src13_data          (cmd_xbar_demux_src13_data),                                           //           .data
		.src13_channel       (cmd_xbar_demux_src13_channel),                                        //           .channel
		.src13_startofpacket (cmd_xbar_demux_src13_startofpacket),                                  //           .startofpacket
		.src13_endofpacket   (cmd_xbar_demux_src13_endofpacket),                                    //           .endofpacket
		.src14_ready         (cmd_xbar_demux_src14_ready),                                          //      src14.ready
		.src14_valid         (cmd_xbar_demux_src14_valid),                                          //           .valid
		.src14_data          (cmd_xbar_demux_src14_data),                                           //           .data
		.src14_channel       (cmd_xbar_demux_src14_channel),                                        //           .channel
		.src14_startofpacket (cmd_xbar_demux_src14_startofpacket),                                  //           .startofpacket
		.src14_endofpacket   (cmd_xbar_demux_src14_endofpacket),                                    //           .endofpacket
		.src15_ready         (cmd_xbar_demux_src15_ready),                                          //      src15.ready
		.src15_valid         (cmd_xbar_demux_src15_valid),                                          //           .valid
		.src15_data          (cmd_xbar_demux_src15_data),                                           //           .data
		.src15_channel       (cmd_xbar_demux_src15_channel),                                        //           .channel
		.src15_startofpacket (cmd_xbar_demux_src15_startofpacket),                                  //           .startofpacket
		.src15_endofpacket   (cmd_xbar_demux_src15_endofpacket)                                     //           .endofpacket
	);

	mysystem_mm_interconnect_0_cmd_xbar_demux cmd_xbar_demux_001 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                                         //        clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (limiter_001_cmd_src_ready),                                           //       sink.ready
		.sink_channel        (limiter_001_cmd_src_channel),                                         //           .channel
		.sink_data           (limiter_001_cmd_src_data),                                            //           .data
		.sink_startofpacket  (limiter_001_cmd_src_startofpacket),                                   //           .startofpacket
		.sink_endofpacket    (limiter_001_cmd_src_endofpacket),                                     //           .endofpacket
		.sink_valid          (limiter_001_cmd_valid_data),                                          // sink_valid.data
		.src0_ready          (cmd_xbar_demux_001_src0_ready),                                       //       src0.ready
		.src0_valid          (cmd_xbar_demux_001_src0_valid),                                       //           .valid
		.src0_data           (cmd_xbar_demux_001_src0_data),                                        //           .data
		.src0_channel        (cmd_xbar_demux_001_src0_channel),                                     //           .channel
		.src0_startofpacket  (cmd_xbar_demux_001_src0_startofpacket),                               //           .startofpacket
		.src0_endofpacket    (cmd_xbar_demux_001_src0_endofpacket),                                 //           .endofpacket
		.src1_ready          (cmd_xbar_demux_001_src1_ready),                                       //       src1.ready
		.src1_valid          (cmd_xbar_demux_001_src1_valid),                                       //           .valid
		.src1_data           (cmd_xbar_demux_001_src1_data),                                        //           .data
		.src1_channel        (cmd_xbar_demux_001_src1_channel),                                     //           .channel
		.src1_startofpacket  (cmd_xbar_demux_001_src1_startofpacket),                               //           .startofpacket
		.src1_endofpacket    (cmd_xbar_demux_001_src1_endofpacket),                                 //           .endofpacket
		.src2_ready          (cmd_xbar_demux_001_src2_ready),                                       //       src2.ready
		.src2_valid          (cmd_xbar_demux_001_src2_valid),                                       //           .valid
		.src2_data           (cmd_xbar_demux_001_src2_data),                                        //           .data
		.src2_channel        (cmd_xbar_demux_001_src2_channel),                                     //           .channel
		.src2_startofpacket  (cmd_xbar_demux_001_src2_startofpacket),                               //           .startofpacket
		.src2_endofpacket    (cmd_xbar_demux_001_src2_endofpacket),                                 //           .endofpacket
		.src3_ready          (cmd_xbar_demux_001_src3_ready),                                       //       src3.ready
		.src3_valid          (cmd_xbar_demux_001_src3_valid),                                       //           .valid
		.src3_data           (cmd_xbar_demux_001_src3_data),                                        //           .data
		.src3_channel        (cmd_xbar_demux_001_src3_channel),                                     //           .channel
		.src3_startofpacket  (cmd_xbar_demux_001_src3_startofpacket),                               //           .startofpacket
		.src3_endofpacket    (cmd_xbar_demux_001_src3_endofpacket),                                 //           .endofpacket
		.src4_ready          (cmd_xbar_demux_001_src4_ready),                                       //       src4.ready
		.src4_valid          (cmd_xbar_demux_001_src4_valid),                                       //           .valid
		.src4_data           (cmd_xbar_demux_001_src4_data),                                        //           .data
		.src4_channel        (cmd_xbar_demux_001_src4_channel),                                     //           .channel
		.src4_startofpacket  (cmd_xbar_demux_001_src4_startofpacket),                               //           .startofpacket
		.src4_endofpacket    (cmd_xbar_demux_001_src4_endofpacket),                                 //           .endofpacket
		.src5_ready          (cmd_xbar_demux_001_src5_ready),                                       //       src5.ready
		.src5_valid          (cmd_xbar_demux_001_src5_valid),                                       //           .valid
		.src5_data           (cmd_xbar_demux_001_src5_data),                                        //           .data
		.src5_channel        (cmd_xbar_demux_001_src5_channel),                                     //           .channel
		.src5_startofpacket  (cmd_xbar_demux_001_src5_startofpacket),                               //           .startofpacket
		.src5_endofpacket    (cmd_xbar_demux_001_src5_endofpacket),                                 //           .endofpacket
		.src6_ready          (cmd_xbar_demux_001_src6_ready),                                       //       src6.ready
		.src6_valid          (cmd_xbar_demux_001_src6_valid),                                       //           .valid
		.src6_data           (cmd_xbar_demux_001_src6_data),                                        //           .data
		.src6_channel        (cmd_xbar_demux_001_src6_channel),                                     //           .channel
		.src6_startofpacket  (cmd_xbar_demux_001_src6_startofpacket),                               //           .startofpacket
		.src6_endofpacket    (cmd_xbar_demux_001_src6_endofpacket),                                 //           .endofpacket
		.src7_ready          (cmd_xbar_demux_001_src7_ready),                                       //       src7.ready
		.src7_valid          (cmd_xbar_demux_001_src7_valid),                                       //           .valid
		.src7_data           (cmd_xbar_demux_001_src7_data),                                        //           .data
		.src7_channel        (cmd_xbar_demux_001_src7_channel),                                     //           .channel
		.src7_startofpacket  (cmd_xbar_demux_001_src7_startofpacket),                               //           .startofpacket
		.src7_endofpacket    (cmd_xbar_demux_001_src7_endofpacket),                                 //           .endofpacket
		.src8_ready          (cmd_xbar_demux_001_src8_ready),                                       //       src8.ready
		.src8_valid          (cmd_xbar_demux_001_src8_valid),                                       //           .valid
		.src8_data           (cmd_xbar_demux_001_src8_data),                                        //           .data
		.src8_channel        (cmd_xbar_demux_001_src8_channel),                                     //           .channel
		.src8_startofpacket  (cmd_xbar_demux_001_src8_startofpacket),                               //           .startofpacket
		.src8_endofpacket    (cmd_xbar_demux_001_src8_endofpacket),                                 //           .endofpacket
		.src9_ready          (cmd_xbar_demux_001_src9_ready),                                       //       src9.ready
		.src9_valid          (cmd_xbar_demux_001_src9_valid),                                       //           .valid
		.src9_data           (cmd_xbar_demux_001_src9_data),                                        //           .data
		.src9_channel        (cmd_xbar_demux_001_src9_channel),                                     //           .channel
		.src9_startofpacket  (cmd_xbar_demux_001_src9_startofpacket),                               //           .startofpacket
		.src9_endofpacket    (cmd_xbar_demux_001_src9_endofpacket),                                 //           .endofpacket
		.src10_ready         (cmd_xbar_demux_001_src10_ready),                                      //      src10.ready
		.src10_valid         (cmd_xbar_demux_001_src10_valid),                                      //           .valid
		.src10_data          (cmd_xbar_demux_001_src10_data),                                       //           .data
		.src10_channel       (cmd_xbar_demux_001_src10_channel),                                    //           .channel
		.src10_startofpacket (cmd_xbar_demux_001_src10_startofpacket),                              //           .startofpacket
		.src10_endofpacket   (cmd_xbar_demux_001_src10_endofpacket),                                //           .endofpacket
		.src11_ready         (cmd_xbar_demux_001_src11_ready),                                      //      src11.ready
		.src11_valid         (cmd_xbar_demux_001_src11_valid),                                      //           .valid
		.src11_data          (cmd_xbar_demux_001_src11_data),                                       //           .data
		.src11_channel       (cmd_xbar_demux_001_src11_channel),                                    //           .channel
		.src11_startofpacket (cmd_xbar_demux_001_src11_startofpacket),                              //           .startofpacket
		.src11_endofpacket   (cmd_xbar_demux_001_src11_endofpacket),                                //           .endofpacket
		.src12_ready         (cmd_xbar_demux_001_src12_ready),                                      //      src12.ready
		.src12_valid         (cmd_xbar_demux_001_src12_valid),                                      //           .valid
		.src12_data          (cmd_xbar_demux_001_src12_data),                                       //           .data
		.src12_channel       (cmd_xbar_demux_001_src12_channel),                                    //           .channel
		.src12_startofpacket (cmd_xbar_demux_001_src12_startofpacket),                              //           .startofpacket
		.src12_endofpacket   (cmd_xbar_demux_001_src12_endofpacket),                                //           .endofpacket
		.src13_ready         (cmd_xbar_demux_001_src13_ready),                                      //      src13.ready
		.src13_valid         (cmd_xbar_demux_001_src13_valid),                                      //           .valid
		.src13_data          (cmd_xbar_demux_001_src13_data),                                       //           .data
		.src13_channel       (cmd_xbar_demux_001_src13_channel),                                    //           .channel
		.src13_startofpacket (cmd_xbar_demux_001_src13_startofpacket),                              //           .startofpacket
		.src13_endofpacket   (cmd_xbar_demux_001_src13_endofpacket),                                //           .endofpacket
		.src14_ready         (cmd_xbar_demux_001_src14_ready),                                      //      src14.ready
		.src14_valid         (cmd_xbar_demux_001_src14_valid),                                      //           .valid
		.src14_data          (cmd_xbar_demux_001_src14_data),                                       //           .data
		.src14_channel       (cmd_xbar_demux_001_src14_channel),                                    //           .channel
		.src14_startofpacket (cmd_xbar_demux_001_src14_startofpacket),                              //           .startofpacket
		.src14_endofpacket   (cmd_xbar_demux_001_src14_endofpacket),                                //           .endofpacket
		.src15_ready         (cmd_xbar_demux_001_src15_ready),                                      //      src15.ready
		.src15_valid         (cmd_xbar_demux_001_src15_valid),                                      //           .valid
		.src15_data          (cmd_xbar_demux_001_src15_data),                                       //           .data
		.src15_channel       (cmd_xbar_demux_001_src15_channel),                                    //           .channel
		.src15_startofpacket (cmd_xbar_demux_001_src15_startofpacket),                              //           .startofpacket
		.src15_endofpacket   (cmd_xbar_demux_001_src15_endofpacket)                                 //           .endofpacket
	);

	mysystem_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),             //       clk.clk
		.reset               (start_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_src_ready),                  //       src.ready
		.src_valid           (cmd_xbar_mux_src_valid),                  //          .valid
		.src_data            (cmd_xbar_mux_src_data),                   //          .data
		.src_channel         (cmd_xbar_mux_src_channel),                //          .channel
		.src_startofpacket   (cmd_xbar_mux_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_src_endofpacket),            //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src0_ready),               //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src0_valid),               //          .valid
		.sink0_channel       (cmd_xbar_demux_src0_channel),             //          .channel
		.sink0_data          (cmd_xbar_demux_src0_data),                //          .data
		.sink0_startofpacket (cmd_xbar_demux_src0_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src0_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src0_ready),           //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src0_valid),           //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src0_channel),         //          .channel
		.sink1_data          (cmd_xbar_demux_001_src0_data),            //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src0_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src0_endofpacket)      //          .endofpacket
	);

	mysystem_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_001 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),             //       clk.clk
		.reset               (start_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_001_src_ready),              //       src.ready
		.src_valid           (cmd_xbar_mux_001_src_valid),              //          .valid
		.src_data            (cmd_xbar_mux_001_src_data),               //          .data
		.src_channel         (cmd_xbar_mux_001_src_channel),            //          .channel
		.src_startofpacket   (cmd_xbar_mux_001_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_001_src_endofpacket),        //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src1_ready),               //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src1_valid),               //          .valid
		.sink0_channel       (cmd_xbar_demux_src1_channel),             //          .channel
		.sink0_data          (cmd_xbar_demux_src1_data),                //          .data
		.sink0_startofpacket (cmd_xbar_demux_src1_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src1_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src1_ready),           //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src1_valid),           //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src1_channel),         //          .channel
		.sink1_data          (cmd_xbar_demux_001_src1_data),            //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src1_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src1_endofpacket)      //          .endofpacket
	);

	mysystem_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_002 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),             //       clk.clk
		.reset               (start_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_002_src_ready),              //       src.ready
		.src_valid           (cmd_xbar_mux_002_src_valid),              //          .valid
		.src_data            (cmd_xbar_mux_002_src_data),               //          .data
		.src_channel         (cmd_xbar_mux_002_src_channel),            //          .channel
		.src_startofpacket   (cmd_xbar_mux_002_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_002_src_endofpacket),        //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src2_ready),               //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src2_valid),               //          .valid
		.sink0_channel       (cmd_xbar_demux_src2_channel),             //          .channel
		.sink0_data          (cmd_xbar_demux_src2_data),                //          .data
		.sink0_startofpacket (cmd_xbar_demux_src2_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src2_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src2_ready),           //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src2_valid),           //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src2_channel),         //          .channel
		.sink1_data          (cmd_xbar_demux_001_src2_data),            //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src2_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src2_endofpacket)      //          .endofpacket
	);

	mysystem_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_003 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),             //       clk.clk
		.reset               (start_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_003_src_ready),              //       src.ready
		.src_valid           (cmd_xbar_mux_003_src_valid),              //          .valid
		.src_data            (cmd_xbar_mux_003_src_data),               //          .data
		.src_channel         (cmd_xbar_mux_003_src_channel),            //          .channel
		.src_startofpacket   (cmd_xbar_mux_003_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_003_src_endofpacket),        //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src3_ready),               //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src3_valid),               //          .valid
		.sink0_channel       (cmd_xbar_demux_src3_channel),             //          .channel
		.sink0_data          (cmd_xbar_demux_src3_data),                //          .data
		.sink0_startofpacket (cmd_xbar_demux_src3_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src3_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src3_ready),           //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src3_valid),           //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src3_channel),         //          .channel
		.sink1_data          (cmd_xbar_demux_001_src3_data),            //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src3_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src3_endofpacket)      //          .endofpacket
	);

	mysystem_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_004 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),             //       clk.clk
		.reset               (start_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_004_src_ready),              //       src.ready
		.src_valid           (cmd_xbar_mux_004_src_valid),              //          .valid
		.src_data            (cmd_xbar_mux_004_src_data),               //          .data
		.src_channel         (cmd_xbar_mux_004_src_channel),            //          .channel
		.src_startofpacket   (cmd_xbar_mux_004_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_004_src_endofpacket),        //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src4_ready),               //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src4_valid),               //          .valid
		.sink0_channel       (cmd_xbar_demux_src4_channel),             //          .channel
		.sink0_data          (cmd_xbar_demux_src4_data),                //          .data
		.sink0_startofpacket (cmd_xbar_demux_src4_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src4_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src4_ready),           //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src4_valid),           //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src4_channel),         //          .channel
		.sink1_data          (cmd_xbar_demux_001_src4_data),            //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src4_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src4_endofpacket)      //          .endofpacket
	);

	mysystem_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_005 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset               (HPS_toMem_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_005_src_ready),                  //       src.ready
		.src_valid           (cmd_xbar_mux_005_src_valid),                  //          .valid
		.src_data            (cmd_xbar_mux_005_src_data),                   //          .data
		.src_channel         (cmd_xbar_mux_005_src_channel),                //          .channel
		.src_startofpacket   (cmd_xbar_mux_005_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_005_src_endofpacket),            //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src5_ready),                   //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src5_valid),                   //          .valid
		.sink0_channel       (cmd_xbar_demux_src5_channel),                 //          .channel
		.sink0_data          (cmd_xbar_demux_src5_data),                    //          .data
		.sink0_startofpacket (cmd_xbar_demux_src5_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src5_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src5_ready),               //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src5_valid),               //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src5_channel),             //          .channel
		.sink1_data          (cmd_xbar_demux_001_src5_data),                //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src5_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src5_endofpacket)          //          .endofpacket
	);

	mysystem_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_006 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset               (HPS_toMem_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_006_src_ready),                  //       src.ready
		.src_valid           (cmd_xbar_mux_006_src_valid),                  //          .valid
		.src_data            (cmd_xbar_mux_006_src_data),                   //          .data
		.src_channel         (cmd_xbar_mux_006_src_channel),                //          .channel
		.src_startofpacket   (cmd_xbar_mux_006_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_006_src_endofpacket),            //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src6_ready),                   //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src6_valid),                   //          .valid
		.sink0_channel       (cmd_xbar_demux_src6_channel),                 //          .channel
		.sink0_data          (cmd_xbar_demux_src6_data),                    //          .data
		.sink0_startofpacket (cmd_xbar_demux_src6_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src6_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src6_ready),               //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src6_valid),               //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src6_channel),             //          .channel
		.sink1_data          (cmd_xbar_demux_001_src6_data),                //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src6_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src6_endofpacket)          //          .endofpacket
	);

	mysystem_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_007 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset               (HPS_toMem_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_007_src_ready),                  //       src.ready
		.src_valid           (cmd_xbar_mux_007_src_valid),                  //          .valid
		.src_data            (cmd_xbar_mux_007_src_data),                   //          .data
		.src_channel         (cmd_xbar_mux_007_src_channel),                //          .channel
		.src_startofpacket   (cmd_xbar_mux_007_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_007_src_endofpacket),            //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src7_ready),                   //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src7_valid),                   //          .valid
		.sink0_channel       (cmd_xbar_demux_src7_channel),                 //          .channel
		.sink0_data          (cmd_xbar_demux_src7_data),                    //          .data
		.sink0_startofpacket (cmd_xbar_demux_src7_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src7_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src7_ready),               //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src7_valid),               //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src7_channel),             //          .channel
		.sink1_data          (cmd_xbar_demux_001_src7_data),                //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src7_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src7_endofpacket)          //          .endofpacket
	);

	mysystem_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_008 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset               (HPS_toMem_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_008_src_ready),                  //       src.ready
		.src_valid           (cmd_xbar_mux_008_src_valid),                  //          .valid
		.src_data            (cmd_xbar_mux_008_src_data),                   //          .data
		.src_channel         (cmd_xbar_mux_008_src_channel),                //          .channel
		.src_startofpacket   (cmd_xbar_mux_008_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_008_src_endofpacket),            //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src8_ready),                   //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src8_valid),                   //          .valid
		.sink0_channel       (cmd_xbar_demux_src8_channel),                 //          .channel
		.sink0_data          (cmd_xbar_demux_src8_data),                    //          .data
		.sink0_startofpacket (cmd_xbar_demux_src8_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src8_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src8_ready),               //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src8_valid),               //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src8_channel),             //          .channel
		.sink1_data          (cmd_xbar_demux_001_src8_data),                //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src8_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src8_endofpacket)          //          .endofpacket
	);

	mysystem_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_009 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset               (HPS_toMem_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_009_src_ready),                  //       src.ready
		.src_valid           (cmd_xbar_mux_009_src_valid),                  //          .valid
		.src_data            (cmd_xbar_mux_009_src_data),                   //          .data
		.src_channel         (cmd_xbar_mux_009_src_channel),                //          .channel
		.src_startofpacket   (cmd_xbar_mux_009_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_009_src_endofpacket),            //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src9_ready),                   //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src9_valid),                   //          .valid
		.sink0_channel       (cmd_xbar_demux_src9_channel),                 //          .channel
		.sink0_data          (cmd_xbar_demux_src9_data),                    //          .data
		.sink0_startofpacket (cmd_xbar_demux_src9_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src9_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src9_ready),               //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src9_valid),               //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src9_channel),             //          .channel
		.sink1_data          (cmd_xbar_demux_001_src9_data),                //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src9_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src9_endofpacket)          //          .endofpacket
	);

	mysystem_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_010 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),             //       clk.clk
		.reset               (start_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_010_src_ready),              //       src.ready
		.src_valid           (cmd_xbar_mux_010_src_valid),              //          .valid
		.src_data            (cmd_xbar_mux_010_src_data),               //          .data
		.src_channel         (cmd_xbar_mux_010_src_channel),            //          .channel
		.src_startofpacket   (cmd_xbar_mux_010_src_startofpacket),      //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_010_src_endofpacket),        //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src10_ready),              //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src10_valid),              //          .valid
		.sink0_channel       (cmd_xbar_demux_src10_channel),            //          .channel
		.sink0_data          (cmd_xbar_demux_src10_data),               //          .data
		.sink0_startofpacket (cmd_xbar_demux_src10_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src10_endofpacket),        //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src10_ready),          //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src10_valid),          //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src10_channel),        //          .channel
		.sink1_data          (cmd_xbar_demux_001_src10_data),           //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src10_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src10_endofpacket)     //          .endofpacket
	);

	mysystem_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_011 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset               (HPS_toMem_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_011_src_ready),                  //       src.ready
		.src_valid           (cmd_xbar_mux_011_src_valid),                  //          .valid
		.src_data            (cmd_xbar_mux_011_src_data),                   //          .data
		.src_channel         (cmd_xbar_mux_011_src_channel),                //          .channel
		.src_startofpacket   (cmd_xbar_mux_011_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_011_src_endofpacket),            //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src11_ready),                  //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src11_valid),                  //          .valid
		.sink0_channel       (cmd_xbar_demux_src11_channel),                //          .channel
		.sink0_data          (cmd_xbar_demux_src11_data),                   //          .data
		.sink0_startofpacket (cmd_xbar_demux_src11_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src11_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src11_ready),              //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src11_valid),              //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src11_channel),            //          .channel
		.sink1_data          (cmd_xbar_demux_001_src11_data),               //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src11_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src11_endofpacket)         //          .endofpacket
	);

	mysystem_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_012 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset               (HPS_toMem_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_012_src_ready),                  //       src.ready
		.src_valid           (cmd_xbar_mux_012_src_valid),                  //          .valid
		.src_data            (cmd_xbar_mux_012_src_data),                   //          .data
		.src_channel         (cmd_xbar_mux_012_src_channel),                //          .channel
		.src_startofpacket   (cmd_xbar_mux_012_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_012_src_endofpacket),            //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src12_ready),                  //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src12_valid),                  //          .valid
		.sink0_channel       (cmd_xbar_demux_src12_channel),                //          .channel
		.sink0_data          (cmd_xbar_demux_src12_data),                   //          .data
		.sink0_startofpacket (cmd_xbar_demux_src12_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src12_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src12_ready),              //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src12_valid),              //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src12_channel),            //          .channel
		.sink1_data          (cmd_xbar_demux_001_src12_data),               //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src12_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src12_endofpacket)         //          .endofpacket
	);

	mysystem_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_013 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset               (HPS_toMem_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_013_src_ready),                  //       src.ready
		.src_valid           (cmd_xbar_mux_013_src_valid),                  //          .valid
		.src_data            (cmd_xbar_mux_013_src_data),                   //          .data
		.src_channel         (cmd_xbar_mux_013_src_channel),                //          .channel
		.src_startofpacket   (cmd_xbar_mux_013_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_013_src_endofpacket),            //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src13_ready),                  //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src13_valid),                  //          .valid
		.sink0_channel       (cmd_xbar_demux_src13_channel),                //          .channel
		.sink0_data          (cmd_xbar_demux_src13_data),                   //          .data
		.sink0_startofpacket (cmd_xbar_demux_src13_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src13_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src13_ready),              //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src13_valid),              //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src13_channel),            //          .channel
		.sink1_data          (cmd_xbar_demux_001_src13_data),               //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src13_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src13_endofpacket)         //          .endofpacket
	);

	mysystem_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_014 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset               (HPS_toMem_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_014_src_ready),                  //       src.ready
		.src_valid           (cmd_xbar_mux_014_src_valid),                  //          .valid
		.src_data            (cmd_xbar_mux_014_src_data),                   //          .data
		.src_channel         (cmd_xbar_mux_014_src_channel),                //          .channel
		.src_startofpacket   (cmd_xbar_mux_014_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_014_src_endofpacket),            //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src14_ready),                  //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src14_valid),                  //          .valid
		.sink0_channel       (cmd_xbar_demux_src14_channel),                //          .channel
		.sink0_data          (cmd_xbar_demux_src14_data),                   //          .data
		.sink0_startofpacket (cmd_xbar_demux_src14_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src14_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src14_ready),              //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src14_valid),              //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src14_channel),            //          .channel
		.sink1_data          (cmd_xbar_demux_001_src14_data),               //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src14_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src14_endofpacket)         //          .endofpacket
	);

	mysystem_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_015 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset               (HPS_toMem_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_015_src_ready),                  //       src.ready
		.src_valid           (cmd_xbar_mux_015_src_valid),                  //          .valid
		.src_data            (cmd_xbar_mux_015_src_data),                   //          .data
		.src_channel         (cmd_xbar_mux_015_src_channel),                //          .channel
		.src_startofpacket   (cmd_xbar_mux_015_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_015_src_endofpacket),            //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src15_ready),                  //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src15_valid),                  //          .valid
		.sink0_channel       (cmd_xbar_demux_src15_channel),                //          .channel
		.sink0_data          (cmd_xbar_demux_src15_data),                   //          .data
		.sink0_startofpacket (cmd_xbar_demux_src15_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src15_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src15_ready),              //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src15_valid),              //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src15_channel),            //          .channel
		.sink1_data          (cmd_xbar_demux_001_src15_data),               //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src15_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src15_endofpacket)         //          .endofpacket
	);

	mysystem_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux (
		.clk                (sys_sdram_pll_0_sys_clk_clk),             //       clk.clk
		.reset              (start_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_src_ready),                     //      sink.ready
		.sink_channel       (id_router_src_channel),                   //          .channel
		.sink_data          (id_router_src_data),                      //          .data
		.sink_startofpacket (id_router_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (id_router_src_endofpacket),               //          .endofpacket
		.sink_valid         (id_router_src_valid),                     //          .valid
		.src0_ready         (rsp_xbar_demux_src0_ready),               //      src0.ready
		.src0_valid         (rsp_xbar_demux_src0_valid),               //          .valid
		.src0_data          (rsp_xbar_demux_src0_data),                //          .data
		.src0_channel       (rsp_xbar_demux_src0_channel),             //          .channel
		.src0_startofpacket (rsp_xbar_demux_src0_startofpacket),       //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_src0_endofpacket),         //          .endofpacket
		.src1_ready         (rsp_xbar_demux_src1_ready),               //      src1.ready
		.src1_valid         (rsp_xbar_demux_src1_valid),               //          .valid
		.src1_data          (rsp_xbar_demux_src1_data),                //          .data
		.src1_channel       (rsp_xbar_demux_src1_channel),             //          .channel
		.src1_startofpacket (rsp_xbar_demux_src1_startofpacket),       //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_src1_endofpacket)          //          .endofpacket
	);

	mysystem_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_001 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),             //       clk.clk
		.reset              (start_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_001_src_ready),                 //      sink.ready
		.sink_channel       (id_router_001_src_channel),               //          .channel
		.sink_data          (id_router_001_src_data),                  //          .data
		.sink_startofpacket (id_router_001_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (id_router_001_src_endofpacket),           //          .endofpacket
		.sink_valid         (id_router_001_src_valid),                 //          .valid
		.src0_ready         (rsp_xbar_demux_001_src0_ready),           //      src0.ready
		.src0_valid         (rsp_xbar_demux_001_src0_valid),           //          .valid
		.src0_data          (rsp_xbar_demux_001_src0_data),            //          .data
		.src0_channel       (rsp_xbar_demux_001_src0_channel),         //          .channel
		.src0_startofpacket (rsp_xbar_demux_001_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_001_src0_endofpacket),     //          .endofpacket
		.src1_ready         (rsp_xbar_demux_001_src1_ready),           //      src1.ready
		.src1_valid         (rsp_xbar_demux_001_src1_valid),           //          .valid
		.src1_data          (rsp_xbar_demux_001_src1_data),            //          .data
		.src1_channel       (rsp_xbar_demux_001_src1_channel),         //          .channel
		.src1_startofpacket (rsp_xbar_demux_001_src1_startofpacket),   //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_001_src1_endofpacket)      //          .endofpacket
	);

	mysystem_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_002 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),             //       clk.clk
		.reset              (start_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_002_src_ready),                 //      sink.ready
		.sink_channel       (id_router_002_src_channel),               //          .channel
		.sink_data          (id_router_002_src_data),                  //          .data
		.sink_startofpacket (id_router_002_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (id_router_002_src_endofpacket),           //          .endofpacket
		.sink_valid         (id_router_002_src_valid),                 //          .valid
		.src0_ready         (rsp_xbar_demux_002_src0_ready),           //      src0.ready
		.src0_valid         (rsp_xbar_demux_002_src0_valid),           //          .valid
		.src0_data          (rsp_xbar_demux_002_src0_data),            //          .data
		.src0_channel       (rsp_xbar_demux_002_src0_channel),         //          .channel
		.src0_startofpacket (rsp_xbar_demux_002_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_002_src0_endofpacket),     //          .endofpacket
		.src1_ready         (rsp_xbar_demux_002_src1_ready),           //      src1.ready
		.src1_valid         (rsp_xbar_demux_002_src1_valid),           //          .valid
		.src1_data          (rsp_xbar_demux_002_src1_data),            //          .data
		.src1_channel       (rsp_xbar_demux_002_src1_channel),         //          .channel
		.src1_startofpacket (rsp_xbar_demux_002_src1_startofpacket),   //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_002_src1_endofpacket)      //          .endofpacket
	);

	mysystem_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_003 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),             //       clk.clk
		.reset              (start_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_003_src_ready),                 //      sink.ready
		.sink_channel       (id_router_003_src_channel),               //          .channel
		.sink_data          (id_router_003_src_data),                  //          .data
		.sink_startofpacket (id_router_003_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (id_router_003_src_endofpacket),           //          .endofpacket
		.sink_valid         (id_router_003_src_valid),                 //          .valid
		.src0_ready         (rsp_xbar_demux_003_src0_ready),           //      src0.ready
		.src0_valid         (rsp_xbar_demux_003_src0_valid),           //          .valid
		.src0_data          (rsp_xbar_demux_003_src0_data),            //          .data
		.src0_channel       (rsp_xbar_demux_003_src0_channel),         //          .channel
		.src0_startofpacket (rsp_xbar_demux_003_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_003_src0_endofpacket),     //          .endofpacket
		.src1_ready         (rsp_xbar_demux_003_src1_ready),           //      src1.ready
		.src1_valid         (rsp_xbar_demux_003_src1_valid),           //          .valid
		.src1_data          (rsp_xbar_demux_003_src1_data),            //          .data
		.src1_channel       (rsp_xbar_demux_003_src1_channel),         //          .channel
		.src1_startofpacket (rsp_xbar_demux_003_src1_startofpacket),   //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_003_src1_endofpacket)      //          .endofpacket
	);

	mysystem_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_004 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),             //       clk.clk
		.reset              (start_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_004_src_ready),                 //      sink.ready
		.sink_channel       (id_router_004_src_channel),               //          .channel
		.sink_data          (id_router_004_src_data),                  //          .data
		.sink_startofpacket (id_router_004_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (id_router_004_src_endofpacket),           //          .endofpacket
		.sink_valid         (id_router_004_src_valid),                 //          .valid
		.src0_ready         (rsp_xbar_demux_004_src0_ready),           //      src0.ready
		.src0_valid         (rsp_xbar_demux_004_src0_valid),           //          .valid
		.src0_data          (rsp_xbar_demux_004_src0_data),            //          .data
		.src0_channel       (rsp_xbar_demux_004_src0_channel),         //          .channel
		.src0_startofpacket (rsp_xbar_demux_004_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_004_src0_endofpacket),     //          .endofpacket
		.src1_ready         (rsp_xbar_demux_004_src1_ready),           //      src1.ready
		.src1_valid         (rsp_xbar_demux_004_src1_valid),           //          .valid
		.src1_data          (rsp_xbar_demux_004_src1_data),            //          .data
		.src1_channel       (rsp_xbar_demux_004_src1_channel),         //          .channel
		.src1_startofpacket (rsp_xbar_demux_004_src1_startofpacket),   //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_004_src1_endofpacket)      //          .endofpacket
	);

	mysystem_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_005 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset              (HPS_toMem_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_005_src_ready),                     //      sink.ready
		.sink_channel       (id_router_005_src_channel),                   //          .channel
		.sink_data          (id_router_005_src_data),                      //          .data
		.sink_startofpacket (id_router_005_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (id_router_005_src_endofpacket),               //          .endofpacket
		.sink_valid         (id_router_005_src_valid),                     //          .valid
		.src0_ready         (rsp_xbar_demux_005_src0_ready),               //      src0.ready
		.src0_valid         (rsp_xbar_demux_005_src0_valid),               //          .valid
		.src0_data          (rsp_xbar_demux_005_src0_data),                //          .data
		.src0_channel       (rsp_xbar_demux_005_src0_channel),             //          .channel
		.src0_startofpacket (rsp_xbar_demux_005_src0_startofpacket),       //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_005_src0_endofpacket),         //          .endofpacket
		.src1_ready         (rsp_xbar_demux_005_src1_ready),               //      src1.ready
		.src1_valid         (rsp_xbar_demux_005_src1_valid),               //          .valid
		.src1_data          (rsp_xbar_demux_005_src1_data),                //          .data
		.src1_channel       (rsp_xbar_demux_005_src1_channel),             //          .channel
		.src1_startofpacket (rsp_xbar_demux_005_src1_startofpacket),       //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_005_src1_endofpacket)          //          .endofpacket
	);

	mysystem_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_006 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset              (HPS_toMem_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_006_src_ready),                     //      sink.ready
		.sink_channel       (id_router_006_src_channel),                   //          .channel
		.sink_data          (id_router_006_src_data),                      //          .data
		.sink_startofpacket (id_router_006_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (id_router_006_src_endofpacket),               //          .endofpacket
		.sink_valid         (id_router_006_src_valid),                     //          .valid
		.src0_ready         (rsp_xbar_demux_006_src0_ready),               //      src0.ready
		.src0_valid         (rsp_xbar_demux_006_src0_valid),               //          .valid
		.src0_data          (rsp_xbar_demux_006_src0_data),                //          .data
		.src0_channel       (rsp_xbar_demux_006_src0_channel),             //          .channel
		.src0_startofpacket (rsp_xbar_demux_006_src0_startofpacket),       //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_006_src0_endofpacket),         //          .endofpacket
		.src1_ready         (rsp_xbar_demux_006_src1_ready),               //      src1.ready
		.src1_valid         (rsp_xbar_demux_006_src1_valid),               //          .valid
		.src1_data          (rsp_xbar_demux_006_src1_data),                //          .data
		.src1_channel       (rsp_xbar_demux_006_src1_channel),             //          .channel
		.src1_startofpacket (rsp_xbar_demux_006_src1_startofpacket),       //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_006_src1_endofpacket)          //          .endofpacket
	);

	mysystem_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_007 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset              (HPS_toMem_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_007_src_ready),                     //      sink.ready
		.sink_channel       (id_router_007_src_channel),                   //          .channel
		.sink_data          (id_router_007_src_data),                      //          .data
		.sink_startofpacket (id_router_007_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (id_router_007_src_endofpacket),               //          .endofpacket
		.sink_valid         (id_router_007_src_valid),                     //          .valid
		.src0_ready         (rsp_xbar_demux_007_src0_ready),               //      src0.ready
		.src0_valid         (rsp_xbar_demux_007_src0_valid),               //          .valid
		.src0_data          (rsp_xbar_demux_007_src0_data),                //          .data
		.src0_channel       (rsp_xbar_demux_007_src0_channel),             //          .channel
		.src0_startofpacket (rsp_xbar_demux_007_src0_startofpacket),       //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_007_src0_endofpacket),         //          .endofpacket
		.src1_ready         (rsp_xbar_demux_007_src1_ready),               //      src1.ready
		.src1_valid         (rsp_xbar_demux_007_src1_valid),               //          .valid
		.src1_data          (rsp_xbar_demux_007_src1_data),                //          .data
		.src1_channel       (rsp_xbar_demux_007_src1_channel),             //          .channel
		.src1_startofpacket (rsp_xbar_demux_007_src1_startofpacket),       //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_007_src1_endofpacket)          //          .endofpacket
	);

	mysystem_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_008 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset              (HPS_toMem_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_008_src_ready),                     //      sink.ready
		.sink_channel       (id_router_008_src_channel),                   //          .channel
		.sink_data          (id_router_008_src_data),                      //          .data
		.sink_startofpacket (id_router_008_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (id_router_008_src_endofpacket),               //          .endofpacket
		.sink_valid         (id_router_008_src_valid),                     //          .valid
		.src0_ready         (rsp_xbar_demux_008_src0_ready),               //      src0.ready
		.src0_valid         (rsp_xbar_demux_008_src0_valid),               //          .valid
		.src0_data          (rsp_xbar_demux_008_src0_data),                //          .data
		.src0_channel       (rsp_xbar_demux_008_src0_channel),             //          .channel
		.src0_startofpacket (rsp_xbar_demux_008_src0_startofpacket),       //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_008_src0_endofpacket),         //          .endofpacket
		.src1_ready         (rsp_xbar_demux_008_src1_ready),               //      src1.ready
		.src1_valid         (rsp_xbar_demux_008_src1_valid),               //          .valid
		.src1_data          (rsp_xbar_demux_008_src1_data),                //          .data
		.src1_channel       (rsp_xbar_demux_008_src1_channel),             //          .channel
		.src1_startofpacket (rsp_xbar_demux_008_src1_startofpacket),       //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_008_src1_endofpacket)          //          .endofpacket
	);

	mysystem_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_009 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset              (HPS_toMem_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_009_src_ready),                     //      sink.ready
		.sink_channel       (id_router_009_src_channel),                   //          .channel
		.sink_data          (id_router_009_src_data),                      //          .data
		.sink_startofpacket (id_router_009_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (id_router_009_src_endofpacket),               //          .endofpacket
		.sink_valid         (id_router_009_src_valid),                     //          .valid
		.src0_ready         (rsp_xbar_demux_009_src0_ready),               //      src0.ready
		.src0_valid         (rsp_xbar_demux_009_src0_valid),               //          .valid
		.src0_data          (rsp_xbar_demux_009_src0_data),                //          .data
		.src0_channel       (rsp_xbar_demux_009_src0_channel),             //          .channel
		.src0_startofpacket (rsp_xbar_demux_009_src0_startofpacket),       //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_009_src0_endofpacket),         //          .endofpacket
		.src1_ready         (rsp_xbar_demux_009_src1_ready),               //      src1.ready
		.src1_valid         (rsp_xbar_demux_009_src1_valid),               //          .valid
		.src1_data          (rsp_xbar_demux_009_src1_data),                //          .data
		.src1_channel       (rsp_xbar_demux_009_src1_channel),             //          .channel
		.src1_startofpacket (rsp_xbar_demux_009_src1_startofpacket),       //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_009_src1_endofpacket)          //          .endofpacket
	);

	mysystem_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_010 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),             //       clk.clk
		.reset              (start_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_010_src_ready),                 //      sink.ready
		.sink_channel       (id_router_010_src_channel),               //          .channel
		.sink_data          (id_router_010_src_data),                  //          .data
		.sink_startofpacket (id_router_010_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (id_router_010_src_endofpacket),           //          .endofpacket
		.sink_valid         (id_router_010_src_valid),                 //          .valid
		.src0_ready         (rsp_xbar_demux_010_src0_ready),           //      src0.ready
		.src0_valid         (rsp_xbar_demux_010_src0_valid),           //          .valid
		.src0_data          (rsp_xbar_demux_010_src0_data),            //          .data
		.src0_channel       (rsp_xbar_demux_010_src0_channel),         //          .channel
		.src0_startofpacket (rsp_xbar_demux_010_src0_startofpacket),   //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_010_src0_endofpacket),     //          .endofpacket
		.src1_ready         (rsp_xbar_demux_010_src1_ready),           //      src1.ready
		.src1_valid         (rsp_xbar_demux_010_src1_valid),           //          .valid
		.src1_data          (rsp_xbar_demux_010_src1_data),            //          .data
		.src1_channel       (rsp_xbar_demux_010_src1_channel),         //          .channel
		.src1_startofpacket (rsp_xbar_demux_010_src1_startofpacket),   //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_010_src1_endofpacket)      //          .endofpacket
	);

	mysystem_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_011 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset              (HPS_toMem_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_011_src_ready),                     //      sink.ready
		.sink_channel       (id_router_011_src_channel),                   //          .channel
		.sink_data          (id_router_011_src_data),                      //          .data
		.sink_startofpacket (id_router_011_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (id_router_011_src_endofpacket),               //          .endofpacket
		.sink_valid         (id_router_011_src_valid),                     //          .valid
		.src0_ready         (rsp_xbar_demux_011_src0_ready),               //      src0.ready
		.src0_valid         (rsp_xbar_demux_011_src0_valid),               //          .valid
		.src0_data          (rsp_xbar_demux_011_src0_data),                //          .data
		.src0_channel       (rsp_xbar_demux_011_src0_channel),             //          .channel
		.src0_startofpacket (rsp_xbar_demux_011_src0_startofpacket),       //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_011_src0_endofpacket),         //          .endofpacket
		.src1_ready         (rsp_xbar_demux_011_src1_ready),               //      src1.ready
		.src1_valid         (rsp_xbar_demux_011_src1_valid),               //          .valid
		.src1_data          (rsp_xbar_demux_011_src1_data),                //          .data
		.src1_channel       (rsp_xbar_demux_011_src1_channel),             //          .channel
		.src1_startofpacket (rsp_xbar_demux_011_src1_startofpacket),       //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_011_src1_endofpacket)          //          .endofpacket
	);

	mysystem_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_012 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset              (HPS_toMem_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_012_src_ready),                     //      sink.ready
		.sink_channel       (id_router_012_src_channel),                   //          .channel
		.sink_data          (id_router_012_src_data),                      //          .data
		.sink_startofpacket (id_router_012_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (id_router_012_src_endofpacket),               //          .endofpacket
		.sink_valid         (id_router_012_src_valid),                     //          .valid
		.src0_ready         (rsp_xbar_demux_012_src0_ready),               //      src0.ready
		.src0_valid         (rsp_xbar_demux_012_src0_valid),               //          .valid
		.src0_data          (rsp_xbar_demux_012_src0_data),                //          .data
		.src0_channel       (rsp_xbar_demux_012_src0_channel),             //          .channel
		.src0_startofpacket (rsp_xbar_demux_012_src0_startofpacket),       //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_012_src0_endofpacket),         //          .endofpacket
		.src1_ready         (rsp_xbar_demux_012_src1_ready),               //      src1.ready
		.src1_valid         (rsp_xbar_demux_012_src1_valid),               //          .valid
		.src1_data          (rsp_xbar_demux_012_src1_data),                //          .data
		.src1_channel       (rsp_xbar_demux_012_src1_channel),             //          .channel
		.src1_startofpacket (rsp_xbar_demux_012_src1_startofpacket),       //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_012_src1_endofpacket)          //          .endofpacket
	);

	mysystem_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_013 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset              (HPS_toMem_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_013_src_ready),                     //      sink.ready
		.sink_channel       (id_router_013_src_channel),                   //          .channel
		.sink_data          (id_router_013_src_data),                      //          .data
		.sink_startofpacket (id_router_013_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (id_router_013_src_endofpacket),               //          .endofpacket
		.sink_valid         (id_router_013_src_valid),                     //          .valid
		.src0_ready         (rsp_xbar_demux_013_src0_ready),               //      src0.ready
		.src0_valid         (rsp_xbar_demux_013_src0_valid),               //          .valid
		.src0_data          (rsp_xbar_demux_013_src0_data),                //          .data
		.src0_channel       (rsp_xbar_demux_013_src0_channel),             //          .channel
		.src0_startofpacket (rsp_xbar_demux_013_src0_startofpacket),       //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_013_src0_endofpacket),         //          .endofpacket
		.src1_ready         (rsp_xbar_demux_013_src1_ready),               //      src1.ready
		.src1_valid         (rsp_xbar_demux_013_src1_valid),               //          .valid
		.src1_data          (rsp_xbar_demux_013_src1_data),                //          .data
		.src1_channel       (rsp_xbar_demux_013_src1_channel),             //          .channel
		.src1_startofpacket (rsp_xbar_demux_013_src1_startofpacket),       //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_013_src1_endofpacket)          //          .endofpacket
	);

	mysystem_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_014 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset              (HPS_toMem_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_014_src_ready),                     //      sink.ready
		.sink_channel       (id_router_014_src_channel),                   //          .channel
		.sink_data          (id_router_014_src_data),                      //          .data
		.sink_startofpacket (id_router_014_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (id_router_014_src_endofpacket),               //          .endofpacket
		.sink_valid         (id_router_014_src_valid),                     //          .valid
		.src0_ready         (rsp_xbar_demux_014_src0_ready),               //      src0.ready
		.src0_valid         (rsp_xbar_demux_014_src0_valid),               //          .valid
		.src0_data          (rsp_xbar_demux_014_src0_data),                //          .data
		.src0_channel       (rsp_xbar_demux_014_src0_channel),             //          .channel
		.src0_startofpacket (rsp_xbar_demux_014_src0_startofpacket),       //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_014_src0_endofpacket),         //          .endofpacket
		.src1_ready         (rsp_xbar_demux_014_src1_ready),               //      src1.ready
		.src1_valid         (rsp_xbar_demux_014_src1_valid),               //          .valid
		.src1_data          (rsp_xbar_demux_014_src1_data),                //          .data
		.src1_channel       (rsp_xbar_demux_014_src1_channel),             //          .channel
		.src1_startofpacket (rsp_xbar_demux_014_src1_startofpacket),       //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_014_src1_endofpacket)          //          .endofpacket
	);

	mysystem_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_015 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset              (HPS_toMem_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_015_src_ready),                     //      sink.ready
		.sink_channel       (id_router_015_src_channel),                   //          .channel
		.sink_data          (id_router_015_src_data),                      //          .data
		.sink_startofpacket (id_router_015_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (id_router_015_src_endofpacket),               //          .endofpacket
		.sink_valid         (id_router_015_src_valid),                     //          .valid
		.src0_ready         (rsp_xbar_demux_015_src0_ready),               //      src0.ready
		.src0_valid         (rsp_xbar_demux_015_src0_valid),               //          .valid
		.src0_data          (rsp_xbar_demux_015_src0_data),                //          .data
		.src0_channel       (rsp_xbar_demux_015_src0_channel),             //          .channel
		.src0_startofpacket (rsp_xbar_demux_015_src0_startofpacket),       //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_015_src0_endofpacket),         //          .endofpacket
		.src1_ready         (rsp_xbar_demux_015_src1_ready),               //      src1.ready
		.src1_valid         (rsp_xbar_demux_015_src1_valid),               //          .valid
		.src1_data          (rsp_xbar_demux_015_src1_data),                //          .data
		.src1_channel       (rsp_xbar_demux_015_src1_channel),             //          .channel
		.src1_startofpacket (rsp_xbar_demux_015_src1_startofpacket),       //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_015_src1_endofpacket)          //          .endofpacket
	);

	mysystem_mm_interconnect_0_rsp_xbar_mux rsp_xbar_mux (
		.clk                  (sys_sdram_pll_0_sys_clk_clk),                                         //       clk.clk
		.reset                (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_xbar_mux_src_ready),                                              //       src.ready
		.src_valid            (rsp_xbar_mux_src_valid),                                              //          .valid
		.src_data             (rsp_xbar_mux_src_data),                                               //          .data
		.src_channel          (rsp_xbar_mux_src_channel),                                            //          .channel
		.src_startofpacket    (rsp_xbar_mux_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket      (rsp_xbar_mux_src_endofpacket),                                        //          .endofpacket
		.sink0_ready          (rsp_xbar_demux_src0_ready),                                           //     sink0.ready
		.sink0_valid          (rsp_xbar_demux_src0_valid),                                           //          .valid
		.sink0_channel        (rsp_xbar_demux_src0_channel),                                         //          .channel
		.sink0_data           (rsp_xbar_demux_src0_data),                                            //          .data
		.sink0_startofpacket  (rsp_xbar_demux_src0_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket    (rsp_xbar_demux_src0_endofpacket),                                     //          .endofpacket
		.sink1_ready          (rsp_xbar_demux_001_src0_ready),                                       //     sink1.ready
		.sink1_valid          (rsp_xbar_demux_001_src0_valid),                                       //          .valid
		.sink1_channel        (rsp_xbar_demux_001_src0_channel),                                     //          .channel
		.sink1_data           (rsp_xbar_demux_001_src0_data),                                        //          .data
		.sink1_startofpacket  (rsp_xbar_demux_001_src0_startofpacket),                               //          .startofpacket
		.sink1_endofpacket    (rsp_xbar_demux_001_src0_endofpacket),                                 //          .endofpacket
		.sink2_ready          (rsp_xbar_demux_002_src0_ready),                                       //     sink2.ready
		.sink2_valid          (rsp_xbar_demux_002_src0_valid),                                       //          .valid
		.sink2_channel        (rsp_xbar_demux_002_src0_channel),                                     //          .channel
		.sink2_data           (rsp_xbar_demux_002_src0_data),                                        //          .data
		.sink2_startofpacket  (rsp_xbar_demux_002_src0_startofpacket),                               //          .startofpacket
		.sink2_endofpacket    (rsp_xbar_demux_002_src0_endofpacket),                                 //          .endofpacket
		.sink3_ready          (rsp_xbar_demux_003_src0_ready),                                       //     sink3.ready
		.sink3_valid          (rsp_xbar_demux_003_src0_valid),                                       //          .valid
		.sink3_channel        (rsp_xbar_demux_003_src0_channel),                                     //          .channel
		.sink3_data           (rsp_xbar_demux_003_src0_data),                                        //          .data
		.sink3_startofpacket  (rsp_xbar_demux_003_src0_startofpacket),                               //          .startofpacket
		.sink3_endofpacket    (rsp_xbar_demux_003_src0_endofpacket),                                 //          .endofpacket
		.sink4_ready          (rsp_xbar_demux_004_src0_ready),                                       //     sink4.ready
		.sink4_valid          (rsp_xbar_demux_004_src0_valid),                                       //          .valid
		.sink4_channel        (rsp_xbar_demux_004_src0_channel),                                     //          .channel
		.sink4_data           (rsp_xbar_demux_004_src0_data),                                        //          .data
		.sink4_startofpacket  (rsp_xbar_demux_004_src0_startofpacket),                               //          .startofpacket
		.sink4_endofpacket    (rsp_xbar_demux_004_src0_endofpacket),                                 //          .endofpacket
		.sink5_ready          (rsp_xbar_demux_005_src0_ready),                                       //     sink5.ready
		.sink5_valid          (rsp_xbar_demux_005_src0_valid),                                       //          .valid
		.sink5_channel        (rsp_xbar_demux_005_src0_channel),                                     //          .channel
		.sink5_data           (rsp_xbar_demux_005_src0_data),                                        //          .data
		.sink5_startofpacket  (rsp_xbar_demux_005_src0_startofpacket),                               //          .startofpacket
		.sink5_endofpacket    (rsp_xbar_demux_005_src0_endofpacket),                                 //          .endofpacket
		.sink6_ready          (rsp_xbar_demux_006_src0_ready),                                       //     sink6.ready
		.sink6_valid          (rsp_xbar_demux_006_src0_valid),                                       //          .valid
		.sink6_channel        (rsp_xbar_demux_006_src0_channel),                                     //          .channel
		.sink6_data           (rsp_xbar_demux_006_src0_data),                                        //          .data
		.sink6_startofpacket  (rsp_xbar_demux_006_src0_startofpacket),                               //          .startofpacket
		.sink6_endofpacket    (rsp_xbar_demux_006_src0_endofpacket),                                 //          .endofpacket
		.sink7_ready          (rsp_xbar_demux_007_src0_ready),                                       //     sink7.ready
		.sink7_valid          (rsp_xbar_demux_007_src0_valid),                                       //          .valid
		.sink7_channel        (rsp_xbar_demux_007_src0_channel),                                     //          .channel
		.sink7_data           (rsp_xbar_demux_007_src0_data),                                        //          .data
		.sink7_startofpacket  (rsp_xbar_demux_007_src0_startofpacket),                               //          .startofpacket
		.sink7_endofpacket    (rsp_xbar_demux_007_src0_endofpacket),                                 //          .endofpacket
		.sink8_ready          (rsp_xbar_demux_008_src0_ready),                                       //     sink8.ready
		.sink8_valid          (rsp_xbar_demux_008_src0_valid),                                       //          .valid
		.sink8_channel        (rsp_xbar_demux_008_src0_channel),                                     //          .channel
		.sink8_data           (rsp_xbar_demux_008_src0_data),                                        //          .data
		.sink8_startofpacket  (rsp_xbar_demux_008_src0_startofpacket),                               //          .startofpacket
		.sink8_endofpacket    (rsp_xbar_demux_008_src0_endofpacket),                                 //          .endofpacket
		.sink9_ready          (rsp_xbar_demux_009_src0_ready),                                       //     sink9.ready
		.sink9_valid          (rsp_xbar_demux_009_src0_valid),                                       //          .valid
		.sink9_channel        (rsp_xbar_demux_009_src0_channel),                                     //          .channel
		.sink9_data           (rsp_xbar_demux_009_src0_data),                                        //          .data
		.sink9_startofpacket  (rsp_xbar_demux_009_src0_startofpacket),                               //          .startofpacket
		.sink9_endofpacket    (rsp_xbar_demux_009_src0_endofpacket),                                 //          .endofpacket
		.sink10_ready         (rsp_xbar_demux_010_src0_ready),                                       //    sink10.ready
		.sink10_valid         (rsp_xbar_demux_010_src0_valid),                                       //          .valid
		.sink10_channel       (rsp_xbar_demux_010_src0_channel),                                     //          .channel
		.sink10_data          (rsp_xbar_demux_010_src0_data),                                        //          .data
		.sink10_startofpacket (rsp_xbar_demux_010_src0_startofpacket),                               //          .startofpacket
		.sink10_endofpacket   (rsp_xbar_demux_010_src0_endofpacket),                                 //          .endofpacket
		.sink11_ready         (rsp_xbar_demux_011_src0_ready),                                       //    sink11.ready
		.sink11_valid         (rsp_xbar_demux_011_src0_valid),                                       //          .valid
		.sink11_channel       (rsp_xbar_demux_011_src0_channel),                                     //          .channel
		.sink11_data          (rsp_xbar_demux_011_src0_data),                                        //          .data
		.sink11_startofpacket (rsp_xbar_demux_011_src0_startofpacket),                               //          .startofpacket
		.sink11_endofpacket   (rsp_xbar_demux_011_src0_endofpacket),                                 //          .endofpacket
		.sink12_ready         (rsp_xbar_demux_012_src0_ready),                                       //    sink12.ready
		.sink12_valid         (rsp_xbar_demux_012_src0_valid),                                       //          .valid
		.sink12_channel       (rsp_xbar_demux_012_src0_channel),                                     //          .channel
		.sink12_data          (rsp_xbar_demux_012_src0_data),                                        //          .data
		.sink12_startofpacket (rsp_xbar_demux_012_src0_startofpacket),                               //          .startofpacket
		.sink12_endofpacket   (rsp_xbar_demux_012_src0_endofpacket),                                 //          .endofpacket
		.sink13_ready         (rsp_xbar_demux_013_src0_ready),                                       //    sink13.ready
		.sink13_valid         (rsp_xbar_demux_013_src0_valid),                                       //          .valid
		.sink13_channel       (rsp_xbar_demux_013_src0_channel),                                     //          .channel
		.sink13_data          (rsp_xbar_demux_013_src0_data),                                        //          .data
		.sink13_startofpacket (rsp_xbar_demux_013_src0_startofpacket),                               //          .startofpacket
		.sink13_endofpacket   (rsp_xbar_demux_013_src0_endofpacket),                                 //          .endofpacket
		.sink14_ready         (rsp_xbar_demux_014_src0_ready),                                       //    sink14.ready
		.sink14_valid         (rsp_xbar_demux_014_src0_valid),                                       //          .valid
		.sink14_channel       (rsp_xbar_demux_014_src0_channel),                                     //          .channel
		.sink14_data          (rsp_xbar_demux_014_src0_data),                                        //          .data
		.sink14_startofpacket (rsp_xbar_demux_014_src0_startofpacket),                               //          .startofpacket
		.sink14_endofpacket   (rsp_xbar_demux_014_src0_endofpacket),                                 //          .endofpacket
		.sink15_ready         (rsp_xbar_demux_015_src0_ready),                                       //    sink15.ready
		.sink15_valid         (rsp_xbar_demux_015_src0_valid),                                       //          .valid
		.sink15_channel       (rsp_xbar_demux_015_src0_channel),                                     //          .channel
		.sink15_data          (rsp_xbar_demux_015_src0_data),                                        //          .data
		.sink15_startofpacket (rsp_xbar_demux_015_src0_startofpacket),                               //          .startofpacket
		.sink15_endofpacket   (rsp_xbar_demux_015_src0_endofpacket)                                  //          .endofpacket
	);

	mysystem_mm_interconnect_0_rsp_xbar_mux rsp_xbar_mux_001 (
		.clk                  (sys_sdram_pll_0_sys_clk_clk),                                         //       clk.clk
		.reset                (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_xbar_mux_001_src_ready),                                          //       src.ready
		.src_valid            (rsp_xbar_mux_001_src_valid),                                          //          .valid
		.src_data             (rsp_xbar_mux_001_src_data),                                           //          .data
		.src_channel          (rsp_xbar_mux_001_src_channel),                                        //          .channel
		.src_startofpacket    (rsp_xbar_mux_001_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket      (rsp_xbar_mux_001_src_endofpacket),                                    //          .endofpacket
		.sink0_ready          (rsp_xbar_demux_src1_ready),                                           //     sink0.ready
		.sink0_valid          (rsp_xbar_demux_src1_valid),                                           //          .valid
		.sink0_channel        (rsp_xbar_demux_src1_channel),                                         //          .channel
		.sink0_data           (rsp_xbar_demux_src1_data),                                            //          .data
		.sink0_startofpacket  (rsp_xbar_demux_src1_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket    (rsp_xbar_demux_src1_endofpacket),                                     //          .endofpacket
		.sink1_ready          (rsp_xbar_demux_001_src1_ready),                                       //     sink1.ready
		.sink1_valid          (rsp_xbar_demux_001_src1_valid),                                       //          .valid
		.sink1_channel        (rsp_xbar_demux_001_src1_channel),                                     //          .channel
		.sink1_data           (rsp_xbar_demux_001_src1_data),                                        //          .data
		.sink1_startofpacket  (rsp_xbar_demux_001_src1_startofpacket),                               //          .startofpacket
		.sink1_endofpacket    (rsp_xbar_demux_001_src1_endofpacket),                                 //          .endofpacket
		.sink2_ready          (rsp_xbar_demux_002_src1_ready),                                       //     sink2.ready
		.sink2_valid          (rsp_xbar_demux_002_src1_valid),                                       //          .valid
		.sink2_channel        (rsp_xbar_demux_002_src1_channel),                                     //          .channel
		.sink2_data           (rsp_xbar_demux_002_src1_data),                                        //          .data
		.sink2_startofpacket  (rsp_xbar_demux_002_src1_startofpacket),                               //          .startofpacket
		.sink2_endofpacket    (rsp_xbar_demux_002_src1_endofpacket),                                 //          .endofpacket
		.sink3_ready          (rsp_xbar_demux_003_src1_ready),                                       //     sink3.ready
		.sink3_valid          (rsp_xbar_demux_003_src1_valid),                                       //          .valid
		.sink3_channel        (rsp_xbar_demux_003_src1_channel),                                     //          .channel
		.sink3_data           (rsp_xbar_demux_003_src1_data),                                        //          .data
		.sink3_startofpacket  (rsp_xbar_demux_003_src1_startofpacket),                               //          .startofpacket
		.sink3_endofpacket    (rsp_xbar_demux_003_src1_endofpacket),                                 //          .endofpacket
		.sink4_ready          (rsp_xbar_demux_004_src1_ready),                                       //     sink4.ready
		.sink4_valid          (rsp_xbar_demux_004_src1_valid),                                       //          .valid
		.sink4_channel        (rsp_xbar_demux_004_src1_channel),                                     //          .channel
		.sink4_data           (rsp_xbar_demux_004_src1_data),                                        //          .data
		.sink4_startofpacket  (rsp_xbar_demux_004_src1_startofpacket),                               //          .startofpacket
		.sink4_endofpacket    (rsp_xbar_demux_004_src1_endofpacket),                                 //          .endofpacket
		.sink5_ready          (rsp_xbar_demux_005_src1_ready),                                       //     sink5.ready
		.sink5_valid          (rsp_xbar_demux_005_src1_valid),                                       //          .valid
		.sink5_channel        (rsp_xbar_demux_005_src1_channel),                                     //          .channel
		.sink5_data           (rsp_xbar_demux_005_src1_data),                                        //          .data
		.sink5_startofpacket  (rsp_xbar_demux_005_src1_startofpacket),                               //          .startofpacket
		.sink5_endofpacket    (rsp_xbar_demux_005_src1_endofpacket),                                 //          .endofpacket
		.sink6_ready          (rsp_xbar_demux_006_src1_ready),                                       //     sink6.ready
		.sink6_valid          (rsp_xbar_demux_006_src1_valid),                                       //          .valid
		.sink6_channel        (rsp_xbar_demux_006_src1_channel),                                     //          .channel
		.sink6_data           (rsp_xbar_demux_006_src1_data),                                        //          .data
		.sink6_startofpacket  (rsp_xbar_demux_006_src1_startofpacket),                               //          .startofpacket
		.sink6_endofpacket    (rsp_xbar_demux_006_src1_endofpacket),                                 //          .endofpacket
		.sink7_ready          (rsp_xbar_demux_007_src1_ready),                                       //     sink7.ready
		.sink7_valid          (rsp_xbar_demux_007_src1_valid),                                       //          .valid
		.sink7_channel        (rsp_xbar_demux_007_src1_channel),                                     //          .channel
		.sink7_data           (rsp_xbar_demux_007_src1_data),                                        //          .data
		.sink7_startofpacket  (rsp_xbar_demux_007_src1_startofpacket),                               //          .startofpacket
		.sink7_endofpacket    (rsp_xbar_demux_007_src1_endofpacket),                                 //          .endofpacket
		.sink8_ready          (rsp_xbar_demux_008_src1_ready),                                       //     sink8.ready
		.sink8_valid          (rsp_xbar_demux_008_src1_valid),                                       //          .valid
		.sink8_channel        (rsp_xbar_demux_008_src1_channel),                                     //          .channel
		.sink8_data           (rsp_xbar_demux_008_src1_data),                                        //          .data
		.sink8_startofpacket  (rsp_xbar_demux_008_src1_startofpacket),                               //          .startofpacket
		.sink8_endofpacket    (rsp_xbar_demux_008_src1_endofpacket),                                 //          .endofpacket
		.sink9_ready          (rsp_xbar_demux_009_src1_ready),                                       //     sink9.ready
		.sink9_valid          (rsp_xbar_demux_009_src1_valid),                                       //          .valid
		.sink9_channel        (rsp_xbar_demux_009_src1_channel),                                     //          .channel
		.sink9_data           (rsp_xbar_demux_009_src1_data),                                        //          .data
		.sink9_startofpacket  (rsp_xbar_demux_009_src1_startofpacket),                               //          .startofpacket
		.sink9_endofpacket    (rsp_xbar_demux_009_src1_endofpacket),                                 //          .endofpacket
		.sink10_ready         (rsp_xbar_demux_010_src1_ready),                                       //    sink10.ready
		.sink10_valid         (rsp_xbar_demux_010_src1_valid),                                       //          .valid
		.sink10_channel       (rsp_xbar_demux_010_src1_channel),                                     //          .channel
		.sink10_data          (rsp_xbar_demux_010_src1_data),                                        //          .data
		.sink10_startofpacket (rsp_xbar_demux_010_src1_startofpacket),                               //          .startofpacket
		.sink10_endofpacket   (rsp_xbar_demux_010_src1_endofpacket),                                 //          .endofpacket
		.sink11_ready         (rsp_xbar_demux_011_src1_ready),                                       //    sink11.ready
		.sink11_valid         (rsp_xbar_demux_011_src1_valid),                                       //          .valid
		.sink11_channel       (rsp_xbar_demux_011_src1_channel),                                     //          .channel
		.sink11_data          (rsp_xbar_demux_011_src1_data),                                        //          .data
		.sink11_startofpacket (rsp_xbar_demux_011_src1_startofpacket),                               //          .startofpacket
		.sink11_endofpacket   (rsp_xbar_demux_011_src1_endofpacket),                                 //          .endofpacket
		.sink12_ready         (rsp_xbar_demux_012_src1_ready),                                       //    sink12.ready
		.sink12_valid         (rsp_xbar_demux_012_src1_valid),                                       //          .valid
		.sink12_channel       (rsp_xbar_demux_012_src1_channel),                                     //          .channel
		.sink12_data          (rsp_xbar_demux_012_src1_data),                                        //          .data
		.sink12_startofpacket (rsp_xbar_demux_012_src1_startofpacket),                               //          .startofpacket
		.sink12_endofpacket   (rsp_xbar_demux_012_src1_endofpacket),                                 //          .endofpacket
		.sink13_ready         (rsp_xbar_demux_013_src1_ready),                                       //    sink13.ready
		.sink13_valid         (rsp_xbar_demux_013_src1_valid),                                       //          .valid
		.sink13_channel       (rsp_xbar_demux_013_src1_channel),                                     //          .channel
		.sink13_data          (rsp_xbar_demux_013_src1_data),                                        //          .data
		.sink13_startofpacket (rsp_xbar_demux_013_src1_startofpacket),                               //          .startofpacket
		.sink13_endofpacket   (rsp_xbar_demux_013_src1_endofpacket),                                 //          .endofpacket
		.sink14_ready         (rsp_xbar_demux_014_src1_ready),                                       //    sink14.ready
		.sink14_valid         (rsp_xbar_demux_014_src1_valid),                                       //          .valid
		.sink14_channel       (rsp_xbar_demux_014_src1_channel),                                     //          .channel
		.sink14_data          (rsp_xbar_demux_014_src1_data),                                        //          .data
		.sink14_startofpacket (rsp_xbar_demux_014_src1_startofpacket),                               //          .startofpacket
		.sink14_endofpacket   (rsp_xbar_demux_014_src1_endofpacket),                                 //          .endofpacket
		.sink15_ready         (rsp_xbar_demux_015_src1_ready),                                       //    sink15.ready
		.sink15_valid         (rsp_xbar_demux_015_src1_valid),                                       //          .valid
		.sink15_channel       (rsp_xbar_demux_015_src1_channel),                                     //          .channel
		.sink15_data          (rsp_xbar_demux_015_src1_data),                                        //          .data
		.sink15_startofpacket (rsp_xbar_demux_015_src1_startofpacket),                               //          .startofpacket
		.sink15_endofpacket   (rsp_xbar_demux_015_src1_endofpacket)                                  //          .endofpacket
	);

endmodule
